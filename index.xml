<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Rsquared Academy Blog</title>
    <link>/</link>
    <description>Recent content on Rsquared Academy Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2014-2017. All rights reserved.</copyright>
    <lastBuildDate>Sat, 16 Sep 2017 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Import Data into R - Part 2</title>
      <link>/post/import-data-into-r-part-2/</link>
      <pubDate>Sat, 16 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>/post/import-data-into-r-part-2/</guid>
      <description>IntroductionThis is the fourth post in the series Introduction to tidyverse. In the previous post, we learnt how to read data from delimited files and other statistical softwares. In this post we will learn to:
list sheets in an excel fileread data from excel sheetread specific cells from an excel sheetread a single rowread a single columnread several rowsread several columns</description>
    </item>
    
    <item>
      <title>Dataframes</title>
      <link>/post/dataframes/</link>
      <pubDate>Mon, 11 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>/post/dataframes/</guid>
      <description>IntroductionThis is the tenth post in the series Introduction to R. In the previous post. In the previous post, we learnt about lists. In this post, we will learn about dataframe.
create dataframeselect columnsselect rowsutitlity functionsCreate dataframesUse data.frame to create dataframes. Below is the function syntax:
args(data.frame)## function (..., row.names = NULL, check.rows = FALSE, check.names = TRUE, ## fix.</description>
    </item>
    
    <item>
      <title>Matrix - Part 2</title>
      <link>/post/matrix-part-2/</link>
      <pubDate>Thu, 07 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>/post/matrix-part-2/</guid>
      <description>IntroductionThis is the ninth post in the series Introduction to R. In the previous post, we learnt to create matrices. In this post, we will learn to:
combining matricesindex/subset matricesdissolve matricesAppend DataIn this section, we will learn how to append data to a matrix. There are two functions that can be used for this purpose:
rbind()cbind()cbind will append a new column to the matrix while rbind will append a new row.</description>
    </item>
    
    <item>
      <title>Vectors - Part 2</title>
      <link>/post/vectors-part-2/</link>
      <pubDate>Thu, 07 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>/post/vectors-part-2/</guid>
      <description>IntroductionThis is the sixth post in the series Introduction to R. In the previous post, we learnt to create vectors of different data types. In this post, we will learn to
coerce different data typesperform simple operations on vectorshandle missing dataindex/subset vectorsNaming Vector ElementsIt is possible to name the different elements of a vector. The advantage of naming vector elements is that we can later on use these names to access the elements.</description>
    </item>
    
    <item>
      <title>Vectors - Part 3</title>
      <link>/post/vectors-part-3/</link>
      <pubDate>Thu, 07 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>/post/vectors-part-3/</guid>
      <description>IntroductionThis is the seventh post in the series Introduction to R. In the previous post, we learnt to perform simple operations on vector and handle missing values. In this post, we will learn to index/subset vectors.
Index VectorsOne of the most important steps in data analysis is selecting a subset of data from a bigger data set. Indexing helps in retrieving values individually or a set of values that meet a specific criteria.</description>
    </item>
    
    <item>
      <title>Data Types in R</title>
      <link>/post/data-types-in-r/</link>
      <pubDate>Wed, 06 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>/post/data-types-in-r/</guid>
      <description>IntroductionThis is the fourth post in the series Introduction to R. In the previous post, we learnt how to create variables in R. In this post, we will learn about the following data types:
numeric/doubleintegercharacterlogicaldate/timeNumericIn R, numbers are represented by the data type numeric. We will first create a variable and assign it a value. Next we will learn a few methods of checking the type of the variable.</description>
    </item>
    
    <item>
      <title>Data Wrangling with dbplyr</title>
      <link>/post/data-wrangling-with-dbplyr/</link>
      <pubDate>Tue, 18 Jul 2017 00:00:00 +0000</pubDate>
      
      <guid>/post/data-wrangling-with-dbplyr/</guid>
      <description></description>
    </item>
    
    <item>
      <title>SQL for Data Science</title>
      <link>/post/sql-for-data-science/</link>
      <pubDate>Tue, 18 Jul 2017 00:00:00 +0000</pubDate>
      
      <guid>/post/sql-for-data-science/</guid>
      <description></description>
    </item>
    
    <item>
      <title>A Complete Guide to Importing Data into R - Part 2</title>
      <link>/post/a-complete-guide-to-importing-data-into-r-part-2/</link>
      <pubDate>Fri, 14 Jul 2017 00:00:00 +0000</pubDate>
      
      <guid>/post/a-complete-guide-to-importing-data-into-r-part-2/</guid>
      <description>IntroductionThis is the fourth post in the series Data Wrangling with R. In the previous post, we learnt to import data from flat files, excel spreadsheets and statistical softwares. In this post, we will learn to import data from:
JSONXMLgooglesheetsJSONA lot of API data is available in the JSON format. You can use the jsonlite package to import JSON data into R.</description>
    </item>
    
    <item>
      <title>A Complete Guide to Importing Data into R - Part 3</title>
      <link>/post/a-complete-guide-to-importing-data-into-r-part-3/</link>
      <pubDate>Fri, 14 Jul 2017 00:00:00 +0000</pubDate>
      
      <guid>/post/a-complete-guide-to-importing-data-into-r-part-3/</guid>
      <description>IntroductionThis is the fifth post in the series Data Wrangling with R. In the previous post, we learnt to import data from flat files, excel spreadsheets and statistical softwares. In this post, we will learn to import data from:
JSONXML
Libraries, Data &amp;amp; CodeWe will use the following libraries in this post:
jsonlitexml2XML[purrr]All the data sets used in this post can be found here and code can be downloaded from here.</description>
    </item>
    
    <item>
      <title>Blogs</title>
      <link>/post/blogs/</link>
      <pubDate>Fri, 14 Jul 2017 00:00:00 +0000</pubDate>
      
      <guid>/post/blogs/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Books</title>
      <link>/post/books/</link>
      <pubDate>Fri, 14 Jul 2017 00:00:00 +0000</pubDate>
      
      <guid>/post/books/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Exporting Data from R</title>
      <link>/post/exporting-data-from-r/</link>
      <pubDate>Fri, 14 Jul 2017 00:00:00 +0000</pubDate>
      
      <guid>/post/exporting-data-from-r/</guid>
      <description> 
IntroductionThis is the fifth post in the series Data Wrangling with R. In the previous post, we learnt to import data from JSON, XML and googlesheets. In this post, we will learn to export data/code from R.
Files# readr::read_file()Lines# readr::read_lines()SummaryUp Next..</description>
    </item>
    
    <item>
      <title>Package Website</title>
      <link>/post/package-website/</link>
      <pubDate>Fri, 14 Jul 2017 00:00:00 +0000</pubDate>
      
      <guid>/post/package-website/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Presentations</title>
      <link>/post/presentations/</link>
      <pubDate>Fri, 14 Jul 2017 00:00:00 +0000</pubDate>
      
      <guid>/post/presentations/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Websites</title>
      <link>/post/websites/</link>
      <pubDate>Fri, 14 Jul 2017 00:00:00 +0000</pubDate>
      
      <guid>/post/websites/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Guides - Axes</title>
      <link>/post/guides-axes/</link>
      <pubDate>Thu, 06 Jul 2017 00:00:00 +0000</pubDate>
      
      <guid>/post/guides-axes/</guid>
      <description>IntroductionNow that we have learnt to build different plots, let us look at different ways to modify the axis. Along the way, we will also explore the scale_*() family of functions
scale_x_continuous(): modify x axis when x is continuousThe first function we will explore is scale_x_continuous(). It can be used for:
axis titleaxis labelsaxis limitsaxis breaksand axis positionLet us create a simple scatter plot and then use scale_x_continuous() to modify the X axis.</description>
    </item>
    
    <item>
      <title>Guides - Legends</title>
      <link>/post/guides-legends/</link>
      <pubDate>Thu, 06 Jul 2017 00:00:00 +0000</pubDate>
      
      <guid>/post/guides-legends/</guid>
      <description>IntroductionThis is the 13th post in the series Elegant Data Visualization with ggplot2. In the previos post, we learnt how to modify the axis of plots. In this post, we will focus on modifying the legends of plots when the aesthetics are mapped to variables.
Now that we have learnt to build different plots, let us look at different ways to modify the axis. Along the way, we will also explore the below functions:</description>
    </item>
    
    <item>
      <title>Guides: Legends - Part 2</title>
      <link>/post/guides-legends-part-2/</link>
      <pubDate>Thu, 06 Jul 2017 00:00:00 +0000</pubDate>
      
      <guid>/post/guides-legends-part-2/</guid>
      <description>This is the 14th post in the series Elegant Data Visualization with ggplot2. In the previos post, we learnt how to modify the legend of plots when aesthetics are mapped to variables. In this post, we will continue to explore different ways to modify/customize the legend of plots.
Guidesggplot(mtcars) +geom_point(aes(disp, mpg, color = factor(cyl))) +scale_color_manual(values = c(&amp;quot;red&amp;quot;, &amp;quot;blue&amp;quot;, &amp;quot;green&amp;quot;),guide = guide_legend(title = &amp;quot;Cylinders&amp;quot;,title.hjust = 0.</description>
    </item>
    
    <item>
      <title>Overlapping</title>
      <link>/post/overlapping/</link>
      <pubDate>Thu, 06 Jul 2017 00:00:00 +0000</pubDate>
      
      <guid>/post/overlapping/</guid>
      <description>IntroductionThis is the 18th post in the series Elegant Data Visualization with ggplot2. In the previous post, we learnt how to modify the legend of plots when aesthetics are mapped to variables. In this post, we will learn to position the geoms to avoid overlapping.
DodgePreserve the vertical position while adjusting the horizontal position.
Create grouped bar plots.
ggplot(data = mtcars, aes(factor(cyl), fill = factor(vs))) +geom_bar()ggplot(data = mtcars, aes(factor(cyl), fill = factor(vs))) +geom_bar(position = position_dodge(width = 1))JitterAdd some noise to data points for better visualization.</description>
    </item>
    
    <item>
      <title>Axis &amp; Plot Labels</title>
      <link>/post/axis-plot-labels/</link>
      <pubDate>Tue, 04 Jul 2017 00:00:00 +0000</pubDate>
      
      <guid>/post/axis-plot-labels/</guid>
      <description>IntroductionThis is the fifth post in the series Elegant Data Visualization with ggplot2. In the previous post, we learnt about aesthetics. In this post, we will learn to:
add title and subtitle to the plotmodify axis labelsmodify axis rangeremove axisformat axisBasic PlotLet us start by building a simple scatter plot.
ggplot(mtcars) +geom_point(aes(disp, mpg))Title &amp;amp; SubtitleYou can add a title and subtitle to the plot using the ggtitle() function.</description>
    </item>
    
    <item>
      <title>Guides</title>
      <link>/post/guides/</link>
      <pubDate>Tue, 04 Jul 2017 00:00:00 +0000</pubDate>
      
      <guid>/post/guides/</guid>
      <description> 
IntroductionThis is the sixth post in the series Elegant Data Visualization with ggplot2. In the previous post, we learnt how to add text to a plot. In this post, we will learn how to modify guide/legend.
Guideggplot(mtcars) +geom_bar(aes(factor(cyl), fill = factor(gear))) +scale_fill_discrete(guide = guide_legend(title = &amp;#39;gear&amp;#39;, title.position = &amp;#39;bottom&amp;#39;, title.hjust = 0.5,label.position = &amp;#39;top&amp;#39;, direction = &amp;#39;horizontal&amp;#39;, label.hjust = 0.5, nrow = 3, reverse = TRUE))</description>
    </item>
    
    <item>
      <title>Why you should purrr - Part 2</title>
      <link>/post/why-you-should-purrr-part-2/</link>
      <pubDate>Fri, 23 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>/post/why-you-should-purrr-part-2/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Why you should purrr?</title>
      <link>/post/why-you-should-purrr-part-1/</link>
      <pubDate>Fri, 23 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>/post/why-you-should-purrr-part-1/</guid>
      <description>This is the 10th post in the series Data Wrangling with R. In the previous post, we learnt helper functions in dplyr package. In this post, we will learn about purrr, an R package that enhances R’s functional programming toolkit. Let us begin by installing and loading purrr and a set of other pacakges we will be using.
As we did in the earlier posts in this series, we will use a case study to explore the various features of the stringr package.</description>
    </item>
    
    <item>
      <title>Data Manipulation in R with dplyr - Part 3</title>
      <link>/post/data-manipulation-in-r-with-dplyr-part-3/</link>
      <pubDate>Sun, 28 May 2017 00:00:00 +0000</pubDate>
      
      <guid>/post/data-manipulation-in-r-with-dplyr-part-3/</guid>
      <description>IntroductionThis is the ninth post in the series Data Wrangling with R. In the previous post, we learnt how to combine tables using the *_join() family of functions in dplyr.
In this post, we will explore a set of helper functions in order to:
extract unique rowsrename columnssample dataextract columnsslice rowsarrange rowscompare tablesextract/mutate data using predicate functionscount observations for different levels of a variableCase StudyLet us look at a case study (e-commerce data) and see how we can use dplyr helper functions to answer questions we have about and to modify/transform the underlying data set.</description>
    </item>
    
    <item>
      <title>Data Manipulation in R with dplyr - Part 2</title>
      <link>/post/data-manipulation-in-r-with-dplyr-part-2/</link>
      <pubDate>Mon, 22 May 2017 00:00:00 +0000</pubDate>
      
      <guid>/post/data-manipulation-in-r-with-dplyr-part-2/</guid>
      <description>IntroductionThis is the eighth post in the series Data Wrangling with R. In a previous post, we learnt about dplyr verbs and used them to compute average order value for an e-commerce website data. In this post, we will learn to combine tables using different join functions provided in dplyr. Let us assume we have 2 tables y and y. Below are the different types of join functions provided in dplyr.</description>
    </item>
    
    <item>
      <title>forcats: Working with factor data in R</title>
      <link>/post/forcats-working-with-factor-data-in-r/</link>
      <pubDate>Wed, 17 May 2017 00:00:00 +0000</pubDate>
      
      <guid>/post/forcats-working-with-factor-data-in-r/</guid>
      <description>IntroductionThis is the 12th post in the series Data Wrangling with R. In the previous post, we learnt to manipulate strings using the stringr package. In this post, we will learn to work with categorical/qualitative data in R using forcats. Let us begin by installing and loading forcats and a set of other pacakges we will be using.
We will use a case study to explore the various features of the forcats package.</description>
    </item>
    
    <item>
      <title>Why you should know the Normal distribution?</title>
      <link>/post/why-you-should-know-the-normal-distribution/</link>
      <pubDate>Fri, 12 May 2017 00:00:00 +0000</pubDate>
      
      <guid>/post/why-you-should-know-the-normal-distribution/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Introduction to tibbles</title>
      <link>/post/introduction-to-tibbles/</link>
      <pubDate>Sat, 22 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>/post/introduction-to-tibbles/</guid>
      <description>IntroductionThis is the second post in the series Data Wrangling with R. In the previous post, we introduced tidyverse. In this post, we will learn about tibbles, a modern version of data frames that retain the good aspects (of data frames) while getting rid of the frustrating and annoying parts. tibbles are part of the tidyverse. In this post, we will learn how tibbles makes certain parts of the data analysis workflow easier by being different from data frames.</description>
    </item>
    
    <item>
      <title>Getting started with tidyverse</title>
      <link>/post/getting-started-with-tidyverse/</link>
      <pubDate>Thu, 06 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>/post/getting-started-with-tidyverse/</guid>
      <description>This is the first post in the series Data Wrangling with R. In this series, we will look at the challenges faced when working with data of different types coming from different sources and explore tools available in R to overcome such challenges.
IntroductionThe tidyverse is a collection of R packages that share a common underlying philosophy and are designed to work together. They share common data representations and API design.</description>
    </item>
    
    <item>
      <title>Working with strings in R using stringr</title>
      <link>/post/working-with-strings-in-r-using-stringr/</link>
      <pubDate>Thu, 23 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>/post/working-with-strings-in-r-using-stringr/</guid>
      <description>IntroductionThis is the eleventh post in the series Data Wrangling with R. In the previous post, we learnt to manipulate date and time using the lubridate package. In this post, we will learn to work with string data in R using stringr. Let us begin by installing and loading stringr and a set of other pacakges we will be using.
printcatpastepaste0()sprintf()As we did in the earlier posts in this series, we will use a case study to explore the various features of the stringr package.</description>
    </item>
    
    <item>
      <title>How to work with dates in R</title>
      <link>/post/how-to-work-with-dates-in-r/</link>
      <pubDate>Thu, 09 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>/post/how-to-work-with-dates-in-r/</guid>
      <description>IntroductionThis is the tenth post in the series Data Wrangling with R. In the previous post, we learnt to manipulate dataframes using the dplyr package. In this post, we will learn to work with date/time data in R using lubridate, an R package that makes it easy to work with dates and time. Let us begin by installing and loading the lubridate pacakge.
Quick OverviewUse origin to get the origin for the Date and other date/time objects in R.</description>
    </item>
    
    <item>
      <title>Data Manipulation in R with dplyr - Part 1</title>
      <link>/post/data-manipulation-in-r-with-dplyr-part-1/</link>
      <pubDate>Sat, 18 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>/post/data-manipulation-in-r-with-dplyr-part-1/</guid>
      <description>IntroductionThis is the seventh post in the series Data Wrangling with R. In the previous [post], we learnt about using pipes to make our code readable. In this post, we will learn about dplyr.
According to a survey by CrowdFlower, data scientists spend most of their time cleaning and manipulating data rather than mining or modeling them for insights. As such, it becomes important to have tools that make data manipulation faster and easier.</description>
    </item>
    
    <item>
      <title>Readable Code with Pipes</title>
      <link>/post/readable-code-with-pipes/</link>
      <pubDate>Tue, 14 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>/post/readable-code-with-pipes/</guid>
      <description>IntroductionThis is the sixth post in the series Data Wrangling with R. In the previous post, we learnt to export data/code from R. In this post, we will learn about pipes.
When you are dealing with a sequence of multiple operations, R code can get a bit cramped and not so easy on the eyes. The magrittr package by Stefan Milton Bache provides pipes enabling us to write R code that is readable.</description>
    </item>
    
    <item>
      <title>Quick Guide: R &amp; SQLite</title>
      <link>/post/quick-guide-r-sqlite/</link>
      <pubDate>Sun, 05 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>/post/quick-guide-r-sqlite/</guid>
      <description>Connectioncon &amp;lt;- DBI::dbConnect(RSQLite::SQLite(), &amp;quot;:memory:&amp;quot;)Connection Summarysummary(con)## Length Class Mode ## 1 SQLiteConnection S4List TablesdbListTables(con)## [1] &amp;quot;ecom&amp;quot; &amp;quot;sqlite_stat1&amp;quot; &amp;quot;sqlite_stat4&amp;quot;List FieldsDBI::dbListFields(con, &amp;quot;ecom&amp;quot;)## [1] &amp;quot;referrer&amp;quot; &amp;quot;device&amp;quot; &amp;quot;bouncers&amp;quot; &amp;quot;n_visit&amp;quot; &amp;quot;n_pages&amp;quot; &amp;quot;duration&amp;quot;Querying DatadbReadTable(): read entire tabledbGetQuery(): read few rowsdbSendQuery() &amp;amp; dbFetch(): read data in batchesEntire TableDBI::dbReadTable(con, &amp;#39;ecom&amp;#39;)## referrer device bouncers n_visit n_pages duration## 1 google laptop true 10 1 693## 2 yahoo tablet true 9 1 459## 3 direct laptop true 0 1 996## 4 bing tablet false 3 18 468## 5 yahoo mobile true 9 1 955## 6 yahoo laptop false 5 5 135## 7 yahoo mobile true 10 1 75## 8 direct mobile true 10 1 908## 9 bing mobile false 3 19 209## 10 google mobile true 6 1 208## 11 direct laptop true 9 1 738## 12 direct tablet false 6 12 132## 13 direct mobile false 9 14 406## 14 yahoo tablet false 5 8 80## 15 yahoo mobile false 7 1 19## 16 bing laptop true 1 1 995## 17 bing tablet false 5 16 368## 18 google tablet true 7 1 406## 19 social tablet false 7 10 290## 20 social tablet false 2 1 28Few RowsDBI::dbGetQuery(con, &amp;quot;select * from ecom limit 10&amp;quot;)## referrer device bouncers n_visit n_pages duration## 1 google laptop true 10 1 693## 2 yahoo tablet true 9 1 459## 3 direct laptop true 0 1 996## 4 bing tablet false 3 18 468## 5 yahoo mobile true 9 1 955## 6 yahoo laptop false 5 5 135## 7 yahoo mobile true 10 1 75## 8 direct mobile true 10 1 908## 9 bing mobile false 3 19 209## 10 google mobile true 6 1 208Read Data in Batchesquery &amp;lt;- DBI::dbSendQuery(con, &amp;#39;select * from ecom&amp;#39;)result &amp;lt;- DBI::dbFetch(query, n = 15)result## referrer device bouncers n_visit n_pages duration## 1 google laptop true 10 1 693## 2 yahoo tablet true 9 1 459## 3 direct laptop true 0 1 996## 4 bing tablet false 3 18 468## 5 yahoo mobile true 9 1 955## 6 yahoo laptop false 5 5 135## 7 yahoo mobile true 10 1 75## 8 direct mobile true 10 1 908## 9 bing mobile false 3 19 209## 10 google mobile true 6 1 208## 11 direct laptop true 9 1 738## 12 direct tablet false 6 12 132## 13 direct mobile false 9 14 406## 14 yahoo tablet false 5 8 80## 15 yahoo mobile false 7 1 19QueryQuery StatusDBI::dbHasCompleted(query)## [1] FALSEQuery InfoDBI::dbGetInfo(query)## $statement## [1] &amp;quot;select * from ecom&amp;quot;## ## $row.</description>
    </item>
    
    <item>
      <title>RMySQL for Beginners</title>
      <link>/post/rmysql-for-beginners/</link>
      <pubDate>Mon, 23 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>/post/rmysql-for-beginners/</guid>
      <description>ObjectivesInstall and load RMySQL packageConnect to a MySQL database from RDisplay database informationList tables in the databaseCreate new tableImport data into R for analysisExport data from R into MySQLRemove tables and disconnectIntroductionIn real world, data is often stored in relational databases such as MySQL and an analyst is required to extract the data in order to perform any type of analysis.</description>
    </item>
    
    <item>
      <title>A complete guide to importing data into R</title>
      <link>/post/a-complete-guide-to-importing-data-into-r/</link>
      <pubDate>Sun, 08 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>/post/a-complete-guide-to-importing-data-into-r/</guid>
      <description>table {border: 1px solid gray;text-align: left;width: 70%;}th, td {border: 1px solid gray;text-align: left;width: 50%;} 
IntroductionThis is the third post in the series Introduction to tidyverse. In the previous post, we learnt about tibbles. In this post, we will learn to import data into R from different sources. Importing data is the first step in any data analysis workflow.</description>
    </item>
    
    <item>
      <title>Descriptive Statistics.. What?</title>
      <link>/post/descriptive-statistics-what/</link>
      <pubDate>Fri, 06 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>/post/descriptive-statistics-what/</guid>
      <description></description>
    </item>
    
    <item>
      <title>RStudio 2 GitHub: GitHub Pages</title>
      <link>/post/github-pages/</link>
      <pubDate>Mon, 19 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>/post/github-pages/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Git Command Line</title>
      <link>/post/git-command-line/</link>
      <pubDate>Wed, 07 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>/post/git-command-line/</guid>
      <description></description>
    </item>
    
    <item>
      <title>RStudio 2 GitHub: Git Branch Workflow</title>
      <link>/post/git-branch-workflow/</link>
      <pubDate>Thu, 24 Nov 2016 00:00:00 +0000</pubDate>
      
      <guid>/post/git-branch-workflow/</guid>
      <description></description>
    </item>
    
    <item>
      <title>RStudio 2 GitHub: Git Project Workflow</title>
      <link>/post/git-project-workflow/</link>
      <pubDate>Thu, 10 Nov 2016 00:00:00 +0000</pubDate>
      
      <guid>/post/git-project-workflow/</guid>
      <description></description>
    </item>
    
    <item>
      <title>RStudio 2 GitHub - Configure RStudio</title>
      <link>/post/configure-rstudio/</link>
      <pubDate>Sat, 22 Oct 2016 00:00:00 +0000</pubDate>
      
      <guid>/post/configure-rstudio/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Quick Introduction to GitHub</title>
      <link>/post/quick-introduction-to-github/</link>
      <pubDate>Fri, 07 Oct 2016 00:00:00 +0000</pubDate>
      
      <guid>/post/quick-introduction-to-github/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Install Git</title>
      <link>/post/install-git/</link>
      <pubDate>Tue, 20 Sep 2016 00:00:00 +0000</pubDate>
      
      <guid>/post/install-git/</guid>
      <description></description>
    </item>
    
    <item>
      <title>RStudio 2 GitHub - Introduction</title>
      <link>/post/introduction-to-version-control/</link>
      <pubDate>Thu, 08 Sep 2016 00:00:00 +0000</pubDate>
      
      <guid>/post/introduction-to-version-control/</guid>
      <description></description>
    </item>
    
    <item>
      <title>ggplot2: Extensions</title>
      <link>/post/ggplot2-extensions/</link>
      <pubDate>Tue, 19 Jul 2016 00:00:00 +0000</pubDate>
      
      <guid>/post/ggplot2-extensions/</guid>
      <description></description>
    </item>
    
    <item>
      <title>ggplot2: Facets (Combine multiple plots)</title>
      <link>/post/ggplot2-facets-combine-multiple-plots/</link>
      <pubDate>Fri, 08 Jul 2016 00:00:00 +0000</pubDate>
      
      <guid>/post/ggplot2-facets-combine-multiple-plots/</guid>
      <description>IntroductionThis is the 13th post in the series Elegant Data Visualization with ggplot2. In the previous post, we learnt the stat_*() family of functions. In this post, we will learn about faceting i.e. combining plots.
We will continue to use the ecommerce data. You can download it from here or import directly using the readr package.
ggplot(ecom, aes(n_pages, duration)) + geom_point() +facet_grid(. ~ device)ggplot(ecom, aes(n_pages, duration)) + geom_point() +facet_grid(device ~ .</description>
    </item>
    
    <item>
      <title>ggplot2: Themes</title>
      <link>/post/ggplot2-themes/</link>
      <pubDate>Sat, 25 Jun 2016 00:00:00 +0000</pubDate>
      
      <guid>/post/ggplot2-themes/</guid>
      <description>This is the last post in the series Elegant Data Visualization with ggplot2. In the previous post, we learnt to combine multiple plots. In this post, we will learn to
modify theme componentsuse different themesUse theme() to modify the appearance of all non data components of the plot.
thememodify components of a plotp &amp;lt;- ggplot(mtcars) +geom_point(aes(disp, mpg))# modify X axis titlep + theme(axis.</description>
    </item>
    
    <item>
      <title>ggplot2: Text Annotations</title>
      <link>/post/ggplot2-text-annotations/</link>
      <pubDate>Fri, 10 Jun 2016 00:00:00 +0000</pubDate>
      
      <guid>/post/ggplot2-text-annotations/</guid>
      <description>IntroductionThis is the sixth post in the series Elegant Data Visualization with ggplot2. In the previous post, we learnt to modify the axis and plot labels. In this post, we will learn to add text to the plots.
AnnotateWe will use the annotate() function to add custom text to the plots. You can use the annotate() function to add rectangles/segments/pointrange as well but our focus will be on adding text.</description>
    </item>
    
    <item>
      <title>ggplot2: Statistical Plots</title>
      <link>/post/ggplot2-statistical-plots/</link>
      <pubDate>Mon, 23 May 2016 00:00:00 +0000</pubDate>
      
      <guid>/post/ggplot2-statistical-plots/</guid>
      <description>IntroductionThis is the 12th post in the series Elegant Data Visualization with ggplot2. In the previous post, we learnt to build histograms. In this post, we will explore an alternative method to build plots.
We will continue to use the ecommerce data. You can download it from here or import directly using the readr package.
StatsSo far we have used geom_*() functions to build plot. Now we will use a new set of functions stat_*() to build the plots.</description>
    </item>
    
    <item>
      <title>About</title>
      <link>/about/</link>
      <pubDate>Thu, 05 May 2016 21:48:51 -0700</pubDate>
      
      <guid>/about/</guid>
      <description>Rsquared Academy is an e-learning platform offering self paced and instructor led courses. Our main area of focus are data science and business analytics. Our courses are curated by experts from the industry and delivered by a team passionate about online education. We offer 24&amp;frasl;7 on-demand support for all our courses.
Vision To make professional education flexible, affordable, effective and enjoyable.
Mission Leverage technology and experitse to build a platform that offers interactive online learning accompanied by 24&amp;frasl;7 support.</description>
    </item>
    
    <item>
      <title>Email Subscription</title>
      <link>/subscribe/</link>
      <pubDate>Thu, 05 May 2016 21:48:51 -0700</pubDate>
      
      <guid>/subscribe/</guid>
      <description>Enter your email address to subscribe to this blog and receive notifications of new posts by email.</description>
    </item>
    
    <item>
      <title>New? Start Here</title>
      <link>/start-here/</link>
      <pubDate>Thu, 05 May 2016 21:48:51 -0700</pubDate>
      
      <guid>/start-here/</guid>
      <description>New to our blog? Welcome aboard! There are posts on a wide variety of topics listed below. If you are new to R, we suggest you start with Introduction to R section. If you have been using R for a while, feel free to choose any of the topics.
Introduction to R  Introduction to R Introduction to RStudio Variables &amp;amp; Data Types Vectors Matrix Lists Factors Dataframes Getting Help in R Beginners Guide to R Pacakge Ecosystem  Data Wrangling With R  Getting started with tidyverse Introduction to tibbles A Complete Guide to Importing Data into R - Part 1 A Complete Guide to Importing Data into R - Part 2 A Complete Guide to Importing Data into R - Part 3 Readable Code with Pipes Data Manipulation in R with dplyr - Part 1 Data Manipulation in R with dplyr - Part 2 Data Manipulation in R with dplyr - Part 3 How to work with dates in R?</description>
    </item>
    
    <item>
      <title>ggplot2: Histogram</title>
      <link>/post/ggplot2-histogram/</link>
      <pubDate>Fri, 06 May 2016 00:00:00 +0000</pubDate>
      
      <guid>/post/ggplot2-histogram/</guid>
      <description>IntroductionThis is the eleventh post in the series Elegant Data Visualization with ggplot2. In the previous post, we learnt to build box plots. In this post, we will focus on histograms.
We will continue to use the ecommerce data. You can download it from here or import directly using the readr package.
Simple Histogramggplot(ecom) +geom_histogram(aes(n_visit))## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.</description>
    </item>
    
    <item>
      <title>ggplot2: Box Plots</title>
      <link>/post/ggplot2-box-plots/</link>
      <pubDate>Thu, 21 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>/post/ggplot2-box-plots/</guid>
      <description>IntroductionThis is the 9th post in the series Elegant Data Visualization with ggplot2. In the previous post, we learnt how to build line charts. In this post, we will focus on boxplots.
We will continue to use the ecommerce data. You can download it from here or import directly using the readr package.
Simple Box Plotggplot(ecom) +geom_boxplot(aes(x = factor(1), y = n_visit))Now we need to mention something for X axis and hence we use the number 1.</description>
    </item>
    
    <item>
      <title>ggplot2: Bar Plots</title>
      <link>/post/ggplot2-bar-plots/</link>
      <pubDate>Thu, 07 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>/post/ggplot2-bar-plots/</guid>
      <description> 
IntroductionThis is the ninth post in the series Elegant Data Visualization with ggplot2. In the previous post, we learnt to build line charts. In this post, we will focus on bar plots.
We will continue to use the ecommerce data. You can download it from here or import directly using the readr package.
Simple Bar Plotggplot(ecom) +geom_bar(aes(factor(device)))Bar Colorggplot(ecom) +geom_bar(aes(factor(device)),fill = c(&amp;#39;red&amp;#39;, &amp;#39;blue&amp;#39;, &amp;#39;green&amp;#39;))Bar Line Colorggplot(ecom) +geom_bar(aes(factor(device)),color = c(&amp;#39;red&amp;#39;, &amp;#39;blue&amp;#39;, &amp;#39;green&amp;#39;))Bar Line Typeggplot(ecom) +geom_bar(aes(factor(device)), fill = &amp;#39;white&amp;#39;, color = &amp;#39;red&amp;#39;, linetype = 2)Bar Line Sizeggplot(ecom) +geom_bar(aes(factor(device)), fill = &amp;#39;white&amp;#39;, color = &amp;#39;red&amp;#39;, linetype = 2, size = 2)Stacked Bar Plotggplot(ecom) +geom_bar(aes(device, fill = factor(referrer)))Grouped Bar Plotggplot(ecom) +geom_bar(aes(device, fill = factor(referrer)), position = &amp;#39;dodge&amp;#39;)Horizontal Bar Plotggplot(ecom) +geom_bar(aes(factor(device), fill = factor(referrer))) +coord_flip()</description>
    </item>
    
    <item>
      <title>ggplot2: Line Graphs</title>
      <link>/post/ggplot2-line-graphs/</link>
      <pubDate>Tue, 22 Mar 2016 00:00:00 +0000</pubDate>
      
      <guid>/post/ggplot2-line-graphs/</guid>
      <description>IntroductionThis is the 8th post in the series Elegant Data Visualization with ggplot2. In the previous post, we learnt to build scatter plots. In this post, we will learn to build line plots.
Basic Line PlotWe will use a data set related to GDP growth rate. You can download it from here. It contains GDP (Gross Domestic Product) growth data for the BRICS (Brazil, Russia, India, China, South Africa) for the years 2000 to 2005.</description>
    </item>
    
    <item>
      <title>ggplot2: Scatter Plots</title>
      <link>/post/ggplot2-scatter-plots/</link>
      <pubDate>Wed, 09 Mar 2016 00:00:00 +0000</pubDate>
      
      <guid>/post/ggplot2-scatter-plots/</guid>
      <description>IntroductionThis is the fifth post in the series Elegant Data Visualization with ggplot2. In the previous post, we learnt about aesthetics. In this post, we will build scatter plots by applying everything we have learnt so far.
Basic PlotWe will continue to use the ecommerce data. You can download it from here or import directly using the readr package.
Let us start by building a simple scatter plot.</description>
    </item>
    
    <item>
      <title>ggplot2: Introduction to aesthetics</title>
      <link>/post/ggplot2-introduction-to-aesthetics/</link>
      <pubDate>Sat, 20 Feb 2016 00:00:00 +0000</pubDate>
      
      <guid>/post/ggplot2-introduction-to-aesthetics/</guid>
      <description>IntroductionThis is the fourth post in the series Elegant Data Visualization with ggplot2. In the previous post we learnt about geoms and how we can use them to build different plots. In this post, we will focus on the aesthetics i.e. color, shape, size, alpha, line type, line width etc. We can map these to variables or specify values for them. If we want to map the above to variables, we have to specify them within the aes() function.</description>
    </item>
    
    <item>
      <title>ggplot2: Quick Tour</title>
      <link>/post/ggplot2-quick-tour/</link>
      <pubDate>Fri, 19 Feb 2016 00:00:00 +0000</pubDate>
      
      <guid>/post/ggplot2-quick-tour/</guid>
      <description>IntroductionThis is the second post in the series Elegant Data Visualization with ggplot2. In the previous post, we understood the concept of grammar of graphics and even built a bar plot step by step while exploring the different components of a plot/chart. In this post, we will learn to quickly build a set of plots that are routinely used to explore data.
Scatter Plotqplot(disp, mpg, data = mtcars)qplot(disp, mpg, data = mtcars, geom = c(&amp;#39;point&amp;#39;, &amp;#39;line&amp;#39;))qplot(disp, mpg, data = mtcars, color = factor(cyl))qplot(disp, mpg, data = mtcars, shape = factor(cyl))qplot(disp, mpg, data = mtcars, size = qsec)Bar Plotqplot(factor(cyl), data = mtcars, geom = c(&amp;#39;bar&amp;#39;))qplot(factor(cyl), data = mtcars, geom = c(&amp;#39;bar&amp;#39;), fill = factor(am))Box Plotqplot(factor(cyl), mpg, data = mtcars, geom = c(&amp;#39;boxplot&amp;#39;))qplot(factor(1), mpg, data = mtcars, geom = c(&amp;#39;boxplot&amp;#39;))qplot(factor(cyl), mpg, data = mtcars, geom = c(&amp;#39;boxplot&amp;#39;, &amp;#39;jitter&amp;#39;))Line Chartqplot(x = date, y = unemploy, data = economics, geom = c(&amp;#39;line&amp;#39;))qplot(x = date, y = unemploy, data = economics, geom = c(&amp;#39;line&amp;#39;),color = &amp;#39;red&amp;#39;)Histogramqplot(mpg, data = mtcars, bins = 5)SummaryIn this post, we learnt to quickly create plots using the qplot() function.</description>
    </item>
    
    <item>
      <title>ggplot2: Introduction to geoms</title>
      <link>/post/ggplot2-introduction-to-geoms/</link>
      <pubDate>Fri, 05 Feb 2016 00:00:00 +0000</pubDate>
      
      <guid>/post/ggplot2-introduction-to-geoms/</guid>
      <description>IntroductionThis is the third post in the series Elegant Data Visualization with ggplot2. In the previous post, we learnt how to create plots using the qplot() function. In this post, we will create some of the most routinely used plots to explore data using the geom_* functions.
PointLet us say we want to visualize the relationship between two continuous variables. For example, as visitors browse more pages on a website, the time spent on the website also increases.</description>
    </item>
    
    <item>
      <title>Introduction to ggplot2</title>
      <link>/post/introduction-to-ggplot2/</link>
      <pubDate>Thu, 07 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>/post/introduction-to-ggplot2/</guid>
      <description>This is the first post in the series Elegant Data Visualization with ggplot2. In this post, we will understand the philosophy of Grammar of Graphics. In the subsequent posts, we will explore different aspects of ggplot2 and learn to build some of the basic plots regularly used for exploring data.
Introductionggplot2 is an alternative (and awesome) to base R for data visualization. It is based on The Grammar of Graphics.</description>
    </item>
    
    <item>
      <title>Data Visualization with R - Font, Color &amp; Size</title>
      <link>/post/data-visualization-with-r-font-color-size/</link>
      <pubDate>Sat, 26 Dec 2015 00:00:00 +0000</pubDate>
      
      <guid>/post/data-visualization-with-r-font-color-size/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Data Visualization with R - Combining Plots</title>
      <link>/post/data-visualization-with-r-combining-plots/</link>
      <pubDate>Thu, 17 Dec 2015 00:00:00 +0000</pubDate>
      
      <guid>/post/data-visualization-with-r-combining-plots/</guid>
      <description>This is the tenth post in the series Data Visualization With R. In the previous post, we learnt how to add text annotations to plots. In this post, we will learn how to combine multiple plots.
IntroductionOften, it is useful to have multiple plots in the same frame as it allows us to get a comprehensive view of a particular variable or compare among different variables. Listed below are two methods to combine plots:</description>
    </item>
    
    <item>
      <title>Data Visualization with R - Text Annotations</title>
      <link>/post/data-visualization-with-r-text-annotations/</link>
      <pubDate>Tue, 08 Dec 2015 00:00:00 +0000</pubDate>
      
      <guid>/post/data-visualization-with-r-text-annotations/</guid>
      <description>This is the ninth post in the series Data Visualization With R. In the previous post, we learnt how to add legend to a plot. In this post, we will learn to add text annotations.
IntroductionThere are occassions when you want to display additional information in a plot. This is usually achieved by adding text either inside the plot or on the margins. For example, you might want to label a line/bar or add formulas to better communicate what is shown in the plot.</description>
    </item>
    
    <item>
      <title>Data Visualization with R - Legends</title>
      <link>/post/data-visualization-with-r-legends/</link>
      <pubDate>Wed, 25 Nov 2015 00:00:00 +0000</pubDate>
      
      <guid>/post/data-visualization-with-r-legends/</guid>
      <description>This is the eighth post in the series Data Visualisation With R. In the previous post, we learnt to build histograms. In this post, we will learn how to add a legend to a plot in R.
IntroductionLegends are used to convey information about the data being represented by a plot. To understand the importance of legends, let us look at the two plots below. In the first plot, would you be able to understand what the lines represent in the absence of a legend?</description>
    </item>
    
    <item>
      <title>Data Visualization with R - Histogram</title>
      <link>/post/data-visualization-with-r-histogram/</link>
      <pubDate>Fri, 06 Nov 2015 00:00:00 +0000</pubDate>
      
      <guid>/post/data-visualization-with-r-histogram/</guid>
      <description>This is the seventh post in the series Data Visualization With R. In the previous post, we learnt about box and whisker plots. In this post, we will learn about histograms.
IntroductionA histogram is a plot that can be used to examine the shape and spread of continuous data. It looks very similar to a bar graph and can be used to detect outliers and skewness in data.</description>
    </item>
    
    <item>
      <title>Data Visualization with R - Box Plots</title>
      <link>/post/data-visualization-with-r-box-plots/</link>
      <pubDate>Wed, 21 Oct 2015 00:00:00 +0000</pubDate>
      
      <guid>/post/data-visualization-with-r-box-plots/</guid>
      <description>This is the sixth post in the series Data Visualization With R. In the previous post, we learnt how to build bar plots. In this post, we will learn about box plots.
IntroductionThe box plot is a standardized way of displaying the distribution of data based on the five number summary: minimum, first quartile, median, third quartile, and maximum. Box plots are useful for detecting outliers and for comparing distributions.</description>
    </item>
    
    <item>
      <title>Data Visualization With R - Bar Plots</title>
      <link>/post/data-visualization-with-r-bar-plots/</link>
      <pubDate>Mon, 05 Oct 2015 00:00:00 +0000</pubDate>
      
      <guid>/post/data-visualization-with-r-bar-plots/</guid>
      <description>IntroductionThis is the fifth post in the series Data Visualization With R. In the previous post we learnt how to build line graphs. In this post, we will visualize categorical data using univariate and bivariate bar plots.
Bar PlotA bar plot represents data in rectangular bars. The length of the bars are proportional to the values they represent. Bar plots can be either horizontal or vertical.</description>
    </item>
    
    <item>
      <title>Data Visualization With R - Line Graphs</title>
      <link>/post/data-visualization-with-r-line-graphs/</link>
      <pubDate>Wed, 23 Sep 2015 00:00:00 +0000</pubDate>
      
      <guid>/post/data-visualization-with-r-line-graphs/</guid>
      <description>IntroductionThis is the fourth post in the series Data Visualization With R. In the previous post, we learnt how to build scatter plots. In this post, we will build line graphs. To be more specific we will learn to
create line plotsadd color to linesmodify line type/stylemodify line widthadd points to the linesmodify axis rangeadd additional lines to the plotLine GraphTo build a line graph, we will learn a new argument in the plot() function called type.</description>
    </item>
    
    <item>
      <title>Data Visualization With R - Scatter Plots</title>
      <link>/post/data-visualization-with-r-scatter-plots/</link>
      <pubDate>Mon, 07 Sep 2015 00:00:00 +0000</pubDate>
      
      <guid>/post/data-visualization-with-r-scatter-plots/</guid>
      <description>IntroductionThis is the third post in the series Data Visualization With R. In the previous post, we learned how to add title, subtitle and axis labels. We also learned how to modify the range of the axis. In this post, we will learn how to create scatter plots. If you remember, we had created a scatter plot in this post, using the plot() function. We will continue with the same plot and learn how to enhance a scatter plot by</description>
    </item>
    
    <item>
      <title>Data Visualization With R - Title and Axis Labels</title>
      <link>/post/data-visualization-with-r-title-and-axis-labels/</link>
      <pubDate>Sat, 22 Aug 2015 00:00:00 +0000</pubDate>
      
      <guid>/post/data-visualization-with-r-title-and-axis-labels/</guid>
      <description>IntroductionThis is the second post of the series Data Visualization With R. In the previous post, we explored the plot() function and observed the different types of plots it generated. In this post, we will learn how to add:
TitleSubtitleAxis Labelsto a plot and how to modify:
Axis rangeIn the previous post, we created plots which did not have any title or labels.</description>
    </item>
    
    <item>
      <title>Data Visualization With R - Introduction</title>
      <link>/post/data-visualization-with-r-introduction/</link>
      <pubDate>Wed, 05 Aug 2015 00:00:00 +0000</pubDate>
      
      <guid>/post/data-visualization-with-r-introduction/</guid>
      <description>IntroductionThis is the first post of the series Data Visualization With R. The objective of the series is to provide a gentle introduction to working with base graphics in R. We will come up with a similar series using ggplot2 shortly.
What is data visualization?In simple words, data visualization is the representation of data in graphical format.
data-viz
Why visualize data?Explore: Visualization helps in exploring and explaining patterns and trendsDetect: Patterns or anomalies in data can be detected by looking at graphsMake sense: Possible to make sense of large amount of data efficiently and in timeCommunicate: Easy to communicate and share the insights from dataCompare the below output and the boxplot and you will agree that</description>
    </item>
    
    <item>
      <title>apply family of functions</title>
      <link>/post/apply-family-functions/</link>
      <pubDate>Mon, 20 Jul 2015 00:00:00 +0000</pubDate>
      
      <guid>/post/apply-family-functions/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Functions</title>
      <link>/post/functions/</link>
      <pubDate>Wed, 08 Jul 2015 00:00:00 +0000</pubDate>
      
      <guid>/post/functions/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Loops</title>
      <link>/post/loops/</link>
      <pubDate>Mon, 22 Jun 2015 00:00:00 +0000</pubDate>
      
      <guid>/post/loops/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Control Flow</title>
      <link>/post/control-flow/</link>
      <pubDate>Tue, 09 Jun 2015 00:00:00 +0000</pubDate>
      
      <guid>/post/control-flow/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Beginners Guide to R Package Ecosystem</title>
      <link>/post/beginners-guide-to-r-package-ecosystem/</link>
      <pubDate>Tue, 26 May 2015 00:00:00 +0000</pubDate>
      
      <guid>/post/beginners-guide-to-r-package-ecosystem/</guid>
      <description>IntroductionThis is the thirteenth post in the series Introduction to R. In the previous post, we learnt about getting help in R. In this post, we will learn about R packages. Packages are fundamental to R. There are approximately 11000 packages available on CRAN or the Comprehensive R Archive Network.
Packages are available for different topics. You should always look for a package before writing code from scratch.</description>
    </item>
    
    <item>
      <title>Getting Help In R</title>
      <link>/post/getting-help-in-r/</link>
      <pubDate>Wed, 13 May 2015 00:00:00 +0000</pubDate>
      
      <guid>/post/getting-help-in-r/</guid>
      <description>IntroductionThis is the twelfth post in the series Introduction to R. In the previous post, we learnt about factors. In this post, we will learn about the different methods of getting help in R. Often we get stuck while doing some analysis as either we do not know the correct function to use or its syntax. It is important for anyone who is new to R to know the right place to look for help.</description>
    </item>
    
    <item>
      <title>Dataframes</title>
      <link>/post/introduction-to-dataframes/</link>
      <pubDate>Thu, 23 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>/post/introduction-to-dataframes/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Factors</title>
      <link>/post/introduction-to-factors/</link>
      <pubDate>Sat, 11 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>/post/introduction-to-factors/</guid>
      <description>IntroductionThis is the eleventh post in the series Introduction to R. In the previous post, we learnt about dataframes. In this post, we will learn about factors.
create factorsorder levelsspecify labelscheck levelsnumber of levelsCategorical or qualitative data in R is treated as data type factor.
Create Factorsargs(factor)## function (x = character(), levels, labels = levels, exclude = NA, ## ordered = is.</description>
    </item>
    
    <item>
      <title>Lists</title>
      <link>/post/introduction-to-lists/</link>
      <pubDate>Sun, 22 Mar 2015 00:00:00 +0000</pubDate>
      
      <guid>/post/introduction-to-lists/</guid>
      <description>IntroductionThis is the ninth post in the series Introduction to R. In the previous post, we learnt about matrices. In this post, we will learn about lists. Lists are very useful as they are heterogeneous i.e. they can contain different data types. If you remember, vectors and matrices are homogeneous i.e. they can contain only one type of data. If you include different data types, they will all be coerced to the same type.</description>
    </item>
    
    <item>
      <title>Matrix</title>
      <link>/post/introduction-to-matrix/</link>
      <pubDate>Tue, 10 Mar 2015 00:00:00 +0000</pubDate>
      
      <guid>/post/introduction-to-matrix/</guid>
      <description>IntroductionThis is the eighth post in the series Introduction to R. In the previous post, we learnt to index/subset vectors. In this post, we will learn to create matrices. A matrix is a regular array of data elements, arranged in rows and columns. Matrices in R are homogeneous i.e. they can hold a single type of data. Matrix elements are indexed by specifying the row and column index and the elements of a matrix can filled either by row or column.</description>
    </item>
    
    <item>
      <title>Vectors</title>
      <link>/post/introduction-to-vectors/</link>
      <pubDate>Fri, 20 Feb 2015 00:00:00 +0000</pubDate>
      
      <guid>/post/introduction-to-vectors/</guid>
      <description>IntroductionThis is the fifth post in the series Introduction to R. In the previous post, we learnt about the basic data types in R. IN this post, we will:
understand the concept of vectorslearn to create vectors of different data typesVectorsVector is the most basic data structure in R. It is a sequence of elements of the same data type. If the elements are of different data types, they will be coerced to a common type that can accommodate all the elements.</description>
    </item>
    
    <item>
      <title>Data Types in R</title>
      <link>/post/data-types-in-r/</link>
      <pubDate>Sat, 07 Feb 2015 00:00:00 +0000</pubDate>
      
      <guid>/post/data-types-in-r/</guid>
      <description>IntroductionThis is the third post in the series Introduction to R. In the previous post, we learnt to install RStudio. In this post, we will learn about variables and data types. You can skip this post, if you have prior experience in any other programming language.
What is a variable?variables are the fundamental elements of any programming languagethey are used to represent values that are likely to changethey reference memory locations that store information/dataLet us use a simple case study to understand variables.</description>
    </item>
    
    <item>
      <title>Introduction to RStudio</title>
      <link>/post/introduction-to-rstudio/</link>
      <pubDate>Sun, 25 Jan 2015 00:00:00 +0000</pubDate>
      
      <guid>/post/introduction-to-rstudio/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Introduction to R</title>
      <link>/post/introduction-to-r/</link>
      <pubDate>Sat, 10 Jan 2015 00:00:00 +0000</pubDate>
      
      <guid>/post/introduction-to-r/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>