<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ggplot2 on Rsquared Academy Blog</title>
    <link>/tags/ggplot2/index.xml</link>
    <description>Recent content in Ggplot2 on Rsquared Academy Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2014-2017. All rights reserved.</copyright>
    <atom:link href="/tags/ggplot2/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Axis &amp; Plot Labels</title>
      <link>/post/axis-plot-labels/</link>
      <pubDate>Tue, 04 Jul 2017 00:00:00 +0000</pubDate>
      
      <guid>/post/axis-plot-labels/</guid>
      <description>&lt;div id=&#34;introduction&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Introduction&lt;/h1&gt;
&lt;p&gt;This is the fifth post in the series &lt;strong&gt;Elegant Data Visualization with ggplot2&lt;/strong&gt;. In the previous &lt;a href=&#34;https://rsquaredacademy.github.io/blog/post/ggplot2-introduction-to-aesthetics/&#34;&gt;post&lt;/a&gt;, we learnt about aesthetics. In this post, we will learn to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;add title and subtitle to the plot&lt;/li&gt;
&lt;li&gt;modify axis labels&lt;/li&gt;
&lt;li&gt;modify axis range&lt;/li&gt;
&lt;li&gt;remove axis&lt;/li&gt;
&lt;li&gt;format axis&lt;/li&gt;
&lt;/ul&gt;
&lt;div id=&#34;basic-plot&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Basic Plot&lt;/h2&gt;
&lt;p&gt;Let us start by building a simple scatter plot.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(mtcars) +
  geom_point(aes(disp, mpg))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2017-07-04-axis-plot-labels_files/figure-html/axis2-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;title-subtitle&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Title &amp;amp; Subtitle&lt;/h2&gt;
&lt;p&gt;You can add a title and subtitle to the plot using the &lt;code&gt;ggtitle()&lt;/code&gt; function.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(mtcars) +
  geom_point(aes(disp, mpg)) +
  ggtitle(label = &amp;#39;Displacement vs Mileage&amp;#39;, subtitle = &amp;#39;disp vs mpg&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2017-07-04-axis-plot-labels_files/figure-html/axis3-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;axis-labels&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Axis Labels&lt;/h2&gt;
&lt;p&gt;The axis labels can be modified using the &lt;code&gt;xlab()&lt;/code&gt; and &lt;code&gt;ylab()&lt;/code&gt; functions.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(mtcars) +
  geom_point(aes(disp, mpg)) +
  xlab(&amp;#39;Displacement&amp;#39;) + ylab(&amp;#39;Miles Per Gallon&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2017-07-04-axis-plot-labels_files/figure-html/axis4-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;We can add all of the above using the &lt;code&gt;labs()&lt;/code&gt; function as well.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(mtcars) +
  geom_point(aes(disp, mpg)) +
  labs(title = &amp;#39;Displacement vs Mileage&amp;#39;,
    subtitle = &amp;#39;disp vs mpg&amp;#39;, x = &amp;#39;Displacement&amp;#39;,
    y = &amp;#39;Miles Per Gallon&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2017-07-04-axis-plot-labels_files/figure-html/axis5-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;axis-range&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Axis Range&lt;/h2&gt;
&lt;p&gt;Sometimes you may want to modify the range of the axis.&lt;/p&gt;
&lt;p&gt;Use the &lt;code&gt;xlim()&lt;/code&gt; function to modify the range of the X axis.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(mtcars) +
  geom_point(aes(disp, mpg)) +
  xlim(c(0, 600))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2017-07-04-axis-plot-labels_files/figure-html/axis6-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Use the &lt;code&gt;ylim()&lt;/code&gt; function to modify the range of the Y axis.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(mtcars) +
  geom_point(aes(disp, mpg)) +
  ylim(c(0, 40))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2017-07-04-axis-plot-labels_files/figure-html/axis7-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;You can use the &lt;code&gt;expand_limits()&lt;/code&gt; function as well.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(mtcars) +
  geom_point(aes(disp, mpg)) +
  expand_limits(x = c(0, 600), y = c(0, 40))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2017-07-04-axis-plot-labels_files/figure-html/axis8-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;remove-axis-labels&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Remove Axis Labels&lt;/h2&gt;
&lt;p&gt;If you want to remove the axis labels all together, use the &lt;code&gt;theme()&lt;/code&gt; function.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(mtcars) +
  geom_point(aes(disp, mpg)) +
  theme(axis.title.x = element_blank(),
    axis.title.y = element_blank())&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2017-07-04-axis-plot-labels_files/figure-html/axis9-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;What we are doing above is to modify the theme of the plot and set the axis labels to blank using &lt;code&gt;element_blank()&lt;/code&gt; function.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;format-title-axis-labels&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Format Title &amp;amp; Axis Labels&lt;/h2&gt;
&lt;p&gt;To format the title or the axis labels, we have to modify the theme of the plot using the &lt;code&gt;theme()&lt;/code&gt; function. We can modify the color, font family, font face, font size and horizontal position. Let us try them one by one.&lt;/p&gt;
&lt;p&gt;The font family can be any of the valid font family types but it must be supported by OS. The font face can be plain, bold, italic, bold.italic hjust must be between 0 (extreme left) and 1 (extreme right).&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(mtcars) +
  geom_point(aes(disp, mpg)) +
  ggtitle(&amp;#39;Diaplacement vs Mileage&amp;#39;) +
  theme(plot.title = element_text(color = &amp;#39;blue&amp;#39;,
                                  family = &amp;#39;Arial&amp;#39;,
                                  face = &amp;#39;bold&amp;#39;,
                                  size = 8,
                                  hjust = 0.3))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, :
## font family not found in Windows font database

## Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, :
## font family not found in Windows font database

## Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, :
## font family not found in Windows font database&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2017-07-04-axis-plot-labels_files/figure-html/axis10-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;X axis label.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(mtcars) +
  geom_point(aes(disp, mpg)) +
  xlab(&amp;#39;Diaplacement&amp;#39;) +
  theme(axis.title.x = element_text(color = &amp;#39;blue&amp;#39;,
                                  family = &amp;#39;Arial&amp;#39;,
                                  face = &amp;#39;bold&amp;#39;,
                                  size = 8,
                                  hjust = 0.5,
                                  angle = 15))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, :
## font family not found in Windows font database

## Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, :
## font family not found in Windows font database

## Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, :
## font family not found in Windows font database&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x
## $y, : font family not found in Windows font database&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2017-07-04-axis-plot-labels_files/figure-html/axis11-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Y axis label.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(mtcars) +
  geom_point(aes(disp, mpg)) +
  ylab(&amp;#39;Miles Per Gallon&amp;#39;) +
  theme(axis.title.y = element_text(color = &amp;#39;blue&amp;#39;,
                                  family = &amp;#39;Arial&amp;#39;,
                                  face = &amp;#39;italic&amp;#39;,
                                  size = 8,
                                  vjust = 0.3,
                                  angle = 90))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, :
## font family not found in Windows font database

## Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, :
## font family not found in Windows font database

## Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, :
## font family not found in Windows font database&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x
## $y, : font family not found in Windows font database&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2017-07-04-axis-plot-labels_files/figure-html/axis12-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Guides</title>
      <link>/post/guides/</link>
      <pubDate>Tue, 04 Jul 2017 00:00:00 +0000</pubDate>
      
      <guid>/post/guides/</guid>
      <description>&lt;div id=&#34;introduction&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Introduction&lt;/h1&gt;
&lt;p&gt;This is the sixth post in the series &lt;strong&gt;Elegant Data Visualization with ggplot2&lt;/strong&gt;. In the previous &lt;a href=&#34;https://rsquaredacademy.github.io/blog/post/ggplot2-text-annotations/&#34;&gt;post&lt;/a&gt;, we learnt how to add text to a plot. In this post, we will learn how to modify guide/legend.&lt;/p&gt;
&lt;div id=&#34;guide&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Guide&lt;/h2&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(mtcars) +
  geom_bar(aes(factor(cyl), fill = factor(gear))) +
  scale_fill_discrete(guide = guide_legend(
    title = &amp;#39;gear&amp;#39;, title.position = &amp;#39;bottom&amp;#39;, title.hjust = 0.5,
    label.position = &amp;#39;top&amp;#39;, direction = &amp;#39;horizontal&amp;#39;, 
    label.hjust = 0.5, nrow = 3, reverse = TRUE))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2017-07-04-guides_files/figure-html/guides2-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>ggplot2: Extensions</title>
      <link>/post/ggplot2-extensions/</link>
      <pubDate>Tue, 19 Jul 2016 00:00:00 +0000</pubDate>
      
      <guid>/post/ggplot2-extensions/</guid>
      <description>&lt;!-- BLOGDOWN-HEAD --&gt;
&lt;!-- /BLOGDOWN-HEAD --&gt;

&lt;!-- BLOGDOWN-BODY-BEFORE --&gt;
&lt;!-- /BLOGDOWN-BODY-BEFORE --&gt;

</description>
    </item>
    
    <item>
      <title>ggplot2: Facets (Combine multiple plots)</title>
      <link>/post/ggplot2-facets-combine-multiple-plots/</link>
      <pubDate>Fri, 08 Jul 2016 00:00:00 +0000</pubDate>
      
      <guid>/post/ggplot2-facets-combine-multiple-plots/</guid>
      <description>&lt;!-- BLOGDOWN-HEAD --&gt;
&lt;!-- /BLOGDOWN-HEAD --&gt;

&lt;!-- BLOGDOWN-BODY-BEFORE --&gt;
&lt;!-- /BLOGDOWN-BODY-BEFORE --&gt;

</description>
    </item>
    
    <item>
      <title>ggplot2: Themes</title>
      <link>/post/ggplot2-themes/</link>
      <pubDate>Sat, 25 Jun 2016 00:00:00 +0000</pubDate>
      
      <guid>/post/ggplot2-themes/</guid>
      <description>&lt;!-- BLOGDOWN-HEAD --&gt;
&lt;!-- /BLOGDOWN-HEAD --&gt;

&lt;!-- BLOGDOWN-BODY-BEFORE --&gt;
&lt;!-- /BLOGDOWN-BODY-BEFORE --&gt;

</description>
    </item>
    
    <item>
      <title>ggplot2: Text Annotations</title>
      <link>/post/ggplot2-text-annotations/</link>
      <pubDate>Fri, 10 Jun 2016 00:00:00 +0000</pubDate>
      
      <guid>/post/ggplot2-text-annotations/</guid>
      <description>&lt;div id=&#34;introduction&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Introduction&lt;/h1&gt;
&lt;p&gt;This is the sixth post in the series &lt;strong&gt;Elegant Data Visualization with ggplot2&lt;/strong&gt;. In the previous &lt;a href=&#34;http://www.rsquaredacademy.com/blog/post/axis-plot-labels/&#34;&gt;post&lt;/a&gt;, we learnt to modify the axis and plot labels. In this post, we will learn to add text to the plots.&lt;/p&gt;
&lt;div id=&#34;annotate&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Annotate&lt;/h2&gt;
&lt;p&gt;We will use the &lt;code&gt;annotate()&lt;/code&gt; function to add custom text to the plots. You can use the &lt;code&gt;annotate()&lt;/code&gt; function to add rectangles/segments/pointrange as well but our focus will be on adding text. Let us start with a simple scatter plot.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(mtcars) +
  geom_point(aes(disp, mpg)) +
  annotate(&amp;#39;text&amp;#39;, x = 200, y = 30, label = &amp;#39;Sample Text&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2017-05-17-ggplot2-text-annotations_files/figure-html/ann2-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;We can format the text as well.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(mtcars) +
  geom_point(aes(disp, mpg)) +
  annotate(&amp;#39;text&amp;#39;, x = 200, y = 30, label = &amp;#39;Sample Text&amp;#39;,
           color = &amp;#39;red&amp;#39;, size = 6, fontface = &amp;#39;bold&amp;#39;, angle = 25)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2017-05-17-ggplot2-text-annotations_files/figure-html/ann3-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;summary&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Summary&lt;/h2&gt;
&lt;p&gt;In the next &lt;a href=&#34;https://rsquaredacademy.github.io/blog/post/guides/&#34;&gt;post&lt;/a&gt;, we will learn how to work with guides/legends in ggplot2.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>ggplot2: Statistical Plots</title>
      <link>/post/ggplot2-statistical-plots/</link>
      <pubDate>Mon, 23 May 2016 00:00:00 +0000</pubDate>
      
      <guid>/post/ggplot2-statistical-plots/</guid>
      <description>&lt;!-- BLOGDOWN-HEAD --&gt;
&lt;!-- /BLOGDOWN-HEAD --&gt;

&lt;!-- BLOGDOWN-BODY-BEFORE --&gt;
&lt;!-- /BLOGDOWN-BODY-BEFORE --&gt;

</description>
    </item>
    
    <item>
      <title>ggplot2: Histogram</title>
      <link>/post/ggplot2-histogram/</link>
      <pubDate>Fri, 06 May 2016 00:00:00 +0000</pubDate>
      
      <guid>/post/ggplot2-histogram/</guid>
      <description>&lt;!-- BLOGDOWN-HEAD --&gt;
&lt;!-- /BLOGDOWN-HEAD --&gt;

&lt;!-- BLOGDOWN-BODY-BEFORE --&gt;
&lt;!-- /BLOGDOWN-BODY-BEFORE --&gt;

</description>
    </item>
    
    <item>
      <title>ggplot2: Box Plots</title>
      <link>/post/ggplot2-box-plots/</link>
      <pubDate>Thu, 21 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>/post/ggplot2-box-plots/</guid>
      <description>&lt;div id=&#34;introduction&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Introduction&lt;/h1&gt;
&lt;p&gt;This is the 9th post in the series &lt;strong&gt;Elegant Data Visualization with ggplot2&lt;/strong&gt;. In the previous &lt;a href=&#34;https://rsquaredacademy.github.io/blog/post/ggplot2-line-graphs/&#34;&gt;post&lt;/a&gt;, we learnt how to build line charts. In this post, we will focus on boxplots.&lt;/p&gt;
&lt;p&gt;We will continue to use the ecommerce data. You can download it from &lt;a href=&#34;https://github.com/rsquaredacademy/datasets/blob/master/web.csv&#34;&gt;here&lt;/a&gt; or import directly using the readr package.&lt;/p&gt;
&lt;div id=&#34;simple-box-plot&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Simple Box Plot&lt;/h2&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(ecom) +
  geom_boxplot(aes(x = factor(1), y = n_visit))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2017-05-17-ggplot2-box-plots_files/figure-html/box2-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Now we need to mention something for X axis and hence we use the number 1. If we do not mention anything, ggplot2 will return an error. You can generally use any categorical variable for the X axis. Below is an example:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(ecom) +
  geom_boxplot(aes(x = factor(device), y = n_visit))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2017-05-17-ggplot2-box-plots_files/figure-html/box3-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;If you want horizontal boxplots, use &lt;code&gt;coord_flip()&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(ecom) +
  geom_boxplot(aes(x = factor(device), y = n_visit)) +
  coord_flip()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2017-05-17-ggplot2-box-plots_files/figure-html/box4-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;notch&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Notch&lt;/h2&gt;
&lt;p&gt;Notches are used to compare groups; if the notches of two boxes do not overlap, this suggests that the medians are significantly different.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(ecom) +
  geom_boxplot(aes(x = factor(device), y = n_visit),
               notch = TRUE) &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2017-05-17-ggplot2-box-plots_files/figure-html/box5-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;jitter&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Jitter&lt;/h2&gt;
&lt;p&gt;Overlay points on boxplots.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(ecom, aes(x = factor(device), y = n_visit)) +
  geom_boxplot() +
  geom_jitter(width = 0.2, color = &amp;#39;blue&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2017-05-17-ggplot2-box-plots_files/figure-html/box6-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;outliers&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Outliers&lt;/h2&gt;
&lt;div id=&#34;color&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Color&lt;/h3&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(ecom) +
  geom_boxplot(aes(x = factor(device), y = duration),
               outlier.color = &amp;#39;red&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2017-05-17-ggplot2-box-plots_files/figure-html/box7-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;shape&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Shape&lt;/h2&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(ecom) +
  geom_boxplot(aes(x = factor(device), y = duration),
               outlier.shape = 23)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2017-05-17-ggplot2-box-plots_files/figure-html/box8-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Let us extend the Y axis and see if the ouliers appear more legible.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(ecom) +
  geom_boxplot(aes(x = factor(device), y = duration),
               outlier.shape = 23) +
  expand_limits(y = c(0, 1100))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2017-05-17-ggplot2-box-plots_files/figure-html/box9-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;size&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Size&lt;/h2&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(ecom) +
  geom_boxplot(aes(x = factor(device), y = duration),
               outlier.size = 3) +
  expand_limits(y = c(0, 1100))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2017-05-17-ggplot2-box-plots_files/figure-html/box10-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Increasing the size is not very useful.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;alpha&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Alpha&lt;/h2&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(ecom) +
  geom_boxplot(aes(x = factor(device), y = duration),
               outlier.color = &amp;#39;blue&amp;#39;, outlier.alpha = 0.3) +
  expand_limits(y = c(0, 1100))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2017-05-17-ggplot2-box-plots_files/figure-html/box11-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Decreasing the alpha increases the visibility of the outlier points.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;box-color&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Box Color&lt;/h2&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(ecom) +
  geom_boxplot(aes(x = factor(device), y = duration),
               fill = c(&amp;#39;blue&amp;#39;, &amp;#39;red&amp;#39;, &amp;#39;green&amp;#39;)) +
  expand_limits(y = c(0, 1100))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2017-05-17-ggplot2-box-plots_files/figure-html/box12-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Map box color to variable.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(ecom) +
  geom_boxplot(aes(x = factor(device), y = duration,
               fill = factor(device))) +
  expand_limits(y = c(0, 1100))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2017-05-17-ggplot2-box-plots_files/figure-html/box13-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(ecom) +
  geom_boxplot(aes(x = factor(device), y = duration),
               fill = &amp;#39;blue&amp;#39;, alpha = 0.3) +
  expand_limits(y = c(0, 1100))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2017-05-17-ggplot2-box-plots_files/figure-html/box14-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;line-color&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Line Color&lt;/h2&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(ecom) +
  geom_boxplot(aes(x = factor(device), y = duration),
               color = c(&amp;#39;blue&amp;#39;, &amp;#39;red&amp;#39;, &amp;#39;green&amp;#39;)) +
  expand_limits(y = c(0, 1100))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2017-05-17-ggplot2-box-plots_files/figure-html/box15-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(ecom) +
  geom_boxplot(aes(x = factor(device), y = duration,
               color = factor(device))) +
  expand_limits(y = c(0, 1100))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2017-05-17-ggplot2-box-plots_files/figure-html/box16-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;line-width&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Line Width&lt;/h2&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(ecom) +
  geom_boxplot(aes(x = factor(device), y = duration),
               size = 1.5) +
  expand_limits(y = c(0, 1100))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2017-05-17-ggplot2-box-plots_files/figure-html/box17-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;line-type&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Line Type&lt;/h2&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(ecom) +
  geom_boxplot(aes(x = factor(device), y = duration),
               linetype = 2) +
  expand_limits(y = c(0, 1100))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2017-05-17-ggplot2-box-plots_files/figure-html/box18-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;summary&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Summary&lt;/h2&gt;
&lt;p&gt;In this post, we learnt to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;build box plots&lt;/li&gt;
&lt;li&gt;modify outlier color, shape, size etc.&lt;/li&gt;
&lt;li&gt;modify box color&lt;/li&gt;
&lt;li&gt;modify box line color, size and line type&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In the next &lt;a href=&#34;https://rsquaredacademy.github.io/blog/post/ggplot2-bar-plots/&#34;&gt;post&lt;/a&gt;, we will learn to build bar plots.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>ggplot2: Bar Plots</title>
      <link>/post/ggplot2-bar-plots/</link>
      <pubDate>Thu, 07 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>/post/ggplot2-bar-plots/</guid>
      <description>&lt;div id=&#34;introduction&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Introduction&lt;/h1&gt;
&lt;p&gt;This is the ninth post in the series &lt;strong&gt;Elegant Data Visualization with ggplot2&lt;/strong&gt;. In the previous &lt;a href=&#34;https://rsquaredacademy.github.io/blog/post/ggplot2-line-graphs/&#34;&gt;post&lt;/a&gt;, we learnt to build line charts. In this post, we will focus on bar plots.&lt;/p&gt;
&lt;p&gt;We will continue to use the ecommerce data. You can download it from &lt;a href=&#34;https://github.com/rsquaredacademy/datasets/blob/master/web.csv&#34;&gt;here&lt;/a&gt; or import directly using the readr package.&lt;/p&gt;
&lt;div id=&#34;simple-bar-plot&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Simple Bar Plot&lt;/h2&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(ecom) +
  geom_bar(aes(factor(device)))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2017-05-17-ggplot2-bar-plots_files/figure-html/bar2-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;bar-color&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Bar Color&lt;/h2&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(ecom) +
  geom_bar(aes(factor(device)),
           fill = c(&amp;#39;red&amp;#39;, &amp;#39;blue&amp;#39;, &amp;#39;green&amp;#39;))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2017-05-17-ggplot2-bar-plots_files/figure-html/bar3-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;bar-line-color&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Bar Line Color&lt;/h2&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(ecom) +
  geom_bar(aes(factor(device)),
           color = c(&amp;#39;red&amp;#39;, &amp;#39;blue&amp;#39;, &amp;#39;green&amp;#39;))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2017-05-17-ggplot2-bar-plots_files/figure-html/bar4-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;bar-line-type&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Bar Line Type&lt;/h2&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(ecom) +
  geom_bar(aes(factor(device)), fill = &amp;#39;white&amp;#39;, 
           color = &amp;#39;red&amp;#39;, linetype = 2)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2017-05-17-ggplot2-bar-plots_files/figure-html/bar5-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;bar-line-size&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Bar Line Size&lt;/h2&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(ecom) +
  geom_bar(aes(factor(device)), fill = &amp;#39;white&amp;#39;, 
           color = &amp;#39;red&amp;#39;, linetype = 2, size = 2)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2017-05-17-ggplot2-bar-plots_files/figure-html/bar6-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;stacked-bar-plot&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Stacked Bar Plot&lt;/h2&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(ecom) +
  geom_bar(aes(device, fill = factor(referrer)))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2017-05-17-ggplot2-bar-plots_files/figure-html/bar7-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;grouped-bar-plot&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Grouped Bar Plot&lt;/h2&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(ecom) +
  geom_bar(aes(device, fill = factor(referrer)), position = &amp;#39;dodge&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2017-05-17-ggplot2-bar-plots_files/figure-html/bar8-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;horizontal-bar-plot&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Horizontal Bar Plot&lt;/h2&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(ecom) +
  geom_bar(aes(factor(device), fill = factor(referrer))) +
  coord_flip()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2017-05-17-ggplot2-bar-plots_files/figure-html/bar9-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>ggplot2: Line Graphs</title>
      <link>/post/ggplot2-line-graphs/</link>
      <pubDate>Tue, 22 Mar 2016 00:00:00 +0000</pubDate>
      
      <guid>/post/ggplot2-line-graphs/</guid>
      <description>&lt;div id=&#34;introduction&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Introduction&lt;/h1&gt;
&lt;p&gt;This is the 8th post in the series &lt;strong&gt;Elegant Data Visualization with ggplot2&lt;/strong&gt;. In the previous &lt;a href=&#34;https://rsquaredacademy.github.io/blog/post/ggplot2-scatter-plots/&#34;&gt;post&lt;/a&gt;, we learnt to build scatter plots. In this post, we will learn to build line plots.&lt;/p&gt;
&lt;div id=&#34;basic-line-plot&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Basic Line Plot&lt;/h2&gt;
&lt;p&gt;We will use a data set related to GDP growth rate. You can download it from &lt;a href=&#34;https://github.com/rsquaredacademy/datasets/blob/master/gdp.csv&#34;&gt;here&lt;/a&gt;. It contains GDP (Gross Domestic Product) growth data for the BRICS (Brazil, Russia, India, China, South Africa) for the years 2000 to 2005.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;## Warning: Missing column names filled in: &amp;#39;X1&amp;#39; [1]&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(gdp, aes(year, india)) +
  geom_line(color = &amp;#39;blue&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2017-05-17-ggplot2-line-graphs_files/figure-html/line1-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;linetype&lt;/code&gt; can be used to modify the appearance of the line.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(gdp, aes(year, india)) +
  geom_line(linetype = 2)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2017-05-17-ggplot2-line-graphs_files/figure-html/line2-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(gdp, aes(year, india)) +
  geom_line(linetype = &amp;#39;dashed&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2017-05-17-ggplot2-line-graphs_files/figure-html/line3-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;size&lt;/code&gt; argument is used to specify the width of the line.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(gdp, aes(year, india)) +
  geom_line(size = 2)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2017-05-17-ggplot2-line-graphs_files/figure-html/line4-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Now let us map the aesthetics to the variables. The data used in the above example cannot be used as we need a variable with country names. We will use &lt;code&gt;gather()&lt;/code&gt; function from the &lt;code&gt;tidyr&lt;/code&gt; package to reshape the data.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;gdp2 &amp;lt;- gdp %&amp;gt;% 
  select(year, growth, india, china) %&amp;gt;% 
  gather(key = country, value = gdp, -year)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we can map the aethetics to the &lt;code&gt;country&lt;/code&gt; variable&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(gdp2, aes(year, gdp, group = country)) +
  geom_line()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2017-05-17-ggplot2-line-graphs_files/figure-html/line6-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Let us begin with &lt;code&gt;color&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(gdp2, aes(year, gdp, group = country)) +
  geom_line(aes(color = country))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2017-05-17-ggplot2-line-graphs_files/figure-html/line7-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Map &lt;code&gt;linetype&lt;/code&gt; to &lt;code&gt;country&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(gdp2, aes(year, gdp, group = country)) +
  geom_line(aes(linetype = country))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2017-05-17-ggplot2-line-graphs_files/figure-html/line8-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Map &lt;code&gt;linewidth&lt;/code&gt; to &lt;code&gt;country&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(gdp2, aes(year, gdp, group = country)) +
  geom_line(aes(size = country))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning: Using size for a discrete variable is not advised.&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2017-05-17-ggplot2-line-graphs_files/figure-html/line9-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>ggplot2: Scatter Plots</title>
      <link>/post/ggplot2-scatter-plots/</link>
      <pubDate>Wed, 09 Mar 2016 00:00:00 +0000</pubDate>
      
      <guid>/post/ggplot2-scatter-plots/</guid>
      <description>&lt;div id=&#34;introduction&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Introduction&lt;/h1&gt;
&lt;p&gt;This is the fifth post in the series &lt;strong&gt;Elegant Data Visualization with ggplot2&lt;/strong&gt;. In the previous &lt;a href=&#34;https://rsquaredacademy.github.io/blog/post/ggplot2-introduction-to-aesthetics/&#34;&gt;post&lt;/a&gt;, we learnt about aesthetics. In this post, we will build scatter plots by applying everything we have learnt so far.&lt;/p&gt;
&lt;div id=&#34;basic-plot&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Basic Plot&lt;/h2&gt;
&lt;p&gt;We will continue to use the ecommerce data. You can download it from &lt;a href=&#34;https://github.com/rsquaredacademy/datasets/blob/master/web.csv&#34;&gt;here&lt;/a&gt; or import directly using the readr package.&lt;/p&gt;
&lt;p&gt;Let us start by building a simple scatter plot.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(ecom) +
  geom_point(aes(n_pages, duration))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2017-05-17-ggplot2-scatter-plots_files/figure-html/scat2-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Let us add some random variation to the location of each point to handle overplotting. Use the &lt;code&gt;position&lt;/code&gt; argument and set it to &lt;code&gt;jitter&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(ecom) +
  geom_point(aes(n_pages, duration), position = &amp;#39;jitter&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2017-05-17-ggplot2-scatter-plots_files/figure-html/scat22-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;You can use the &lt;code&gt;geom_jitter()&lt;/code&gt; function to achieve the above result.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(ecom) +
  geom_jitter(aes(n_pages, duration))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2017-05-17-ggplot2-scatter-plots_files/figure-html/scat3-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;color&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Color&lt;/h2&gt;
&lt;p&gt;Now let us modify the color of the points. There are two ways:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;map color to variable using the &lt;code&gt;aes()&lt;/code&gt; function&lt;/li&gt;
&lt;li&gt;specify colors separately&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Map color to variables.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Categorical Variable&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(ecom) +
  geom_point(aes(n_pages, duration, color = factor(purchase)), 
             position = &amp;#39;jitter&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2017-05-17-ggplot2-scatter-plots_files/figure-html/scat4-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Continuous Variable&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(ecom) +
  geom_point(aes(n_pages, duration, color = order_items), 
             position = &amp;#39;jitter&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2017-05-17-ggplot2-scatter-plots_files/figure-html/scat5-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Let us specify the color of the points separately.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(ecom) +
  geom_point(aes(n_pages, duration), color = &amp;#39;blue&amp;#39;, 
             position = &amp;#39;jitter&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2017-05-17-ggplot2-scatter-plots_files/figure-html/scat6-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Use &lt;code&gt;alpha&lt;/code&gt; argument to specify the transparency of the points.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(ecom) +
  geom_point(aes(n_pages, duration), color = &amp;#39;blue&amp;#39;, alpha = 0.4, 
             position = &amp;#39;jitter&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2017-05-17-ggplot2-scatter-plots_files/figure-html/scat7-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;shape&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Shape&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Map shape to variable.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We can map shape to a categorical variable only.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(ecom) +
  geom_point(aes(n_pages, duration, shape = factor(device)),
             position = &amp;#39;jitter&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2017-05-17-ggplot2-scatter-plots_files/figure-html/scat8-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Specify value for shape.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(ecom) +
  geom_point(aes(n_pages, duration), shape = 3,
             position = &amp;#39;jitter&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2017-05-17-ggplot2-scatter-plots_files/figure-html/scat9-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;size&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Size&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Map size to variable.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It is advised to map size to a continuous variable.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(ecom) +
  geom_point(aes(n_pages, duration, size = n_visit), color = &amp;#39;blue&amp;#39;,
             position = &amp;#39;jitter&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2017-05-17-ggplot2-scatter-plots_files/figure-html/scat10-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Specify value for shape.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(ecom) +
  geom_point(aes(n_pages, duration), size = 3,
             position = &amp;#39;jitter&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2017-05-17-ggplot2-scatter-plots_files/figure-html/scat11-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;fit-line&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Fit Line&lt;/h2&gt;
&lt;p&gt;You can fit a line using either &lt;code&gt;geom_abline()&lt;/code&gt; or &lt;code&gt;geom_smooth()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Use linear regression.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(ecom, aes(n_pages, duration)) +
  geom_point(position = &amp;#39;jitter&amp;#39;) +
  geom_smooth(method = &amp;#39;lm&amp;#39;, se = FALSE)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2017-05-17-ggplot2-scatter-plots_files/figure-html/aes12-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Add a confidence interval for the fitted values.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(ecom, aes(n_pages, duration)) +
  geom_point(position = &amp;#39;jitter&amp;#39;) +
  geom_smooth(method = &amp;#39;lm&amp;#39;, se = TRUE)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2017-05-17-ggplot2-scatter-plots_files/figure-html/aes13-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Use loess regression&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(ecom, aes(n_pages, duration)) +
  geom_point(position = &amp;#39;jitter&amp;#39;) +
  geom_smooth(method = &amp;#39;loess&amp;#39;, se = FALSE)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2017-05-17-ggplot2-scatter-plots_files/figure-html/aes14-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(ecom, aes(n_pages, duration)) +
  geom_point(position = &amp;#39;jitter&amp;#39;) +
  geom_smooth(method = &amp;#39;loess&amp;#39;, se = TRUE)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2017-05-17-ggplot2-scatter-plots_files/figure-html/aes15-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;If you use &lt;code&gt;geom_abline()&lt;/code&gt;, specify the intercept and the slope. Let us regress &lt;code&gt;duration&lt;/code&gt; on &lt;code&gt;n_pages&lt;/code&gt; and use the output.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;lm(duration ~ n_pages, data = ecom)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
## Call:
## lm(formula = duration ~ n_pages, data = ecom)
## 
## Coefficients:
## (Intercept)      n_pages  
##      0.2199      19.9210&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(ecom, aes(n_pages, duration)) +
  geom_point(position = &amp;#39;jitter&amp;#39;) +
  geom_abline(slope = 19.9210, intercept = 0.2199)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2017-05-17-ggplot2-scatter-plots_files/figure-html/aes17-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;summary&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Summary&lt;/h2&gt;
&lt;p&gt;In this post, we learnt to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;build scatter plots&lt;/li&gt;
&lt;li&gt;map aesthetics to variables&lt;/li&gt;
&lt;li&gt;modify axis and legend&lt;/li&gt;
&lt;li&gt;fit regression line&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In the next &lt;a href=&#34;https://rsquaredacademy.github.io/blog/post/ggplot2-line-graphs/&#34;&gt;post&lt;/a&gt;, we will learn to build line charts.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>ggplot2: Introduction to aesthetics</title>
      <link>/post/ggplot2-introduction-to-aesthetics/</link>
      <pubDate>Sat, 20 Feb 2016 00:00:00 +0000</pubDate>
      
      <guid>/post/ggplot2-introduction-to-aesthetics/</guid>
      <description>&lt;div id=&#34;introduction&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Introduction&lt;/h1&gt;
&lt;p&gt;This is the fourth post in the series &lt;strong&gt;Elegant Data Visualization with ggplot2&lt;/strong&gt;. In the previous &lt;a href=&#34;https://rsquaredacademy.github.io/blog/post/ggplot2-introduction-to-geoms/&#34;&gt;post&lt;/a&gt; we learnt about geoms and how we can use them to build different plots. In this post, we will focus on the aesthetics i.e. color, shape, size, alpha, line type, line width etc. We can map these to variables or specify values for them. If we want to map the above to variables, we have to specify them within the &lt;code&gt;aes()&lt;/code&gt; function. We will look at both methods in the following sections.&lt;/p&gt;
&lt;div id=&#34;color&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Color&lt;/h2&gt;
&lt;p&gt;In ggplot2, when we mention &lt;code&gt;color&lt;/code&gt; or &lt;code&gt;colour&lt;/code&gt;, it usually refers to the color of the geoms. The &lt;code&gt;fill&lt;/code&gt; argument is used to specify the color of the shapes in certain cases. In this first section, we will see how we can specify the color for the different geoms we learnt in the previous post.&lt;/p&gt;
&lt;div id=&#34;point&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Point&lt;/h3&gt;
&lt;p&gt;For points, the &lt;code&gt;color&lt;/code&gt; argument specifies the color of the point for certain shapes and border for others. The &lt;code&gt;fill&lt;/code&gt; argument is used to specify the background for some shapes and will not work with other shapes. Let us look at an example:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(mtcars, aes(x = disp, y = mpg, color = factor(cyl))) +
  geom_point()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2017-05-17-ggplot2-introduction-to-aesthetics_files/figure-html/aes2-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;We can map the variable to color in the &lt;code&gt;geom_point()&lt;/code&gt; function as well since it inherits the data from the &lt;code&gt;ggplot()&lt;/code&gt; function.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(mtcars, aes(x = disp, y = mpg)) +
  geom_point(aes(color = factor(cyl)))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2017-05-17-ggplot2-introduction-to-aesthetics_files/figure-html/aes3-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;If you do not want to map a variable to color, you can specify it separately using the &lt;code&gt;color&lt;/code&gt; argument but in this case it should be outside the &lt;code&gt;aes()&lt;/code&gt; function.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(mtcars, aes(x = disp, y = mpg)) +
  geom_point(color = &amp;#39;blue&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2017-05-17-ggplot2-introduction-to-aesthetics_files/figure-html/aes4-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Now we will change the shape of the points to understand the difference between &lt;code&gt;color&lt;/code&gt; and &lt;code&gt;fill&lt;/code&gt; arguments. It can be again mapped to variables or values.&lt;/p&gt;
&lt;p&gt;Let us map shape to variables.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(mtcars, aes(x = disp, y = mpg, shape = factor(cyl))) +
  geom_point()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2017-05-17-ggplot2-introduction-to-aesthetics_files/figure-html/aes5-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Map shape to variable in the &lt;code&gt;geom_point()&lt;/code&gt; function.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(mtcars, aes(x = disp, y = mpg)) +
  geom_point(aes(shape = factor(cyl)))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2017-05-17-ggplot2-introduction-to-aesthetics_files/figure-html/aes6-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Specify value for shape.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(mtcars, aes(x = disp, y = mpg)) +
  geom_point(shape = 5)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2017-05-17-ggplot2-introduction-to-aesthetics_files/figure-html/aes7-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Use &lt;code&gt;color&lt;/code&gt; to specify color of the point.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(mtcars, aes(x = disp, y = mpg)) +
  geom_point(shape = 5, color = &amp;#39;blue&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2017-05-17-ggplot2-introduction-to-aesthetics_files/figure-html/aes8-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;You cannot use &lt;code&gt;fill&lt;/code&gt; with shape upto 21.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(mtcars, aes(x = disp, y = mpg)) +
  geom_point(shape = 5, fill = &amp;#39;blue&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2017-05-17-ggplot2-introduction-to-aesthetics_files/figure-html/aes9-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;fill&lt;/code&gt; will add background color in the below case.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(mtcars, aes(x = disp, y = mpg)) +
  geom_point(shape = 22, fill = &amp;#39;blue&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2017-05-17-ggplot2-introduction-to-aesthetics_files/figure-html/aes10-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;color&lt;/code&gt; will modify the border.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(mtcars, aes(x = disp, y = mpg)) +
  geom_point(shape = 22, color = &amp;#39;blue&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2017-05-17-ggplot2-introduction-to-aesthetics_files/figure-html/aes11-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Let us map size of points to a variable. It is advised to map size only to continuous variables and not categorical variables.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(mtcars, aes(x = disp, y = mpg, size = disp)) +
  geom_point()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2017-05-17-ggplot2-introduction-to-aesthetics_files/figure-html/aes12-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;If you map size to categorical variables, ggplot2 will throw a warning.&lt;/p&gt;
&lt;p&gt;Specify value for size.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(mtcars, aes(x = disp, y = mpg)) +
  geom_point(size = 4)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2017-05-17-ggplot2-introduction-to-aesthetics_files/figure-html/aes13-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;You can also specify the opacity of the color using the &lt;code&gt;alpha&lt;/code&gt; argument.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(mtcars, aes(x = disp, y = mpg)) +
  geom_point(aes(alpha = factor(cyl)), color = &amp;#39;blue&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2017-05-17-ggplot2-introduction-to-aesthetics_files/figure-html/aes14-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;So far we have focussed on &lt;code&gt;geom_point()&lt;/code&gt; to learn how to map aesthetics to variables. To explore line type and line width, we will use &lt;code&gt;geom_line()&lt;/code&gt;. In the previous post, we used &lt;code&gt;geom_line()&lt;/code&gt; to build line charts. Now we will modify the appearance of the line. In the section below, we will specify values for color, line type and width. In the next section, we will map the same to variables in the data. We will use a new data set. You can download it from &lt;a href=&#34;https://github.com/rsquaredacademy/datasets/blob/master/gdp.csv&#34;&gt;here&lt;/a&gt;. It contains GDP (Gross Domestic Product) growth data for the BRICS (Brazil, Russia, India, China, South Africa) for the years 2000 to 2005.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;## Warning: Missing column names filled in: &amp;#39;X1&amp;#39; [1]&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(gdp, aes(year, india)) +
  geom_line(color = &amp;#39;blue&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2017-05-17-ggplot2-introduction-to-aesthetics_files/figure-html/aes15-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;linetype&lt;/code&gt; can be used to modify the appearance of the line.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(gdp, aes(year, india)) +
  geom_line(linetype = 2)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2017-05-17-ggplot2-introduction-to-aesthetics_files/figure-html/aes16-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(gdp, aes(year, india)) +
  geom_line(linetype = &amp;#39;dashed&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2017-05-17-ggplot2-introduction-to-aesthetics_files/figure-html/aes17-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;size&lt;/code&gt; argument is used to specify the width of the line.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(gdp, aes(year, india)) +
  geom_line(size = 2)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2017-05-17-ggplot2-introduction-to-aesthetics_files/figure-html/aes18-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Now let us map the aesthetics to the variables. The data used in the above example cannot be used as we need a variable with country names. We will use &lt;code&gt;gather()&lt;/code&gt; function from the &lt;code&gt;tidyr&lt;/code&gt; package to reshape the data.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;gdp2 &amp;lt;- gdp %&amp;gt;% 
  select(year, growth, india, china) %&amp;gt;% 
  gather(key = country, value = gdp, -year)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we can map the aethetics to the &lt;code&gt;country&lt;/code&gt; variable&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(gdp2, aes(year, gdp, group = country)) +
  geom_line()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2017-05-17-ggplot2-introduction-to-aesthetics_files/figure-html/aes20-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Let us begin with &lt;code&gt;color&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(gdp2, aes(year, gdp, group = country)) +
  geom_line(aes(color = country))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2017-05-17-ggplot2-introduction-to-aesthetics_files/figure-html/aes21-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Map &lt;code&gt;linetype&lt;/code&gt; to &lt;code&gt;country&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(gdp2, aes(year, gdp, group = country)) +
  geom_line(aes(linetype = country))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2017-05-17-ggplot2-introduction-to-aesthetics_files/figure-html/aes22-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Map &lt;code&gt;linewidth&lt;/code&gt; to &lt;code&gt;country&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(gdp2, aes(year, gdp, group = country)) +
  geom_line(aes(size = country))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning: Using size for a discrete variable is not advised.&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2017-05-17-ggplot2-introduction-to-aesthetics_files/figure-html/aes23-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Before we wrap up, let us quickly see how we can map aesthetics to variables for different plots.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;bar-plots&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Bar Plots&lt;/h2&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(ecom, aes(device, fill = purchase)) +
  geom_bar()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2017-05-17-ggplot2-introduction-to-aesthetics_files/figure-html/aes24-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;histograms&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Histograms&lt;/h2&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(ecom) +
  geom_histogram(aes(duration, fill = purchase), bins = 10)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2017-05-17-ggplot2-introduction-to-aesthetics_files/figure-html/aes25-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;box-plots&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Box Plots&lt;/h2&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(ecom) +
  geom_boxplot(aes(device, duration, fill = purchase))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2017-05-17-ggplot2-introduction-to-aesthetics_files/figure-html/aes26-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;summary&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Summary&lt;/h2&gt;
&lt;p&gt;In the next &lt;a href=&#34;https://rsquaredacademy.github.io/blog/post/ggplot2-scatter-plots/&#34;&gt;post&lt;/a&gt;, we will focus on applying all that we have learnt so far to create scatter plots.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>ggplot2: Quick Tour</title>
      <link>/post/ggplot2-quick-tour/</link>
      <pubDate>Fri, 19 Feb 2016 00:00:00 +0000</pubDate>
      
      <guid>/post/ggplot2-quick-tour/</guid>
      <description>&lt;div id=&#34;introduction&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Introduction&lt;/h1&gt;
&lt;p&gt;This is the second post in the series &lt;strong&gt;Elegant Data Visualization with ggplot2&lt;/strong&gt;. In the previous &lt;a href=&#34;https://rsquaredacademy.github.io/blog/post/introduction-to-ggplot2/&#34;&gt;post&lt;/a&gt;, we understood the concept of grammar of graphics and even built a bar plot step by step while exploring the different components of a plot/chart. In this post, we will learn to quickly build a set of plots that are routinely used to explore data.&lt;/p&gt;
&lt;div id=&#34;scatter-plot&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Scatter Plot&lt;/h2&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;qplot(disp, mpg, data = mtcars)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2017-05-17-ggplot2-quick-tour_files/figure-html/gg2-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;qplot(disp, mpg, data = mtcars, geom = c(&amp;#39;point&amp;#39;, &amp;#39;line&amp;#39;))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2017-05-17-ggplot2-quick-tour_files/figure-html/gg3-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;qplot(disp, mpg, data = mtcars, color = factor(cyl))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2017-05-17-ggplot2-quick-tour_files/figure-html/gg4-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;qplot(disp, mpg, data = mtcars, shape = factor(cyl))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2017-05-17-ggplot2-quick-tour_files/figure-html/gg5-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;qplot(disp, mpg, data = mtcars, size = qsec)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2017-05-17-ggplot2-quick-tour_files/figure-html/gg6-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;bar-plot&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Bar Plot&lt;/h2&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;qplot(factor(cyl), data = mtcars, geom = c(&amp;#39;bar&amp;#39;))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2017-05-17-ggplot2-quick-tour_files/figure-html/gg7-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;qplot(factor(cyl), data = mtcars, geom = c(&amp;#39;bar&amp;#39;), fill = factor(am))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2017-05-17-ggplot2-quick-tour_files/figure-html/gg8-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;box-plot&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Box Plot&lt;/h2&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;qplot(factor(cyl), mpg, data = mtcars, geom = c(&amp;#39;boxplot&amp;#39;))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2017-05-17-ggplot2-quick-tour_files/figure-html/gg9-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;qplot(factor(1), mpg, data = mtcars, geom = c(&amp;#39;boxplot&amp;#39;))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2017-05-17-ggplot2-quick-tour_files/figure-html/gg10-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;qplot(factor(cyl), mpg, data = mtcars, geom = c(&amp;#39;boxplot&amp;#39;, &amp;#39;jitter&amp;#39;))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2017-05-17-ggplot2-quick-tour_files/figure-html/gg11-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;line-chart&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Line Chart&lt;/h2&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;qplot(x = date, y = unemploy, data = economics, geom = c(&amp;#39;line&amp;#39;))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2017-05-17-ggplot2-quick-tour_files/figure-html/gg12-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;qplot(x = date, y = unemploy, data = economics, geom = c(&amp;#39;line&amp;#39;),
      color = &amp;#39;red&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2017-05-17-ggplot2-quick-tour_files/figure-html/gg13-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;histogram&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Histogram&lt;/h2&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;qplot(mpg, data = mtcars, bins = 5)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2017-05-17-ggplot2-quick-tour_files/figure-html/gg14-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;summary&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Summary&lt;/h2&gt;
&lt;p&gt;In this post, we learnt to quickly create plots using the &lt;code&gt;qplot()&lt;/code&gt; function. While useful, it has limitations and can be used only to quickly visualize data. In the next &lt;a href=&#34;https://rsquaredacademy.github.io/blog/post/ggplot2-introduction-to-geoms/&#34;&gt;post&lt;/a&gt;, we will create the same set of plots but using &lt;strong&gt;geoms&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>ggplot2: Introduction to geoms</title>
      <link>/post/ggplot2-introduction-to-geoms/</link>
      <pubDate>Fri, 05 Feb 2016 00:00:00 +0000</pubDate>
      
      <guid>/post/ggplot2-introduction-to-geoms/</guid>
      <description>&lt;div id=&#34;introduction&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Introduction&lt;/h1&gt;
&lt;p&gt;This is the third post in the series &lt;strong&gt;Elegant Data Visualization with ggplot2&lt;/strong&gt;. In the previous &lt;a href=&#34;https://rsquaredacademy.github.io/blog/post/ggplot2-quick-tour/&#34;&gt;post&lt;/a&gt;, we learnt how to create plots using the &lt;code&gt;qplot()&lt;/code&gt; function. In this post, we will create some of the most routinely used plots to explore data using the &lt;code&gt;geom_*&lt;/code&gt; functions.&lt;/p&gt;
&lt;div id=&#34;point&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Point&lt;/h2&gt;
&lt;p&gt;Let us say we want to visualize the relationship between two continuous variables. For example, as visitors browse more pages on a website, the time spent on the website also increases. We cannot say that more time spent on a website indicates more page visits as some of the visitors might have spent a lot of time on a couple of pages or might have been idle. Using the ecommerce data, we will look at the relationship between number of pages visited and time on site. Now the best way to represent this relationship is a scatter plot i.e. represent the data using points.&lt;/p&gt;
&lt;p&gt;You can download the data from &lt;a href=&#34;https://github.com/rsquaredacademy/datasets/blob/master/web.csv&#34;&gt;here&lt;/a&gt; or import it directly using &lt;code&gt;read_csv()&lt;/code&gt; from the &lt;a href=&#34;readr.tidyverse.org&#34;&gt;readr&lt;/a&gt; package.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;## Parsed with column specification:
## cols(
##   id = col_integer(),
##   referrer = col_character(),
##   device = col_character(),
##   bouncers = col_character(),
##   n_visit = col_integer(),
##   n_pages = col_double(),
##   duration = col_integer(),
##   country = col_character(),
##   purchase = col_character(),
##   order_items = col_double(),
##   order_value = col_double()
## )&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(ecom, aes(x = n_pages, y = duration)) + 
  geom_point()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2017-05-17-ggplot2-introduction-to-geoms_files/figure-html/geoms2-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;We can fit a regression line or add horizontal or vertical lines to the plots using&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;geom_abline()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;geom_hline()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;geom_vline()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can add a vertical line using the &lt;code&gt;geom_vline()&lt;/code&gt; function. The main argument of this function is &lt;code&gt;xintercept&lt;/code&gt; which specifies the value on the X axis where the line must be drawn.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(mtcars, aes(x = wt, y = mpg)) +
  geom_point() +
  geom_vline(xintercept = 5) &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2017-05-17-ggplot2-introduction-to-geoms_files/figure-html/geoms3-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;geom_hline()&lt;/code&gt; function can be used to add a horizontal line.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(mtcars, aes(x = wt, y = mpg)) +
  geom_point() +
  geom_hline(yintercept = 30) &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2017-05-17-ggplot2-introduction-to-geoms_files/figure-html/geoms4-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;To fit a regression line to the plot, use the &lt;code&gt;geom_abline()&lt;/code&gt; function. You need to specify values for the intercept and the slope.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(mtcars, aes(x = wt, y = mpg)) +
  geom_point() + 
  geom_abline(intercept = 10, slope = 1)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2017-05-17-ggplot2-introduction-to-geoms_files/figure-html/geoms5-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Another way to fit a regression line to the plot is &lt;code&gt;geom_smooth()&lt;/code&gt;. You need to specify the regression type using the &lt;code&gt;method&lt;/code&gt; argument. You can choose to display the confidence intervals for the fitted values by setting the &lt;code&gt;se&lt;/code&gt; argument to &lt;code&gt;TRUE&lt;/code&gt; or &lt;code&gt;FALSE&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(mtcars, aes(x = wt, y = mpg)) +
    geom_smooth(method = &amp;#39;lm&amp;#39;, se = TRUE)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2017-05-17-ggplot2-introduction-to-geoms_files/figure-html/geoms6-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(mtcars, aes(x = wt, y = mpg)) +
  geom_smooth(method = &amp;#39;loess&amp;#39;, se = FALSE)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2017-05-17-ggplot2-introduction-to-geoms_files/figure-html/geoms7-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;We can modify the color, type and width of the lines but we will learn about them in the next &lt;a href=&#34;https://rsquaredacademy.github.io/blog/post/ggplot2-introduction-to-aesthetics/&#34;&gt;post.&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;bar&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Bar&lt;/h2&gt;
&lt;p&gt;Continuing with our ecommerce website, let us say we want to know the distribution of the referrers or the devices. Such information is best displayed using bar plots. Use the &lt;code&gt;geom_bar()&lt;/code&gt; function to create grouped/stacke bar plots.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(ecom, aes(x = factor(device))) +
  geom_bar()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2017-05-17-ggplot2-introduction-to-geoms_files/figure-html/geoms8-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Suppose you want to visualize the total revenue from different devices, you can map the variable to the Y axis.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(ecom, aes(x = factor(device))) +
  geom_bar(aes(weight = order_value))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2017-05-17-ggplot2-introduction-to-geoms_files/figure-html/geoms9-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;If you want to get a breakdown of the purchasers/non-purchasers for different device types, create a stacked bar plot.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(ecom, aes(x = factor(device))) +
  geom_bar(aes(fill = purchase))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2017-05-17-ggplot2-introduction-to-geoms_files/figure-html/geoms10-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;To create horizontal bar plots, use the &lt;code&gt;coord_flip()&lt;/code&gt; function. As the name indicates, it flips the X and Y coordinates.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(ecom, aes(x = factor(device))) +
  geom_bar(aes(fill = purchase)) +
  coord_flip()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2017-05-17-ggplot2-introduction-to-geoms_files/figure-html/geoms11-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Sometimes you have data in a tabular format. In such cases, you can use the &lt;code&gt;geom_col()&lt;/code&gt; function.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;device &amp;lt;- c(&amp;#39;laptop&amp;#39;, &amp;#39;mobile&amp;#39;, &amp;#39;tablet&amp;#39;)
visits &amp;lt;- c(30000, 12000, 5000)
traffic &amp;lt;- tibble::tibble(device, visits)
ggplot(traffic, aes(x = device, y = visits)) +
  geom_col(fill = &amp;#39;blue&amp;#39;) &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2017-05-17-ggplot2-introduction-to-geoms_files/figure-html/geoms12-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;boxplot&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Boxplot&lt;/h2&gt;
&lt;p&gt;If you want to examine the distribution of a variable or detect outliers, boxplots are very handy. Let us look at the distribution of number of pages visited for different device types using the &lt;code&gt;geom_boxplot()&lt;/code&gt; function.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(ecom, aes(x = factor(device), y = n_pages)) +
  geom_boxplot()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2017-05-17-ggplot2-introduction-to-geoms_files/figure-html/geoms13-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Use the &lt;code&gt;geom_jitter()&lt;/code&gt; function to overlay the observations on the boxplot.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(ecom, aes(x = factor(device), y = n_pages)) +
  geom_boxplot() +
  geom_jitter()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2017-05-17-ggplot2-introduction-to-geoms_files/figure-html/geoms14-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;We will learn about modifying the appearance of the boxplot and the outliers in the next post.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;histogram&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Histogram&lt;/h2&gt;
&lt;p&gt;Histograms are useful for examing the distribution of a continuous variable. Let us look at the distribution of time spent on the site using the &lt;code&gt;geom_histogram()&lt;/code&gt; function and examine if it is skewed.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(ecom, aes(x = duration)) +
  geom_histogram()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2017-05-17-ggplot2-introduction-to-geoms_files/figure-html/geoms15-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Specify the number of bins using the &lt;code&gt;bins&lt;/code&gt; argument.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(ecom, aes(x = duration)) +
  geom_histogram(bins = 5)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2017-05-17-ggplot2-introduction-to-geoms_files/figure-html/geoms16-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;line&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Line&lt;/h2&gt;
&lt;p&gt;Line charts are useful for visualizing trends or changes in metrics over a period time. Use the &lt;code&gt;geom_line()&lt;/code&gt; function to plot the conversion over several quarters.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;jitter&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Jitter&lt;/h2&gt;
&lt;p&gt;We used the &lt;code&gt;geom_jitter()&lt;/code&gt; function to overlay observation on the boxplot.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(ecom, aes(x = factor(device), y = duration)) +
  geom_jitter()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2017-05-17-ggplot2-introduction-to-geoms_files/figure-html/geoms17-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Change the width and height to get a better overview.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(ecom, aes(x = factor(device), y = duration)) +
  geom_jitter(width = 0.25, height = 0.5)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2017-05-17-ggplot2-introduction-to-geoms_files/figure-html/geoms18-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;label&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Label&lt;/h2&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(mtcars, aes(disp, mpg, label = rownames(mtcars))) +
  geom_text(check_overlap = TRUE, size = 2)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2017-05-17-ggplot2-introduction-to-geoms_files/figure-html/geoms19-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(mtcars, aes(disp, mpg, label = rownames(mtcars))) +
  geom_label()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2017-05-17-ggplot2-introduction-to-geoms_files/figure-html/geoms20-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(mtcars, aes(x = disp, y = mpg, label = rownames(mtcars))) +
  geom_point() + 
  geom_text(aes(color = cyl), hjust = 0, nudge_x = 0.05, 
            size = 2, angle = 45)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2017-05-17-ggplot2-introduction-to-geoms_files/figure-html/geoms21-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;```&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>