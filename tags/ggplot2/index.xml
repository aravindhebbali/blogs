<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ggplot2 on Rsquared Academy Blog</title>
    <link>/tags/ggplot2/</link>
    <description>Recent content in Ggplot2 on Rsquared Academy Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2014-2017. All rights reserved.</copyright>
    <lastBuildDate>Thu, 06 Jul 2017 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/tags/ggplot2/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Guides - Axes</title>
      <link>/post/guides-axes/</link>
      <pubDate>Thu, 06 Jul 2017 00:00:00 +0000</pubDate>
      
      <guid>/post/guides-axes/</guid>
      <description>IntroductionNow that we have learnt to build different plots, let us look at different ways to modify the axis. Along the way, we will also explore the scale_*() family of functions
scale_x_continuous(): modify x axis when x is continuousThe first function we will explore is scale_x_continuous(). It can be used for:
axis titleaxis labelsaxis limitsaxis breaksand axis positionLet us create a simple scatter plot and then use scale_x_continuous() to modify the X axis.</description>
    </item>
    
    <item>
      <title>Guides - Legends</title>
      <link>/post/guides-legends/</link>
      <pubDate>Thu, 06 Jul 2017 00:00:00 +0000</pubDate>
      
      <guid>/post/guides-legends/</guid>
      <description>IntroductionThis is the 13th post in the series Elegant Data Visualization with ggplot2. In the previos post, we learnt how to modify the axis of plots. In this post, we will focus on modifying the legends of plots when the aesthetics are mapped to variables.
Now that we have learnt to build different plots, let us look at different ways to modify the axis. Along the way, we will also explore the below functions:</description>
    </item>
    
    <item>
      <title>Guides: Legends - Part 2</title>
      <link>/post/guides-legends-part-2/</link>
      <pubDate>Thu, 06 Jul 2017 00:00:00 +0000</pubDate>
      
      <guid>/post/guides-legends-part-2/</guid>
      <description>This is the 14th post in the series Elegant Data Visualization with ggplot2. In the previos post, we learnt how to modify the legend of plots when aesthetics are mapped to variables. In this post, we will continue to explore different ways to modify/customize the legend of plots.
Guidesggplot(mtcars) +geom_point(aes(disp, mpg, color = factor(cyl))) +scale_color_manual(values = c(&amp;quot;red&amp;quot;, &amp;quot;blue&amp;quot;, &amp;quot;green&amp;quot;),guide = guide_legend(title = &amp;quot;Cylinders&amp;quot;,title.hjust = 0.</description>
    </item>
    
    <item>
      <title>Overlapping</title>
      <link>/post/overlapping/</link>
      <pubDate>Thu, 06 Jul 2017 00:00:00 +0000</pubDate>
      
      <guid>/post/overlapping/</guid>
      <description>IntroductionThis is the 18th post in the series Elegant Data Visualization with ggplot2. In the previous post, we learnt how to modify the legend of plots when aesthetics are mapped to variables. In this post, we will learn to position the geoms to avoid overlapping.
DodgePreserve the vertical position while adjusting the horizontal position.
Create grouped bar plots.
ggplot(data = mtcars, aes(factor(cyl), fill = factor(vs))) +geom_bar()ggplot(data = mtcars, aes(factor(cyl), fill = factor(vs))) +geom_bar(position = position_dodge(width = 1))JitterAdd some noise to data points for better visualization.</description>
    </item>
    
    <item>
      <title>Axis &amp; Plot Labels</title>
      <link>/post/axis-plot-labels/</link>
      <pubDate>Tue, 04 Jul 2017 00:00:00 +0000</pubDate>
      
      <guid>/post/axis-plot-labels/</guid>
      <description>IntroductionThis is the fifth post in the series Elegant Data Visualization with ggplot2. In the previous post, we learnt about aesthetics. In this post, we will learn to:
add title and subtitle to the plotmodify axis labelsmodify axis rangeremove axisformat axisBasic PlotLet us start by building a simple scatter plot.
ggplot(mtcars) +geom_point(aes(disp, mpg))Title &amp;amp; SubtitleYou can add a title and subtitle to the plot using the ggtitle() function.</description>
    </item>
    
    <item>
      <title>Guides</title>
      <link>/post/guides/</link>
      <pubDate>Tue, 04 Jul 2017 00:00:00 +0000</pubDate>
      
      <guid>/post/guides/</guid>
      <description> 
IntroductionThis is the sixth post in the series Elegant Data Visualization with ggplot2. In the previous post, we learnt how to add text to a plot. In this post, we will learn how to modify guide/legend.
Guideggplot(mtcars) +geom_bar(aes(factor(cyl), fill = factor(gear))) +scale_fill_discrete(guide = guide_legend(title = &amp;#39;gear&amp;#39;, title.position = &amp;#39;bottom&amp;#39;, title.hjust = 0.5,label.position = &amp;#39;top&amp;#39;, direction = &amp;#39;horizontal&amp;#39;, label.hjust = 0.5, nrow = 3, reverse = TRUE))</description>
    </item>
    
    <item>
      <title>ggplot2: Extensions</title>
      <link>/post/ggplot2-extensions/</link>
      <pubDate>Tue, 19 Jul 2016 00:00:00 +0000</pubDate>
      
      <guid>/post/ggplot2-extensions/</guid>
      <description></description>
    </item>
    
    <item>
      <title>ggplot2: Facets (Combine multiple plots)</title>
      <link>/post/ggplot2-facets-combine-multiple-plots/</link>
      <pubDate>Fri, 08 Jul 2016 00:00:00 +0000</pubDate>
      
      <guid>/post/ggplot2-facets-combine-multiple-plots/</guid>
      <description>IntroductionThis is the 13th post in the series Elegant Data Visualization with ggplot2. In the previous post, we learnt the stat_*() family of functions. In this post, we will learn about faceting i.e.Â combining plots.
We will continue to use the ecommerce data. You can download it from here or import directly using the readr package.
ggplot(ecom, aes(n_pages, duration)) + geom_point() +facet_grid(. ~ device)ggplot(ecom, aes(n_pages, duration)) + geom_point() +facet_grid(device ~ .</description>
    </item>
    
    <item>
      <title>ggplot2: Themes</title>
      <link>/post/ggplot2-themes/</link>
      <pubDate>Sat, 25 Jun 2016 00:00:00 +0000</pubDate>
      
      <guid>/post/ggplot2-themes/</guid>
      <description>This is the last post in the series Elegant Data Visualization with ggplot2. In the previous post, we learnt to combine multiple plots. In this post, we will learn to
modify theme componentsuse different themesUse theme() to modify the appearance of all non data components of the plot.
thememodify components of a plotp &amp;lt;- ggplot(mtcars) +geom_point(aes(disp, mpg))# modify X axis titlep + theme(axis.</description>
    </item>
    
    <item>
      <title>ggplot2: Text Annotations</title>
      <link>/post/ggplot2-text-annotations/</link>
      <pubDate>Fri, 10 Jun 2016 00:00:00 +0000</pubDate>
      
      <guid>/post/ggplot2-text-annotations/</guid>
      <description>IntroductionThis is the sixth post in the series Elegant Data Visualization with ggplot2. In the previous post, we learnt to modify the axis and plot labels. In this post, we will learn to add text to the plots.
AnnotateWe will use the annotate() function to add custom text to the plots. You can use the annotate() function to add rectangles/segments/pointrange as well but our focus will be on adding text.</description>
    </item>
    
    <item>
      <title>ggplot2: Statistical Plots</title>
      <link>/post/ggplot2-statistical-plots/</link>
      <pubDate>Mon, 23 May 2016 00:00:00 +0000</pubDate>
      
      <guid>/post/ggplot2-statistical-plots/</guid>
      <description>IntroductionThis is the 12th post in the series Elegant Data Visualization with ggplot2. In the previous post, we learnt to build histograms. In this post, we will explore an alternative method to build plots.
We will continue to use the ecommerce data. You can download it from here or import directly using the readr package.
StatsSo far we have used geom_*() functions to build plot. Now we will use a new set of functions stat_*() to build the plots.</description>
    </item>
    
    <item>
      <title>ggplot2: Histogram</title>
      <link>/post/ggplot2-histogram/</link>
      <pubDate>Fri, 06 May 2016 00:00:00 +0000</pubDate>
      
      <guid>/post/ggplot2-histogram/</guid>
      <description>IntroductionThis is the eleventh post in the series Elegant Data Visualization with ggplot2. In the previous post, we learnt to build box plots. In this post, we will focus on histograms.
We will continue to use the ecommerce data. You can download it from here or import directly using the readr package.
Simple Histogramggplot(ecom) +geom_histogram(aes(n_visit))## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.</description>
    </item>
    
    <item>
      <title>ggplot2: Box Plots</title>
      <link>/post/ggplot2-box-plots/</link>
      <pubDate>Thu, 21 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>/post/ggplot2-box-plots/</guid>
      <description>IntroductionThis is the 9th post in the series Elegant Data Visualization with ggplot2. In the previous post, we learnt how to build line charts. In this post, we will focus on boxplots.
We will continue to use the ecommerce data. You can download it from here or import directly using the readr package.
Simple Box Plotggplot(ecom) +geom_boxplot(aes(x = factor(1), y = n_visit))Now we need to mention something for X axis and hence we use the number 1.</description>
    </item>
    
    <item>
      <title>ggplot2: Bar Plots</title>
      <link>/post/ggplot2-bar-plots/</link>
      <pubDate>Thu, 07 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>/post/ggplot2-bar-plots/</guid>
      <description> 
IntroductionThis is the ninth post in the series Elegant Data Visualization with ggplot2. In the previous post, we learnt to build line charts. In this post, we will focus on bar plots.
We will continue to use the ecommerce data. You can download it from here or import directly using the readr package.
Simple Bar Plotggplot(ecom) +geom_bar(aes(factor(device)))Bar Colorggplot(ecom) +geom_bar(aes(factor(device)),fill = c(&amp;#39;red&amp;#39;, &amp;#39;blue&amp;#39;, &amp;#39;green&amp;#39;))Bar Line Colorggplot(ecom) +geom_bar(aes(factor(device)),color = c(&amp;#39;red&amp;#39;, &amp;#39;blue&amp;#39;, &amp;#39;green&amp;#39;))Bar Line Typeggplot(ecom) +geom_bar(aes(factor(device)), fill = &amp;#39;white&amp;#39;, color = &amp;#39;red&amp;#39;, linetype = 2)Bar Line Sizeggplot(ecom) +geom_bar(aes(factor(device)), fill = &amp;#39;white&amp;#39;, color = &amp;#39;red&amp;#39;, linetype = 2, size = 2)Stacked Bar Plotggplot(ecom) +geom_bar(aes(device, fill = factor(referrer)))Grouped Bar Plotggplot(ecom) +geom_bar(aes(device, fill = factor(referrer)), position = &amp;#39;dodge&amp;#39;)Horizontal Bar Plotggplot(ecom) +geom_bar(aes(factor(device), fill = factor(referrer))) +coord_flip()</description>
    </item>
    
    <item>
      <title>ggplot2: Line Graphs</title>
      <link>/post/ggplot2-line-graphs/</link>
      <pubDate>Tue, 22 Mar 2016 00:00:00 +0000</pubDate>
      
      <guid>/post/ggplot2-line-graphs/</guid>
      <description>IntroductionThis is the 8th post in the series Elegant Data Visualization with ggplot2. In the previous post, we learnt to build scatter plots. In this post, we will learn to build line plots.
Basic Line PlotWe will use a data set related to GDP growth rate. You can download it from here. It contains GDP (Gross Domestic Product) growth data for the BRICS (Brazil, Russia, India, China, South Africa) for the years 2000 to 2005.</description>
    </item>
    
    <item>
      <title>ggplot2: Scatter Plots</title>
      <link>/post/ggplot2-scatter-plots/</link>
      <pubDate>Wed, 09 Mar 2016 00:00:00 +0000</pubDate>
      
      <guid>/post/ggplot2-scatter-plots/</guid>
      <description>IntroductionThis is the fifth post in the series Elegant Data Visualization with ggplot2. In the previous post, we learnt about aesthetics. In this post, we will build scatter plots by applying everything we have learnt so far.
Basic PlotWe will continue to use the ecommerce data. You can download it from here or import directly using the readr package.
Let us start by building a simple scatter plot.</description>
    </item>
    
    <item>
      <title>ggplot2: Introduction to aesthetics</title>
      <link>/post/ggplot2-introduction-to-aesthetics/</link>
      <pubDate>Sat, 20 Feb 2016 00:00:00 +0000</pubDate>
      
      <guid>/post/ggplot2-introduction-to-aesthetics/</guid>
      <description>IntroductionThis is the fourth post in the series Elegant Data Visualization with ggplot2. In the previous post we learnt about geoms and how we can use them to build different plots. In this post, we will focus on the aesthetics i.e.Â color, shape, size, alpha, line type, line width etc. We can map these to variables or specify values for them. If we want to map the above to variables, we have to specify them within the aes() function.</description>
    </item>
    
    <item>
      <title>ggplot2: Quick Tour</title>
      <link>/post/ggplot2-quick-tour/</link>
      <pubDate>Fri, 19 Feb 2016 00:00:00 +0000</pubDate>
      
      <guid>/post/ggplot2-quick-tour/</guid>
      <description>IntroductionThis is the second post in the series Elegant Data Visualization with ggplot2. In the previous post, we understood the concept of grammar of graphics and even built a bar plot step by step while exploring the different components of a plot/chart. In this post, we will learn to quickly build a set of plots that are routinely used to explore data.
Scatter Plotqplot(disp, mpg, data = mtcars)qplot(disp, mpg, data = mtcars, geom = c(&amp;#39;point&amp;#39;, &amp;#39;line&amp;#39;))qplot(disp, mpg, data = mtcars, color = factor(cyl))qplot(disp, mpg, data = mtcars, shape = factor(cyl))qplot(disp, mpg, data = mtcars, size = qsec)Bar Plotqplot(factor(cyl), data = mtcars, geom = c(&amp;#39;bar&amp;#39;))qplot(factor(cyl), data = mtcars, geom = c(&amp;#39;bar&amp;#39;), fill = factor(am))Box Plotqplot(factor(cyl), mpg, data = mtcars, geom = c(&amp;#39;boxplot&amp;#39;))qplot(factor(1), mpg, data = mtcars, geom = c(&amp;#39;boxplot&amp;#39;))qplot(factor(cyl), mpg, data = mtcars, geom = c(&amp;#39;boxplot&amp;#39;, &amp;#39;jitter&amp;#39;))Line Chartqplot(x = date, y = unemploy, data = economics, geom = c(&amp;#39;line&amp;#39;))qplot(x = date, y = unemploy, data = economics, geom = c(&amp;#39;line&amp;#39;),color = &amp;#39;red&amp;#39;)Histogramqplot(mpg, data = mtcars, bins = 5)SummaryIn this post, we learnt to quickly create plots using the qplot() function.</description>
    </item>
    
    <item>
      <title>ggplot2: Introduction to geoms</title>
      <link>/post/ggplot2-introduction-to-geoms/</link>
      <pubDate>Fri, 05 Feb 2016 00:00:00 +0000</pubDate>
      
      <guid>/post/ggplot2-introduction-to-geoms/</guid>
      <description>IntroductionThis is the third post in the series Elegant Data Visualization with ggplot2. In the previous post, we learnt how to create plots using the qplot() function. In this post, we will create some of the most routinely used plots to explore data using the geom_* functions.
PointLet us say we want to visualize the relationship between two continuous variables. For example, as visitors browse more pages on a website, the time spent on the website also increases.</description>
    </item>
    
    <item>
      <title>Introduction to ggplot2</title>
      <link>/post/introduction-to-ggplot2/</link>
      <pubDate>Thu, 07 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>/post/introduction-to-ggplot2/</guid>
      <description>This is the first post in the series Elegant Data Visualization with ggplot2. In this post, we will understand the philosophy of Grammar of Graphics. In the subsequent posts, we will explore different aspects of ggplot2 and learn to build some of the basic plots regularly used for exploring data.
Introductionggplot2 is an alternative (and awesome) to base R for data visualization. It is based on The Grammar of Graphics.</description>
    </item>
    
  </channel>
</rss>