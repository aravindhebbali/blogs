<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Strings on Rsquared Academy Blog</title>
    <link>/tags/strings/index.xml</link>
    <description>Recent content in Strings on Rsquared Academy Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2014-2017. All rights reserved.</copyright>
    <atom:link href="/tags/strings/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Working with strings in R using stringr</title>
      <link>/post/working-with-strings-in-r-using-stringr/</link>
      <pubDate>Thu, 23 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>/post/working-with-strings-in-r-using-stringr/</guid>
      <description>&lt;!-- BLOGDOWN-HEAD --&gt;
&lt;!-- /BLOGDOWN-HEAD --&gt;

&lt;!-- BLOGDOWN-BODY-BEFORE --&gt;
&lt;!-- /BLOGDOWN-BODY-BEFORE --&gt;
&lt;div id=&#34;introduction&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Introduction&lt;/h1&gt;
&lt;p&gt;This is the 11th post in the series &lt;strong&gt;Data Wrangling with R&lt;/strong&gt;. In the previous &lt;a href=&#34;https://rsquaredacademy.github.io/blog/post/how-to-work-with-dates-in-r/&#34;&gt;post&lt;/a&gt;, we learnt to manipulate date and time using the &lt;a href=&#34;https://CRAN.R-project.org/package=lubridate&#34;&gt;lubridate&lt;/a&gt; package. In this post, we will learn to work with string data in R using &lt;a href=&#34;http://stringr.tidyverse.org&#34;&gt;stringr&lt;/a&gt;. Let us begin by installing and loading stringr and a set of other pacakges we will be using.&lt;/p&gt;
&lt;p&gt;As we did in the earlier posts in this series, we will use a case study to explore the various features of the stringr package. You can download the data for the case study from &lt;a href=&#34;https://raw.githubusercontent.com/rsquaredacademy/datasets/master/mock_strings.csv&#34;&gt;here&lt;/a&gt; or directly import the data using the readr package.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;mockstring &amp;lt;- readr::read_csv(&amp;#39;https://raw.githubusercontent.com/rsquaredacademy/datasets/master/mock_strings.csv&amp;#39;)
mockstring&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 1,000 x 16
##       id                bundle_id    app_name
##    &amp;lt;int&amp;gt;                    &amp;lt;chr&amp;gt;       &amp;lt;chr&amp;gt;
##  1     1       com.netlog.Cardify   Ronstring
##  2     2      com.devhub.Aerified     Fintone
##  3     3           int.who.Zathin Ventosanzap
##  4     4           jp.ne.goo.Rank     Redhold
##  5     5  au.gov.oaic.Stringtough    Tres-Zap
##  6     6           com.go.Pannier    Tampflex
##  7     7            com.webs.Stim     Bitchip
##  8     8        com.sogou.Bitchip      Namfix
##  9     9          com.amazon.Viva    Wrapsafe
## 10    10 com.theguardian.Domainer     Pannier
## # ... with 990 more rows, and 13 more variables: image_url &amp;lt;chr&amp;gt;,
## #   phrase &amp;lt;chr&amp;gt;, domain &amp;lt;chr&amp;gt;, imageurl &amp;lt;chr&amp;gt;, email &amp;lt;chr&amp;gt;,
## #   filename &amp;lt;chr&amp;gt;, denominatio &amp;lt;chr&amp;gt;, strings &amp;lt;chr&amp;gt;, phone &amp;lt;chr&amp;gt;,
## #   slogans &amp;lt;chr&amp;gt;, address &amp;lt;chr&amp;gt;, url &amp;lt;chr&amp;gt;, useragent &amp;lt;chr&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We will do the following in this case study:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;extract domain name from random email ids&lt;/li&gt;
&lt;li&gt;extract image type from url&lt;/li&gt;
&lt;li&gt;extract image dimension from url&lt;/li&gt;
&lt;li&gt;extract extension from domain name&lt;/li&gt;
&lt;li&gt;extract http protocol from url&lt;/li&gt;
&lt;li&gt;extract domain name from url&lt;/li&gt;
&lt;li&gt;extract extension from url&lt;/li&gt;
&lt;li&gt;extract file type from url&lt;/li&gt;
&lt;/ul&gt;
&lt;div id=&#34;extract-domain-name-from-random-email-ids&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;extract domain name from random email ids&lt;/h3&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;mockstring$email[1:2] %&amp;gt;% 
  str_split(pattern = &amp;#39;@&amp;#39;) %&amp;gt;%
  unlist() %&amp;gt;%
  str_subset(pattern = &amp;#39;\\.&amp;#39;) %&amp;gt;%
  str_split(pattern = &amp;#39;\\.&amp;#39;) %&amp;gt;%
  purrr::map_chr(extract(1))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;fastcompany&amp;quot; &amp;quot;digg&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;from-image-url-extract-image-type-jpg-png-bmp&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;from image url, extract image type (jpg, png, bmp)&lt;/h3&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;mockstring$imageurl[1:5] %&amp;gt;%
  str_split(pattern = &amp;#39;\\.&amp;#39;) %&amp;gt;%
  purrr::map_chr(extract(3)) %&amp;gt;%
  str_sub(start = 1, end = 3)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;jpg&amp;quot; &amp;quot;bmp&amp;quot; &amp;quot;bmp&amp;quot; &amp;quot;png&amp;quot; &amp;quot;jpg&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;mockstring$imageurl[1:5] %&amp;gt;%
  str_split(pattern = &amp;#39;\\.&amp;#39;) %&amp;gt;%
  purrr::map_chr(extract(3)) %&amp;gt;%
  str_split(pattern = &amp;#39;/&amp;#39;) %&amp;gt;%
  purrr::map_chr(extract(1))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;jpg&amp;quot; &amp;quot;bmp&amp;quot; &amp;quot;bmp&amp;quot; &amp;quot;png&amp;quot; &amp;quot;jpg&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;from-image-url-extract-dimension&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;from image url, extract dimension&lt;/h3&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;pattern &amp;lt;- &amp;quot;[:digits:]&amp;quot;
mockstring$imageurl[1:5] %&amp;gt;%
  str_locate(pattern = &amp;quot;[0-9]&amp;quot;) &lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##      start end
## [1,]    23  23
## [2,]    23  23
## [3,]    23  23
## [4,]    23  23
## [5,]    23  23&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;mockstring$imageurl[1:5] %&amp;gt;%
  str_sub(start = 23) %&amp;gt;%
  str_split(pattern = &amp;#39;\\.&amp;#39;) %&amp;gt;%
  purrr::map_chr(extract(1))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;130x183&amp;quot; &amp;quot;106x217&amp;quot; &amp;quot;146x127&amp;quot; &amp;quot;181x194&amp;quot; &amp;quot;220x123&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;extract-protocol&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;extract protocol&lt;/h3&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;mockstring$url[1:5] %&amp;gt;%
  str_split(pattern = &amp;#39;://&amp;#39;) %&amp;gt;%
  map_chr(extract(1))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;https&amp;quot; &amp;quot;http&amp;quot;  &amp;quot;https&amp;quot; &amp;quot;http&amp;quot;  &amp;quot;https&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;k &amp;lt;- mockstring$url[1:5] %&amp;gt;%
  str_locate(pattern = &amp;#39;://&amp;#39;) %&amp;gt;%
  data.frame() %&amp;gt;%
  extract2(&amp;#39;start&amp;#39;) %&amp;gt;%
  subtract(1)

mockstring$url[1:5] %&amp;gt;%
  str_sub(start = 1, end = k)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;https&amp;quot; &amp;quot;http&amp;quot;  &amp;quot;https&amp;quot; &amp;quot;http&amp;quot;  &amp;quot;https&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;extract-domain-name&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;extract domain name&lt;/h3&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;n &amp;lt;- mockstring$url[1:5] %&amp;gt;%
  str_locate_all(pattern = &amp;quot;/&amp;quot;) %&amp;gt;%
  map_int(extract(3))

mockstring$url[1:5] %&amp;gt;%
  str_sub(end = n) %&amp;gt;%
  str_split(pattern = &amp;#39;\\.&amp;#39;) %&amp;gt;%
  map_chr(extract(1)) %&amp;gt;%
  str_sub(start = k + 4)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;engadget&amp;quot;   &amp;quot;delicious&amp;quot;  &amp;quot;w3&amp;quot;         &amp;quot;indiatimes&amp;quot; &amp;quot;tumblr&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;extract-extension&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;extract extension&lt;/h3&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;mockstring$url[1:5] %&amp;gt;%
  str_sub(end = n) %&amp;gt;%
  str_split(pattern = &amp;#39;\\.&amp;#39;) %&amp;gt;%
  map_chr(extract(2)) %&amp;gt;%
  str_split(pattern = &amp;#39;/&amp;#39;) %&amp;gt;%
  map_chr(extract(1))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;com&amp;quot; &amp;quot;com&amp;quot; &amp;quot;org&amp;quot; &amp;quot;com&amp;quot; &amp;quot;com&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;extract-file-type&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;extract file type&lt;/h3&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# only 2 dots in the url
mockstring$url[1:3] %&amp;gt;%
  str_locate_all(pattern = &amp;#39;\\.&amp;#39;) %&amp;gt;%
  map_int(nrow) %&amp;gt;%
  is_greater_than(2) %&amp;gt;%
  sum()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 0&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# only 1 question mark in the url
mockstring$url[1:3] %&amp;gt;%
  str_locate_all(pattern = &amp;quot;[?]&amp;quot;) %&amp;gt;%
  map_int(nrow) %&amp;gt;%
  is_greater_than(1) %&amp;gt;%
  sum()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 0&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# location of second dot and 1 question mark
d &amp;lt;- mockstring$url[1:3] %&amp;gt;%
  str_locate_all(pattern = &amp;#39;\\.&amp;#39;) %&amp;gt;%
  map_int(extract(2)) %&amp;gt;%
  add(1)

q &amp;lt;- mockstring$url[1:3] %&amp;gt;%
  str_locate_all(pattern = &amp;quot;[?]&amp;quot;) %&amp;gt;%
  map_int(extract(1)) %&amp;gt;%
  subtract(1)

mockstring$url[1:3] %&amp;gt;% 
  str_sub(start = d, end = q)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;jsp&amp;quot;  &amp;quot;json&amp;quot; &amp;quot;json&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>