<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tibble on Rsquared Academy Blog</title>
    <link>/tags/tibble/index.xml</link>
    <description>Recent content in Tibble on Rsquared Academy Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2014-2017. All rights reserved.</copyright>
    <atom:link href="/tags/tibble/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Introduction to tibbles</title>
      <link>/post/introduction-to-tibbles/</link>
      <pubDate>Sat, 22 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>/post/introduction-to-tibbles/</guid>
      <description>&lt;!-- BLOGDOWN-HEAD --&gt;
&lt;!-- /BLOGDOWN-HEAD --&gt;

&lt;!-- BLOGDOWN-BODY-BEFORE --&gt;
&lt;!-- /BLOGDOWN-BODY-BEFORE --&gt;
&lt;div id=&#34;introduction&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Introduction&lt;/h3&gt;
&lt;p&gt;tibbles are a modern version of data frames that retain the good aspects (of data frames) while getting rid of the frustrating and annoying parts. tibbles are part of the &lt;a href=&#34;http://tidyverse.org/&#34;&gt;tidyverse&lt;/a&gt;. In this post, we will learn how tibbles makes certain parts of the data analysis workflow easier by being different from data frames. Specifically, we will learn&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;how to create tibbles&lt;/li&gt;
&lt;li&gt;how to convert other objects to tibbles&lt;/li&gt;
&lt;li&gt;compare tibbles with data frames&lt;/li&gt;
&lt;li&gt;to manipulate tibbles&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&#34;creating-tibbles&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Creating tibbles&lt;/h3&gt;
&lt;p&gt;In this first section, we will create tibbles using the &lt;code&gt;tibble()&lt;/code&gt; function and compare them to data frames.&lt;/p&gt;
&lt;div id=&#34;tibble-never-changes-inputs-type&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;tibble never changes input’s type&lt;/h4&gt;
&lt;p&gt;In the &lt;code&gt;data.frame()&lt;/code&gt; function, any column with &lt;code&gt;character&lt;/code&gt; data is converted to &lt;code&gt;factors&lt;/code&gt; unless you set &lt;code&gt;stringsAsFactors&lt;/code&gt; argument to &lt;code&gt;FALSE&lt;/code&gt;. tibble takes care of this by never changing any input’s type. As you can observe in the below example, tibbles do not convert &lt;code&gt;characters&lt;/code&gt; to &lt;code&gt;factors&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;tibble(x = letters,
       y = 1:26,
       z = sample(100, 26))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 26 × 3
##        x     y     z
##    &amp;lt;chr&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt;
## 1      a     1    60
## 2      b     2     3
## 3      c     3     8
## 4      d     4    47
## 5      e     5    28
## 6      f     6    96
## 7      g     7    30
## 8      h     8     6
## 9      i     9    84
## 10     j    10    24
## # ... with 16 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;tibble-never-adjusts-variable-names&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;tibble never adjusts variable names&lt;/h4&gt;
&lt;p&gt;If there is more than one word in a variable name, &lt;code&gt;data.frame()&lt;/code&gt; will add a &lt;code&gt;.&lt;/code&gt; and join them but tibble never adjusts variable names. Below is an example:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;names(data.frame(`order value` = 10))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;order.value&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;names(tibble(`order value` = 10))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;order value&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;tibble-never-prints-all-the-rows&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;tibble never prints all the rows&lt;/h4&gt;
&lt;p&gt;tibble only shows the first ten rows and all the columns that fit on one screen. Below the column names, it prints the column type as well. Let us look at an example:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;x &amp;lt;- 1:100
y &amp;lt;- letters[1]
z &amp;lt;- sample(c(TRUE, FALSE), 100, replace = TRUE)
tibble(x, y, z)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 100 × 3
##        x     y     z
##    &amp;lt;int&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;lgl&amp;gt;
## 1      1     a  TRUE
## 2      2     a FALSE
## 3      3     a  TRUE
## 4      4     a FALSE
## 5      5     a FALSE
## 6      6     a  TRUE
## 7      7     a FALSE
## 8      8     a FALSE
## 9      9     a FALSE
## 10    10     a FALSE
## # ... with 90 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;tibble-never-recycles-vectors-of-length-greater-than-1&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;tibble never recycles vectors of length greater than 1&lt;/h4&gt;
&lt;p&gt;tibble will never recycle a vector of length greater than 1. If you observe the previous example, we could have used all the letters instead of just the first letter but tibble will return an error if the vectors are of length greater than 1.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;creating-tibbles-ii&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Creating tibbles II&lt;/h3&gt;
&lt;p&gt;In the previous section, we created tibbles using the &lt;code&gt;tibble()&lt;/code&gt; function by directly inputting data as arguments. In this section, we will convert the following objects to tibble using the &lt;code&gt;as_tibble()&lt;/code&gt; function:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;data.frame&lt;/li&gt;
&lt;li&gt;list&lt;/li&gt;
&lt;li&gt;matrix&lt;/li&gt;
&lt;li&gt;table&lt;/li&gt;
&lt;li&gt;tbl_df&lt;/li&gt;
&lt;/ul&gt;
&lt;div id=&#34;dataframes&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;DataFrames&lt;/h4&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;as_tibble(iris)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 150 × 5
##    Sepal.Length Sepal.Width Petal.Length Petal.Width Species
##           &amp;lt;dbl&amp;gt;       &amp;lt;dbl&amp;gt;        &amp;lt;dbl&amp;gt;       &amp;lt;dbl&amp;gt;  &amp;lt;fctr&amp;gt;
## 1           5.1         3.5          1.4         0.2  setosa
## 2           4.9         3.0          1.4         0.2  setosa
## 3           4.7         3.2          1.3         0.2  setosa
## 4           4.6         3.1          1.5         0.2  setosa
## 5           5.0         3.6          1.4         0.2  setosa
## 6           5.4         3.9          1.7         0.4  setosa
## 7           4.6         3.4          1.4         0.3  setosa
## 8           5.0         3.4          1.5         0.2  setosa
## 9           4.4         2.9          1.4         0.2  setosa
## 10          4.9         3.1          1.5         0.1  setosa
## # ... with 140 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;lists&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Lists&lt;/h4&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;l &amp;lt;- list(x = 1:32, y = sample(100, 32), z = replicate(32, letters, simplify = FALSE))
as_tibble(l)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 32 × 3
##        x     y          z
##    &amp;lt;int&amp;gt; &amp;lt;int&amp;gt;     &amp;lt;list&amp;gt;
## 1      1    50 &amp;lt;chr [26]&amp;gt;
## 2      2    47 &amp;lt;chr [26]&amp;gt;
## 3      3    81 &amp;lt;chr [26]&amp;gt;
## 4      4    20 &amp;lt;chr [26]&amp;gt;
## 5      5    75 &amp;lt;chr [26]&amp;gt;
## 6      6     5 &amp;lt;chr [26]&amp;gt;
## 7      7    34 &amp;lt;chr [26]&amp;gt;
## 8      8    86 &amp;lt;chr [26]&amp;gt;
## 9      9     4 &amp;lt;chr [26]&amp;gt;
## 10    10    80 &amp;lt;chr [26]&amp;gt;
## # ... with 22 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;matrix&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Matrix&lt;/h4&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;m &amp;lt;- matrix(sample(1000, 2600, replace = TRUE), ncol = 26)
colnames(m) &amp;lt;- letters
as_tibble(m)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 100 × 26
##        a     b     c     d     e     f     g     h     i     j     k     l
##    &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt;
## 1    923   644   613    33   884   254    26   805   954    64   162   837
## 2    734   105   631   345   180   937   923   197   750    41   434   232
## 3    376   603    36    91   554   673   452   161   861   874   193   329
## 4    801   191   855   694   741   160   885   913   247   856   882   861
## 5    193   381   133     8   537   570    40   812    98   251   680    14
## 6     85   155   327    29   502   429   942   658   297   159   620   374
## 7    610   290    21   293    62   733   397   284   786    84   162   117
## 8    335   912    67   337   207   450   352   856   637   757   512    29
## 9    823   920   548   725   579   917   867   683   697   152    31   631
## 10   493   146   293   808   489   191   599   155   359   735    11   533
## # ... with 90 more rows, and 14 more variables: m &amp;lt;int&amp;gt;, n &amp;lt;int&amp;gt;, o &amp;lt;int&amp;gt;,
## #   p &amp;lt;int&amp;gt;, q &amp;lt;int&amp;gt;, r &amp;lt;int&amp;gt;, s &amp;lt;int&amp;gt;, t &amp;lt;int&amp;gt;, u &amp;lt;int&amp;gt;, v &amp;lt;int&amp;gt;,
## #   w &amp;lt;int&amp;gt;, x &amp;lt;int&amp;gt;, y &amp;lt;int&amp;gt;, z &amp;lt;int&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;table&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Table&lt;/h4&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;k &amp;lt;- table(mtcars$cyl)
as_tibble(k)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 3 × 2
##    Var1     n
##   &amp;lt;chr&amp;gt; &amp;lt;int&amp;gt;
## 1     4    11
## 2     6     7
## 3     8    14&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;tbl_df&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;tbl_df&lt;/h4&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;k &amp;lt;- tbl_df(iris)
as_tibble(k)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 150 × 5
##    Sepal.Length Sepal.Width Petal.Length Petal.Width Species
##           &amp;lt;dbl&amp;gt;       &amp;lt;dbl&amp;gt;        &amp;lt;dbl&amp;gt;       &amp;lt;dbl&amp;gt;  &amp;lt;fctr&amp;gt;
## 1           5.1         3.5          1.4         0.2  setosa
## 2           4.9         3.0          1.4         0.2  setosa
## 3           4.7         3.2          1.3         0.2  setosa
## 4           4.6         3.1          1.5         0.2  setosa
## 5           5.0         3.6          1.4         0.2  setosa
## 6           5.4         3.9          1.7         0.4  setosa
## 7           4.6         3.4          1.4         0.3  setosa
## 8           5.0         3.4          1.5         0.2  setosa
## 9           4.4         2.9          1.4         0.2  setosa
## 10          4.9         3.1          1.5         0.1  setosa
## # ... with 140 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can test if an object is a tibble using the &lt;code&gt;is_tibble()&lt;/code&gt; function.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;is_tibble(mtcars)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] FALSE&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;is_tibble(as_tibble(mtcars))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] TRUE&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;tribble&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Tribble&lt;/h4&gt;
&lt;p&gt;Another way to create tibbles is using the &lt;code&gt;tribble()&lt;/code&gt; function. tribble is short for transposed tibbles. It is customized for data entry in code. Column names start with &lt;code&gt;~&lt;/code&gt; and values are separated by commas. Below is an example:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;tribble(
  ~x, ~y, ~z,
  #--|--|----
  1, TRUE, &amp;#39;a&amp;#39;,
  2, FALSE, &amp;#39;b&amp;#39;
)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 2 × 3
##       x     y     z
##   &amp;lt;dbl&amp;gt; &amp;lt;lgl&amp;gt; &amp;lt;chr&amp;gt;
## 1     1  TRUE     a
## 2     2 FALSE     b&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;column-names&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Column Names&lt;/h4&gt;
&lt;p&gt;Names of the columns in tibbles need not be valid R variable names. They can contain unusual characters like a space or a smiley but must be enclosed in ticks. Below is an example:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;tibble(
  ` ` = &amp;#39;space&amp;#39;,
  `2` = &amp;#39;integer&amp;#39;,
  `:)` = &amp;#39;smiley&amp;#39;
)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 1 × 3
##     ` `     `2`   `:)`
##   &amp;lt;chr&amp;gt;   &amp;lt;chr&amp;gt;  &amp;lt;chr&amp;gt;
## 1 space integer smiley&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;section&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;&lt;/h3&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>