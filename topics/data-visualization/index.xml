<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Data Visualization on Rsquared Academy Blog</title>
    <link>/topics/data-visualization/</link>
    <description>Recent content in Data Visualization on Rsquared Academy Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2014-2017. All rights reserved.</copyright>
    <lastBuildDate>Wed, 20 Sep 2017 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/topics/data-visualization/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Legend - Part 3</title>
      <link>/post/legend-part-3/</link>
      <pubDate>Wed, 20 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>/post/legend-part-3/</guid>
      <description>IntroductionIf the aesthetics are mapped to variables, ggplot2 automatically creates legends wherever applicable. You may want to modify the appearance of legends. In this module, we will learn to modify the legends when shape is mapped to categorical variables. If you have mapped shape/size to a discrete variable which has less than six categories, you can use scale_shape()
Modify legend when shape is mapped to variables. Specifically
titlebreakslimitsrangelabelsvaluessymbol typePlotggplot(mtcars) +geom_point(aes(disp, mpg, shape = factor(cyl)))</description>
    </item>
    
    <item>
      <title>Legend - Part 4</title>
      <link>/post/legend-part-4/</link>
      <pubDate>Wed, 20 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>/post/legend-part-4/</guid>
      <description>IntroductionIf the aesthetics are mapped to variables, ggplot2 automatically creates legends wherever applicable. You may want to modify the appearance of legends. In this module, we will learn to modify the legends when size is mapped to categorical variables.
Modify legend when size is mapped to variables. Specifically
titlebreakslimitsrangelabelsvaluessymbol type
Plotggplot(mtcars) +geom_point(aes(disp, mpg, size = hp))</description>
    </item>
    
    <item>
      <title>Legend - Part 5</title>
      <link>/post/legend-part-5/</link>
      <pubDate>Wed, 20 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>/post/legend-part-5/</guid>
      <description>IntroductionIf the aesthetics are mapped to variables, ggplot2 automatically creates legends wherever applicable. You may want to modify the appearance of legends. In this module, we will learn to modify the legends when alpha is mapped to categorical variables.
Modify legend when alpha is mapped to variables. Specifically
titlebreakslimitsrangelabelsvaluessymbol type
Plotggplot(mtcars) +geom_point(aes(disp, mpg, alpha = hp), color = &amp;#39;blue&amp;#39;)</description>
    </item>
    
    <item>
      <title>Guides - Axes</title>
      <link>/post/guides-axes/</link>
      <pubDate>Thu, 06 Jul 2017 00:00:00 +0000</pubDate>
      
      <guid>/post/guides-axes/</guid>
      <description>IntroductionNow that we have learnt to build different plots, let us look at different ways to modify the axis. Along the way, we will also explore the scale_*() family of functions.
Modify X and Y axis
titlelabelslimitsbreakspositionIn this module, we will learn how to modify the X and Y axis using the following functions:
Continuous Axisscale_x_continuous()scale_y_continuous()Discrete Axisscale_x_discrete()scale_y_discrete()</description>
    </item>
    
    <item>
      <title>Legend - Part 2</title>
      <link>/post/legend-part-2/</link>
      <pubDate>Thu, 06 Jul 2017 00:00:00 +0000</pubDate>
      
      <guid>/post/legend-part-2/</guid>
      <description>IntroductionThis is the 14th post in the series Elegant Data Visualization with ggplot2. In the previos post, we learnt how to modify the legend of plots when aesthetics are mapped to variables. In this post, we will continue to explore different ways to modify/customize the legend of plots.
If the aesthetics are mapped to variables, ggplot2 automatically creates legends wherever applicable. You may want to modify the appearance of legends.</description>
    </item>
    
    <item>
      <title>Legends - Part 1</title>
      <link>/post/legend-part-1/</link>
      <pubDate>Thu, 06 Jul 2017 00:00:00 +0000</pubDate>
      
      <guid>/post/legend-part-1/</guid>
      <description>IntroductionThis is the 13th post in the series Elegant Data Visualization with ggplot2. In the previos post, we learnt how to modify the axis of plots. In this post, we will focus on modifying the legends of plots when the aesthetics are mapped to variables. If the aesthetics are mapped to variables, ggplot2 automatically creates legends wherever applicable. You may want to modify the appearance of legends.</description>
    </item>
    
    <item>
      <title>Overlapping</title>
      <link>/post/overlapping/</link>
      <pubDate>Thu, 06 Jul 2017 00:00:00 +0000</pubDate>
      
      <guid>/post/overlapping/</guid>
      <description>IntroductionThis is the 18th post in the series Elegant Data Visualization with ggplot2. In the previous post, we learnt how to modify the legend of plots when aesthetics are mapped to variables. In this post, we will learn to position the geoms to avoid overlapping.
DodgePreserve the vertical position while adjusting the horizontal position.
Create grouped bar plots.
ggplot(data = mtcars, aes(factor(cyl), fill = factor(vs))) +geom_bar()ggplot(data = mtcars, aes(factor(cyl), fill = factor(vs))) +geom_bar(position = position_dodge(width = 1))JitterAdd some noise to data points for better visualization.</description>
    </item>
    
    <item>
      <title>Axis &amp; Plot Labels</title>
      <link>/post/axis-plot-labels/</link>
      <pubDate>Tue, 04 Jul 2017 00:00:00 +0000</pubDate>
      
      <guid>/post/axis-plot-labels/</guid>
      <description>IntroductionThis is the fifth post in the series Elegant Data Visualization with ggplot2. In the previous post, we learnt about aesthetics. In this post, we will learn to:
add title and subtitle to the plotmodify axis labelsmodify axis rangeremove axisformat axis
Basic Plotggplot(mtcars) +geom_point(aes(disp, mpg))
Title &amp;amp; SubtitleThere are two ways to add title to a plot:</description>
    </item>
    
    <item>
      <title>Guides</title>
      <link>/post/guides/</link>
      <pubDate>Tue, 04 Jul 2017 00:00:00 +0000</pubDate>
      
      <guid>/post/guides/</guid>
      <description> 
IntroductionThis is the sixth post in the series Elegant Data Visualization with ggplot2. In the previous post, we learnt how to add text to a plot. In this post, we will learn how to modify guide/legend.
Guideggplot(mtcars) +geom_bar(aes(factor(cyl), fill = factor(gear))) +scale_fill_discrete(guide = guide_legend(title = &amp;#39;gear&amp;#39;, title.position = &amp;#39;bottom&amp;#39;, title.hjust = 0.5,label.position = &amp;#39;top&amp;#39;, direction = &amp;#39;horizontal&amp;#39;, label.hjust = 0.5, nrow = 3, reverse = TRUE))</description>
    </item>
    
    <item>
      <title>Data Visualization with R - Font, Color &amp; Size</title>
      <link>/post/data-visualization-with-r-font-color-size/</link>
      <pubDate>Sat, 26 Dec 2015 00:00:00 +0000</pubDate>
      
      <guid>/post/data-visualization-with-r-font-color-size/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Data Visualization with R - Combining Plots</title>
      <link>/post/data-visualization-with-r-combining-plots/</link>
      <pubDate>Thu, 17 Dec 2015 00:00:00 +0000</pubDate>
      
      <guid>/post/data-visualization-with-r-combining-plots/</guid>
      <description>This is the tenth post in the series Data Visualization With R. In the previous post, we learnt how to add text annotations to plots. In this post, we will learn how to combine multiple plots.
IntroductionOften, it is useful to have multiple plots in the same frame as it allows us to get a comprehensive view of a particular variable or compare among different variables. Listed below are two methods to combine plots:</description>
    </item>
    
    <item>
      <title>Data Visualization with R - Text Annotations</title>
      <link>/post/data-visualization-with-r-text-annotations/</link>
      <pubDate>Tue, 08 Dec 2015 00:00:00 +0000</pubDate>
      
      <guid>/post/data-visualization-with-r-text-annotations/</guid>
      <description>This is the ninth post in the series Data Visualization With R. In the previous post, we learnt how to add legend to a plot. In this post, we will learn to add text annotations.
IntroductionThere are occassions when you want to display additional information in a plot. This is usually achieved by adding text either inside the plot or on the margins. For example, you might want to label a line/bar or add formulas to better communicate what is shown in the plot.</description>
    </item>
    
    <item>
      <title>Data Visualization with R - Legends</title>
      <link>/post/data-visualization-with-r-legends/</link>
      <pubDate>Wed, 25 Nov 2015 00:00:00 +0000</pubDate>
      
      <guid>/post/data-visualization-with-r-legends/</guid>
      <description>This is the eighth post in the series Data Visualisation With R. In the previous post, we learnt to build histograms. In this post, we will learn how to add a legend to a plot in R.
IntroductionLegends are used to convey information about the data being represented by a plot. To understand the importance of legends, let us look at the two plots below. In the first plot, would you be able to understand what the lines represent in the absence of a legend?</description>
    </item>
    
    <item>
      <title>Data Visualization with R - Histogram</title>
      <link>/post/data-visualization-with-r-histogram/</link>
      <pubDate>Fri, 06 Nov 2015 00:00:00 +0000</pubDate>
      
      <guid>/post/data-visualization-with-r-histogram/</guid>
      <description>This is the seventh post in the series Data Visualization With R. In the previous post, we learnt about box and whisker plots. In this post, we will learn about histograms.
IntroductionA histogram is a plot that can be used to examine the shape and spread of continuous data. It looks very similar to a bar graph and can be used to detect outliers and skewness in data.</description>
    </item>
    
    <item>
      <title>Data Visualization with R - Box Plots</title>
      <link>/post/data-visualization-with-r-box-plots/</link>
      <pubDate>Wed, 21 Oct 2015 00:00:00 +0000</pubDate>
      
      <guid>/post/data-visualization-with-r-box-plots/</guid>
      <description>This is the sixth post in the series Data Visualization With R. In the previous post, we learnt how to build bar plots. In this post, we will learn about box plots.
IntroductionThe box plot is a standardized way of displaying the distribution of data based on the five number summary: minimum, first quartile, median, third quartile, and maximum. Box plots are useful for detecting outliers and for comparing distributions.</description>
    </item>
    
    <item>
      <title>Data Visualization With R - Bar Plots</title>
      <link>/post/data-visualization-with-r-bar-plots/</link>
      <pubDate>Mon, 05 Oct 2015 00:00:00 +0000</pubDate>
      
      <guid>/post/data-visualization-with-r-bar-plots/</guid>
      <description>IntroductionThis is the fifth post in the series Data Visualization With R. In the previous post we learnt how to build line graphs. In this post, we will visualize categorical data using univariate and bivariate bar plots.
Bar PlotA bar plot represents data in rectangular bars. The length of the bars are proportional to the values they represent. Bar plots can be either horizontal or vertical.</description>
    </item>
    
    <item>
      <title>Data Visualization With R - Line Graphs</title>
      <link>/post/data-visualization-with-r-line-graphs/</link>
      <pubDate>Wed, 23 Sep 2015 00:00:00 +0000</pubDate>
      
      <guid>/post/data-visualization-with-r-line-graphs/</guid>
      <description>IntroductionThis is the fourth post in the series Data Visualization With R. In the previous post, we learnt how to build scatter plots. In this post, we will build line graphs. To be more specific we will learn to
create line plotsadd color to linesmodify line type/stylemodify line widthadd points to the linesmodify axis rangeadd additional lines to the plotLine GraphTo build a line graph, we will learn a new argument in the plot() function called type.</description>
    </item>
    
    <item>
      <title>Data Visualization With R - Scatter Plots</title>
      <link>/post/data-visualization-with-r-scatter-plots/</link>
      <pubDate>Mon, 07 Sep 2015 00:00:00 +0000</pubDate>
      
      <guid>/post/data-visualization-with-r-scatter-plots/</guid>
      <description>IntroductionThis is the third post in the series Data Visualization With R. In the previous post, we learned how to add title, subtitle and axis labels. We also learned how to modify the range of the axis. In this post, we will learn how to create scatter plots. If you remember, we had created a scatter plot in this post, using the plot() function. We will continue with the same plot and learn how to enhance a scatter plot by</description>
    </item>
    
    <item>
      <title>Data Visualization With R - Title and Axis Labels</title>
      <link>/post/data-visualization-with-r-title-and-axis-labels/</link>
      <pubDate>Sat, 22 Aug 2015 00:00:00 +0000</pubDate>
      
      <guid>/post/data-visualization-with-r-title-and-axis-labels/</guid>
      <description>IntroductionThis is the second post of the series Data Visualization With R. In the previous post, we explored the plot() function and observed the different types of plots it generated. In this post, we will learn how to add:
TitleSubtitleAxis Labelsto a plot and how to modify:
Axis rangeIn the previous post, we created plots which did not have any title or labels.</description>
    </item>
    
    <item>
      <title>Data Visualization With R - Introduction</title>
      <link>/post/data-visualization-with-r-introduction/</link>
      <pubDate>Wed, 05 Aug 2015 00:00:00 +0000</pubDate>
      
      <guid>/post/data-visualization-with-r-introduction/</guid>
      <description>IntroductionThis is the first post of the series Data Visualization With R. The objective of the series is to provide a gentle introduction to working with base graphics in R. We will come up with a similar series using ggplot2 shortly.
What is data visualization?In simple words, data visualization is the representation of data in graphical format.
data-viz
Why visualize data?Explore: Visualization helps in exploring and explaining patterns and trendsDetect: Patterns or anomalies in data can be detected by looking at graphsMake sense: Possible to make sense of large amount of data efficiently and in timeCommunicate: Easy to communicate and share the insights from dataCompare the below output and the boxplot and you will agree that</description>
    </item>
    
  </channel>
</rss>