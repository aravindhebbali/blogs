<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Data Visualization on Rsquared Academy Blog</title>
    <link>/topics/data-visualization/index.xml</link>
    <description>Recent content in Data Visualization on Rsquared Academy Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2014-2017. All rights reserved.</copyright>
    <atom:link href="/topics/data-visualization/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Guides - Axes</title>
      <link>/post/guides-axes/</link>
      <pubDate>Thu, 06 Jul 2017 00:00:00 +0000</pubDate>
      
      <guid>/post/guides-axes/</guid>
      <description>&lt;div id=&#34;introduction&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Introduction&lt;/h1&gt;
&lt;p&gt;Now that we have learnt to build different plots, let us look at different ways to modify the axis. Along the way, we will also explore the &lt;code&gt;scale_*()&lt;/code&gt; family of functions&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;scale_x_continuous()&lt;/code&gt;: modify x axis when x is continuous&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The first function we will explore is &lt;code&gt;scale_x_continuous()&lt;/code&gt;. It can be used for:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;axis title&lt;/li&gt;
&lt;li&gt;axis labels&lt;/li&gt;
&lt;li&gt;axis limits&lt;/li&gt;
&lt;li&gt;axis breaks&lt;/li&gt;
&lt;li&gt;and axis position&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Let us create a simple scatter plot and then use &lt;code&gt;scale_x_continuous()&lt;/code&gt; to modify the X axis.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(mtcars) +
  geom_point(aes(disp, mpg))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2017-07-06-guides-axes_files/figure-html/guide2-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(mtcars) +
  geom_point(aes(disp, mpg)) +
  scale_x_continuous(name = &amp;quot;Displacement&amp;quot;,
                     limits = c(0, 600),
                     breaks = c(0, 150, 300, 450, 600),
                     labels = c(&amp;#39;0&amp;#39;, &amp;#39;150&amp;#39;, &amp;#39;300&amp;#39;, &amp;#39;450&amp;#39;, &amp;#39;600&amp;#39;),
                     position = &amp;#39;top&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2017-07-06-guides-axes_files/figure-html/guide3-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;scale_y_continuous()&lt;/code&gt;: modify y axis&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Now let us modify the Y axis.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(mtcars) +
  geom_point(aes(disp, mpg)) +
  scale_y_continuous(name = &amp;quot;Miles Per Gallon&amp;quot;,
                     limits = c(0, 45),
                     breaks = c(0, 15, 300, 45),
                     labels = c(&amp;#39;0&amp;#39;, &amp;#39;15&amp;#39;, &amp;#39;30&amp;#39;, &amp;#39;45&amp;#39;),
                     position = &amp;#39;right&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2017-07-06-guides-axes_files/figure-html/guide4-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Now let us look at plots with discrete X axis.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(mtcars) +
  geom_bar(aes(factor(cyl)))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2017-07-06-guides-axes_files/figure-html/guide5-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Use &lt;code&gt;scael_x_discrete()&lt;/code&gt; to modify the X axis.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(mtcars) +
  geom_bar(aes(factor(cyl))) +
  scale_x_discrete(name = &amp;quot;Number of Cylinders&amp;quot;,
                   labels = c(&amp;quot;4&amp;quot; = &amp;quot;Four&amp;quot;, &amp;quot;6&amp;quot; = &amp;quot;Six&amp;quot;, &amp;quot;8&amp;quot; = &amp;quot;Eight&amp;quot;),
                   breaks = c(&amp;quot;4&amp;quot;, &amp;quot;6&amp;quot;, &amp;quot;8&amp;quot;),
                   position = &amp;quot;bottom&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2017-07-06-guides-axes_files/figure-html/guide6-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;div id=&#34;summary&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Summary&lt;/h2&gt;
&lt;p&gt;In this post, we learnt how to modify the axis whether it represents a continuous variable or a discrete variable. In the next post, we will learn how to modify the legend when aesthetics are mapped to variables.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Guides - Legends</title>
      <link>/post/guides-legends/</link>
      <pubDate>Thu, 06 Jul 2017 00:00:00 +0000</pubDate>
      
      <guid>/post/guides-legends/</guid>
      <description>&lt;!-- BLOGDOWN-HEAD --&gt;
&lt;!-- /BLOGDOWN-HEAD --&gt;

&lt;!-- BLOGDOWN-BODY-BEFORE --&gt;
&lt;!-- /BLOGDOWN-BODY-BEFORE --&gt;
&lt;p&gt;Now that we have learnt to build different plots, let us look at different ways to modify the axis. Along the way, we will also explore the below functions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;scale_*()&lt;/code&gt; family of functions&lt;/li&gt;
&lt;li&gt;&lt;code&gt;guides()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;guide_legend()&lt;/code&gt; and &lt;code&gt;guide_colorbar()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;theme()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Let us start with &lt;code&gt;scale_*()&lt;/code&gt; family of functions.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;scale_x_continuous()&lt;/code&gt;: modify x axis&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The first function we will explore is &lt;code&gt;scale_x_continuous()&lt;/code&gt;. It can be used for:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;axis title&lt;/li&gt;
&lt;li&gt;axis labels&lt;/li&gt;
&lt;li&gt;axis limits&lt;/li&gt;
&lt;li&gt;axis breaks&lt;/li&gt;
&lt;li&gt;and axis position&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Let us recreate the scatter plot for visualizing the relationship between number of pages visited and time spent on site and then use &lt;code&gt;scale_x_continuous()&lt;/code&gt; to modify the X axis.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;scale_y_continuous()&lt;/code&gt;: modify y axis&lt;/li&gt;
&lt;li&gt;&lt;code&gt;scale_alpha_continuous()&lt;/code&gt;:&lt;/li&gt;
&lt;li&gt;&lt;code&gt;scale_alpha_discrete()&lt;/code&gt;:&lt;/li&gt;
&lt;li&gt;&lt;code&gt;scale_color_manual()&lt;/code&gt;:&lt;/li&gt;
&lt;li&gt;&lt;code&gt;scale_shape_manual()&lt;/code&gt;:&lt;/li&gt;
&lt;li&gt;&lt;code&gt;scale_size_manual()&lt;/code&gt;:&lt;/li&gt;
&lt;li&gt;&lt;code&gt;scale_alpha_manual()&lt;/code&gt;:&lt;/li&gt;
&lt;li&gt;&lt;code&gt;scale_shape()&lt;/code&gt;: maps discrete variable to six shapes&lt;/li&gt;
&lt;li&gt;&lt;code&gt;scale_size()&lt;/code&gt;: maps discrete variable to six sizes&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Overlapping</title>
      <link>/post/overlapping/</link>
      <pubDate>Thu, 06 Jul 2017 00:00:00 +0000</pubDate>
      
      <guid>/post/overlapping/</guid>
      <description>&lt;!-- BLOGDOWN-HEAD --&gt;
&lt;!-- /BLOGDOWN-HEAD --&gt;

&lt;!-- BLOGDOWN-BODY-BEFORE --&gt;
&lt;!-- /BLOGDOWN-BODY-BEFORE --&gt;
&lt;p&gt;Now that we have learnt to build different plots, let us look at different ways to modify the axis. Along the way, we will also explore the below functions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;scale_*()&lt;/code&gt; family of functions&lt;/li&gt;
&lt;li&gt;&lt;code&gt;guides()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;guide_legend()&lt;/code&gt; and &lt;code&gt;guide_colorbar()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;theme()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Let us start with &lt;code&gt;scale_*()&lt;/code&gt; family of functions.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;scale_x_continuous()&lt;/code&gt;: modify x axis&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The first function we will explore is &lt;code&gt;scale_x_continuous()&lt;/code&gt;. It can be used for:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;axis title&lt;/li&gt;
&lt;li&gt;axis labels&lt;/li&gt;
&lt;li&gt;axis limits&lt;/li&gt;
&lt;li&gt;axis breaks&lt;/li&gt;
&lt;li&gt;and axis position&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Let us recreate the scatter plot for visualizing the relationship between number of pages visited and time spent on site and then use &lt;code&gt;scale_x_continuous()&lt;/code&gt; to modify the X axis.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;scale_y_continuous()&lt;/code&gt;: modify y axis&lt;/li&gt;
&lt;li&gt;&lt;code&gt;scale_alpha_continuous()&lt;/code&gt;:&lt;/li&gt;
&lt;li&gt;&lt;code&gt;scale_alpha_discrete()&lt;/code&gt;:&lt;/li&gt;
&lt;li&gt;&lt;code&gt;scale_color_manual()&lt;/code&gt;:&lt;/li&gt;
&lt;li&gt;&lt;code&gt;scale_shape_manual()&lt;/code&gt;:&lt;/li&gt;
&lt;li&gt;&lt;code&gt;scale_size_manual()&lt;/code&gt;:&lt;/li&gt;
&lt;li&gt;&lt;code&gt;scale_alpha_manual()&lt;/code&gt;:&lt;/li&gt;
&lt;li&gt;&lt;code&gt;scale_shape()&lt;/code&gt;: maps discrete variable to six shapes&lt;/li&gt;
&lt;li&gt;&lt;code&gt;scale_size()&lt;/code&gt;: maps discrete variable to six sizes&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Axis &amp; Plot Labels</title>
      <link>/post/axis-plot-labels/</link>
      <pubDate>Tue, 04 Jul 2017 00:00:00 +0000</pubDate>
      
      <guid>/post/axis-plot-labels/</guid>
      <description>&lt;div id=&#34;introduction&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Introduction&lt;/h1&gt;
&lt;p&gt;This is the fifth post in the series &lt;strong&gt;Elegant Data Visualization with ggplot2&lt;/strong&gt;. In the previous &lt;a href=&#34;https://rsquaredacademy.github.io/blog/post/ggplot2-introduction-to-aesthetics/&#34;&gt;post&lt;/a&gt;, we learnt about aesthetics. In this post, we will learn to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;add title and subtitle to the plot&lt;/li&gt;
&lt;li&gt;modify axis labels&lt;/li&gt;
&lt;li&gt;modify axis range&lt;/li&gt;
&lt;li&gt;remove axis&lt;/li&gt;
&lt;li&gt;format axis&lt;/li&gt;
&lt;/ul&gt;
&lt;div id=&#34;basic-plot&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Basic Plot&lt;/h2&gt;
&lt;p&gt;Let us start by building a simple scatter plot.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(mtcars) +
  geom_point(aes(disp, mpg))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2017-07-04-axis-plot-labels_files/figure-html/axis2-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;title-subtitle&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Title &amp;amp; Subtitle&lt;/h2&gt;
&lt;p&gt;You can add a title and subtitle to the plot using the &lt;code&gt;ggtitle()&lt;/code&gt; function.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(mtcars) +
  geom_point(aes(disp, mpg)) +
  ggtitle(label = &amp;#39;Displacement vs Mileage&amp;#39;, subtitle = &amp;#39;disp vs mpg&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2017-07-04-axis-plot-labels_files/figure-html/axis3-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;axis-labels&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Axis Labels&lt;/h2&gt;
&lt;p&gt;The axis labels can be modified using the &lt;code&gt;xlab()&lt;/code&gt; and &lt;code&gt;ylab()&lt;/code&gt; functions.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(mtcars) +
  geom_point(aes(disp, mpg)) +
  xlab(&amp;#39;Displacement&amp;#39;) + ylab(&amp;#39;Miles Per Gallon&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2017-07-04-axis-plot-labels_files/figure-html/axis4-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;We can add all of the above using the &lt;code&gt;labs()&lt;/code&gt; function as well.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(mtcars) +
  geom_point(aes(disp, mpg)) +
  labs(title = &amp;#39;Displacement vs Mileage&amp;#39;,
    subtitle = &amp;#39;disp vs mpg&amp;#39;, x = &amp;#39;Displacement&amp;#39;,
    y = &amp;#39;Miles Per Gallon&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2017-07-04-axis-plot-labels_files/figure-html/axis5-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;axis-range&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Axis Range&lt;/h2&gt;
&lt;p&gt;Sometimes you may want to modify the range of the axis.&lt;/p&gt;
&lt;p&gt;Use the &lt;code&gt;xlim()&lt;/code&gt; function to modify the range of the X axis.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(mtcars) +
  geom_point(aes(disp, mpg)) +
  xlim(c(0, 600))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2017-07-04-axis-plot-labels_files/figure-html/axis6-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Use the &lt;code&gt;ylim()&lt;/code&gt; function to modify the range of the Y axis.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(mtcars) +
  geom_point(aes(disp, mpg)) +
  ylim(c(0, 40))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2017-07-04-axis-plot-labels_files/figure-html/axis7-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;You can use the &lt;code&gt;expand_limits()&lt;/code&gt; function as well.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(mtcars) +
  geom_point(aes(disp, mpg)) +
  expand_limits(x = c(0, 600), y = c(0, 40))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2017-07-04-axis-plot-labels_files/figure-html/axis8-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;remove-axis-labels&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Remove Axis Labels&lt;/h2&gt;
&lt;p&gt;If you want to remove the axis labels all together, use the &lt;code&gt;theme()&lt;/code&gt; function.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(mtcars) +
  geom_point(aes(disp, mpg)) +
  theme(axis.title.x = element_blank(),
    axis.title.y = element_blank())&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2017-07-04-axis-plot-labels_files/figure-html/axis9-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;What we are doing above is to modify the theme of the plot and set the axis labels to blank using &lt;code&gt;element_blank()&lt;/code&gt; function.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;format-title-axis-labels&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Format Title &amp;amp; Axis Labels&lt;/h2&gt;
&lt;p&gt;To format the title or the axis labels, we have to modify the theme of the plot using the &lt;code&gt;theme()&lt;/code&gt; function. We can modify the color, font family, font face, font size and horizontal position. Let us try them one by one.&lt;/p&gt;
&lt;p&gt;The font family can be any of the valid font family types but it must be supported by OS. The font face can be plain, bold, italic, bold.italic hjust must be between 0 (extreme left) and 1 (extreme right).&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(mtcars) +
  geom_point(aes(disp, mpg)) +
  ggtitle(&amp;#39;Diaplacement vs Mileage&amp;#39;) +
  theme(plot.title = element_text(color = &amp;#39;blue&amp;#39;,
                                  family = &amp;#39;Arial&amp;#39;,
                                  face = &amp;#39;bold&amp;#39;,
                                  size = 8,
                                  hjust = 0.3))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, :
## font family not found in Windows font database

## Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, :
## font family not found in Windows font database

## Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, :
## font family not found in Windows font database&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2017-07-04-axis-plot-labels_files/figure-html/axis10-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;X axis label.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(mtcars) +
  geom_point(aes(disp, mpg)) +
  xlab(&amp;#39;Diaplacement&amp;#39;) +
  theme(axis.title.x = element_text(color = &amp;#39;blue&amp;#39;,
                                  family = &amp;#39;Arial&amp;#39;,
                                  face = &amp;#39;bold&amp;#39;,
                                  size = 8,
                                  hjust = 0.5,
                                  angle = 15))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, :
## font family not found in Windows font database

## Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, :
## font family not found in Windows font database

## Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, :
## font family not found in Windows font database&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x
## $y, : font family not found in Windows font database&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2017-07-04-axis-plot-labels_files/figure-html/axis11-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Y axis label.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(mtcars) +
  geom_point(aes(disp, mpg)) +
  ylab(&amp;#39;Miles Per Gallon&amp;#39;) +
  theme(axis.title.y = element_text(color = &amp;#39;blue&amp;#39;,
                                  family = &amp;#39;Arial&amp;#39;,
                                  face = &amp;#39;italic&amp;#39;,
                                  size = 8,
                                  vjust = 0.3,
                                  angle = 90))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, :
## font family not found in Windows font database

## Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, :
## font family not found in Windows font database

## Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, :
## font family not found in Windows font database&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x
## $y, : font family not found in Windows font database&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2017-07-04-axis-plot-labels_files/figure-html/axis12-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Guides</title>
      <link>/post/guides/</link>
      <pubDate>Tue, 04 Jul 2017 00:00:00 +0000</pubDate>
      
      <guid>/post/guides/</guid>
      <description>&lt;div id=&#34;introduction&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Introduction&lt;/h1&gt;
&lt;p&gt;This is the sixth post in the series &lt;strong&gt;Elegant Data Visualization with ggplot2&lt;/strong&gt;. In the previous &lt;a href=&#34;https://rsquaredacademy.github.io/blog/post/ggplot2-text-annotations/&#34;&gt;post&lt;/a&gt;, we learnt how to add text to a plot. In this post, we will learn how to modify guide/legend.&lt;/p&gt;
&lt;div id=&#34;guide&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Guide&lt;/h2&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(mtcars) +
  geom_bar(aes(factor(cyl), fill = factor(gear))) +
  scale_fill_discrete(guide = guide_legend(
    title = &amp;#39;gear&amp;#39;, title.position = &amp;#39;bottom&amp;#39;, title.hjust = 0.5,
    label.position = &amp;#39;top&amp;#39;, direction = &amp;#39;horizontal&amp;#39;, 
    label.hjust = 0.5, nrow = 3, reverse = TRUE))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2017-07-04-guides_files/figure-html/guides2-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Data Visualization with R - Font, Color &amp; Size</title>
      <link>/post/data-visualization-with-r-font-color-size/</link>
      <pubDate>Sat, 26 Dec 2015 00:00:00 +0000</pubDate>
      
      <guid>/post/data-visualization-with-r-font-color-size/</guid>
      <description>&lt;!-- BLOGDOWN-HEAD --&gt;
&lt;!-- /BLOGDOWN-HEAD --&gt;

&lt;!-- BLOGDOWN-BODY-BEFORE --&gt;
&lt;!-- /BLOGDOWN-BODY-BEFORE --&gt;

</description>
    </item>
    
    <item>
      <title>Data Visualization with R - Combining Plots</title>
      <link>/post/data-visualization-with-r-combining-plots/</link>
      <pubDate>Thu, 17 Dec 2015 00:00:00 +0000</pubDate>
      
      <guid>/post/data-visualization-with-r-combining-plots/</guid>
      <description>&lt;!-- BLOGDOWN-HEAD --&gt;
&lt;!-- /BLOGDOWN-HEAD --&gt;

&lt;!-- BLOGDOWN-BODY-BEFORE --&gt;
&lt;!-- /BLOGDOWN-BODY-BEFORE --&gt;
&lt;p&gt;This is the tenth post in the series &lt;strong&gt;Data Visualization With R&lt;/strong&gt;. In the previous post, we learnt how to add text annotations to plots. In this post, we will learn how to combine multiple plots.&lt;/p&gt;
&lt;div id=&#34;introduction&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Introduction&lt;/h3&gt;
&lt;p&gt;Often, it is useful to have multiple plots in the same frame as it allows us to get a comprehensive view of a particular variable or compare among different variables. Listed below are two methods to combine plots:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;par()&lt;/code&gt; function can be used to set graphical parameters regarding plot layout using the &lt;code&gt;mfcol&lt;/code&gt; and &lt;code&gt;mfrow&lt;/code&gt; arguments&lt;/li&gt;
&lt;li&gt;&lt;code&gt;layout()&lt;/code&gt; function serves the same purpose but offers more flexibility by allowing us to modify the height and width of rows and columns in which the plots are arranged&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Let us explore the &lt;code&gt;par()&lt;/code&gt; function first.&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Data Visualization with R - Text Annotations</title>
      <link>/post/data-visualization-with-r-text-annotations/</link>
      <pubDate>Tue, 08 Dec 2015 00:00:00 +0000</pubDate>
      
      <guid>/post/data-visualization-with-r-text-annotations/</guid>
      <description>&lt;p&gt;This is the ninth post in the series &lt;strong&gt;Data Visualization With R&lt;/strong&gt;. In the previous post, we learnt how to add legend to a plot. In this post, we will learn to add text annotations.&lt;/p&gt;
&lt;div id=&#34;introduction&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Introduction&lt;/h3&gt;
&lt;p&gt;There are occassions when you want to display additional information in a plot. This is usually achieved by adding text either inside the plot or on the margins. For example, you might want to label a line/bar or add formulas to better communicate what is shown in the plot. The idea is to use the available space within/outside the plot to provide additional information that can be useful to the end users.&lt;/p&gt;
&lt;p&gt;We will learn to add text inside as well as on the margins of the plot. This is accomplished using the following two functions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;text()&lt;/code&gt; : add text inside the plot&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mtext()&lt;/code&gt; : add text on the margins of the plot&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Let us take a quick look at the syntax of both the functions:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;text(x, y = NULL, labels = seq_along(x$x), adj = NULL,
     pos = NULL, offset = 0.5, vfont = NULL,
     cex = 1, col = NULL, font = NULL, ...)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;mtext(text, side = 3, line = 0, outer = FALSE, at = NA,
      adj = NA, padj = NA, cex = NA, col = NA, font = NA, ...)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We will first explore the &lt;code&gt;text()&lt;/code&gt; function and then move onto the &lt;code&gt;mtext()&lt;/code&gt; function.&lt;/p&gt;
&lt;div id=&#34;text-inside-the-plot&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Text Inside the Plot&lt;/h4&gt;
&lt;p&gt;To add text inside a plot, the following arguments must be supplied to the &lt;code&gt;text()&lt;/code&gt; function:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;labels&lt;/code&gt; : the text to be displayed&lt;/li&gt;
&lt;li&gt;&lt;code&gt;x&lt;/code&gt; : x axis coordinate&lt;/li&gt;
&lt;li&gt;&lt;code&gt;y&lt;/code&gt; : y axis coordinate&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Below is a simple example:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;plot(mtcars$disp, mtcars$mpg)
text(x = 340, y = 30, labels = &amp;#39;Sample Text&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2017-05-17-data-visualization-with-r-text-annotations_files/figure-html/text1-1.png&#34; width=&#34;480&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;The text appears at the coordinates (340, 30). Ensure that the text is enclosed in single/double quotes and the coordinates provided are within the range of the &lt;strong&gt;X&lt;/strong&gt; and &lt;strong&gt;Y&lt;/strong&gt; axis variables.&lt;/p&gt;
&lt;div id=&#34;color&#34; class=&#34;section level5&#34;&gt;
&lt;h5&gt;Color&lt;/h5&gt;
&lt;p&gt;The color of the text can be modified using the &lt;code&gt;col&lt;/code&gt; argument in the &lt;code&gt;text()&lt;/code&gt; function.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;plot(mtcars$disp, mtcars$mpg)
text(x = 340, y = 30, labels = &amp;#39;Sample Text&amp;#39;, col = &amp;#39;red&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2017-05-17-data-visualization-with-r-text-annotations_files/figure-html/text2-1.png&#34; width=&#34;480&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;The below plot depicts the appearance of the text for different values of the &lt;code&gt;col&lt;/code&gt; argument:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2017-05-17-data-visualization-with-r-text-annotations_files/figure-html/text3-1.png&#34; width=&#34;1440&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;font&#34; class=&#34;section level5&#34;&gt;
&lt;h5&gt;Font&lt;/h5&gt;
&lt;p&gt;The font of the text can be modified using the &lt;code&gt;font&lt;/code&gt; argument in the &lt;code&gt;text()&lt;/code&gt; function.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;plot(mtcars$disp, mtcars$mpg)
text(x = 340, y = 30, labels = &amp;#39;Sample Text&amp;#39;, col = &amp;#39;red&amp;#39;, font = 2)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2017-05-17-data-visualization-with-r-text-annotations_files/figure-html/text4-1.png&#34; width=&#34;480&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;The below plot depicts the appearance of the text for different values of the &lt;code&gt;font&lt;/code&gt; argument:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2017-05-17-data-visualization-with-r-text-annotations_files/figure-html/text5-1.png&#34; width=&#34;960&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;font-family&#34; class=&#34;section level5&#34;&gt;
&lt;h5&gt;Font Family&lt;/h5&gt;
&lt;p&gt;The font family of the text can be modified using the &lt;code&gt;family&lt;/code&gt; argument in the &lt;code&gt;text()&lt;/code&gt; function.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;plot(mtcars$disp, mtcars$mpg)
text(x = 340, y = 30, labels = &amp;#39;Sample Text&amp;#39;, col = &amp;#39;red&amp;#39;, family = &amp;#39;mono&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2017-05-17-data-visualization-with-r-text-annotations_files/figure-html/text6-1.png&#34; width=&#34;480&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;The below plot depicts the appearance of the text for different values of the &lt;code&gt;family&lt;/code&gt; argument:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;## Warning in text.default(x = 340, y = 30, labels = &amp;quot;Sample Text&amp;quot;, col =
## &amp;quot;red&amp;quot;, : font family not found in Windows font database&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2017-05-17-data-visualization-with-r-text-annotations_files/figure-html/text7-1.png&#34; width=&#34;1440&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;font-size&#34; class=&#34;section level5&#34;&gt;
&lt;h5&gt;Font Size&lt;/h5&gt;
&lt;p&gt;The font size of the text can be modified using the &lt;code&gt;cex&lt;/code&gt; argument in the &lt;code&gt;text()&lt;/code&gt; function.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;plot(mtcars$disp, mtcars$mpg)
text(x = 340, y = 30, labels = &amp;#39;Sample Text&amp;#39;, col = &amp;#39;red&amp;#39;, cex = 2)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2017-05-17-data-visualization-with-r-text-annotations_files/figure-html/text8-1.png&#34; width=&#34;480&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;The below plot depicts the appearance of the text for different values of the &lt;code&gt;cex&lt;/code&gt; argument:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2017-05-17-data-visualization-with-r-text-annotations_files/figure-html/text9-1.png&#34; width=&#34;1440&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;text-on-the-margins&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Text on the Margins&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;mtext()&lt;/code&gt; function allows the user to place the text on the margins of the plot. It allows the user to modify the location of the text in multiple ways and we will explore them one by one. To beign with, let us add text to the plot using the &lt;code&gt;mtext()&lt;/code&gt; function. The minimum input you need to provide is the text itself. Below is a simple example:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;plot(mtcars$disp, mtcars$mpg)
mtext(&amp;#39;Sample Text&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2017-05-17-data-visualization-with-r-text-annotations_files/figure-html/mtext1-1.png&#34; width=&#34;480&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;As you can see, the text is placed on the margin of the plot and not inside the plot. Next, we will specify the margin on which to place the text.&lt;/p&gt;
&lt;div id=&#34;specify-margin&#34; class=&#34;section level5&#34;&gt;
&lt;h5&gt;Specify Margin&lt;/h5&gt;
&lt;p&gt;Use the &lt;code&gt;side&lt;/code&gt; argument to specify the margin on which you want to place the text. If takes values 1 to 4, each representing one side of the plot.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;plot(mtcars$disp, mtcars$mpg)
mtext(&amp;#39;Sample Text&amp;#39;, side = 1)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2017-05-17-data-visualization-with-r-text-annotations_files/figure-html/mtext2-1.png&#34; width=&#34;480&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;The below plot displays the appearance of the text when differnt options for &lt;code&gt;side&lt;/code&gt; argument are supplied:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2017-05-17-data-visualization-with-r-text-annotations_files/figure-html/mtext3-1.png&#34; width=&#34;960&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;line&#34; class=&#34;section level5&#34;&gt;
&lt;h5&gt;Line&lt;/h5&gt;
&lt;p&gt;The &lt;code&gt;line&lt;/code&gt; argument places the text at a specified distance from the margin. The default value is &lt;code&gt;0&lt;/code&gt;. As the value increases, the text is placed farther from the margin and outside the plot. As the value decreases, the text is placed inside the plot and farther from the margin. Below is a example where the text is placed outside the plot as the value is greater than 1.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;plot(mtcars$disp, mtcars$mpg)
mtext(&amp;#39;Sample Text&amp;#39;, line = 1)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2017-05-17-data-visualization-with-r-text-annotations_files/figure-html/mtext4-1.png&#34; width=&#34;480&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;When the value is less than &lt;code&gt;0&lt;/code&gt;, the line argument places the text inside the plot.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;plot(mtcars$disp, mtcars$mpg)
mtext(&amp;#39;Sample Text&amp;#39;, line = -1)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2017-05-17-data-visualization-with-r-text-annotations_files/figure-html/mtext5-1.png&#34; width=&#34;480&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;The below plot displays the appearance of the text when different values are supplied to the &lt;code&gt;line&lt;/code&gt; argument:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2017-05-17-data-visualization-with-r-text-annotations_files/figure-html/mtext6-1.png&#34; width=&#34;1440&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;alignment&#34; class=&#34;section level5&#34;&gt;
&lt;h5&gt;Alignment&lt;/h5&gt;
&lt;p&gt;The &lt;code&gt;adj&lt;/code&gt; argument is used for horizontal alignment of the text. It takes values between 0 and 1. If set to &lt;code&gt;0&lt;/code&gt;, the text will be left aligned and at &lt;code&gt;1&lt;/code&gt;, it will be right aligned. Below is a example where the text is left aligned as &lt;code&gt;adj&lt;/code&gt; is set to &lt;code&gt;0&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;plot(mtcars$disp, mtcars$mpg)
mtext(&amp;#39;Sample Text&amp;#39;, adj = 0)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2017-05-17-data-visualization-with-r-text-annotations_files/figure-html/mtext7-1.png&#34; width=&#34;480&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;When the value is set to &lt;code&gt;1&lt;/code&gt;, the text is right aligned.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;plot(mtcars$disp, mtcars$mpg)
mtext(&amp;#39;Sample Text&amp;#39;, adj = 1)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2017-05-17-data-visualization-with-r-text-annotations_files/figure-html/mtext8-1.png&#34; width=&#34;480&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;The below plot displays the appearance of the text when different values are supplied to the &lt;code&gt;adj&lt;/code&gt; argument:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2017-05-17-data-visualization-with-r-text-annotations_files/figure-html/mtext9-1.png&#34; width=&#34;1440&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;summary&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Summary&lt;/h4&gt;
&lt;p&gt;In this post, we learnt how to add text annotations to a plot. Specifically, we learnt to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;add text inside the plot&lt;/li&gt;
&lt;li&gt;add text on the margins of the plot&lt;/li&gt;
&lt;li&gt;modify tehe color, font and size of the text&lt;/li&gt;
&lt;li&gt;modify the position of the text&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In the next post, we will learn how to combine multiple plots into a single frame.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Data Visualization with R - Legends</title>
      <link>/post/data-visualization-with-r-legends/</link>
      <pubDate>Wed, 25 Nov 2015 00:00:00 +0000</pubDate>
      
      <guid>/post/data-visualization-with-r-legends/</guid>
      <description>&lt;p&gt;This is the eighth post in the series &lt;strong&gt;Data Visualisation With R&lt;/strong&gt;. In the previous post, we learnt to build histograms. In this post, we will learn how to add a legend to a plot in R.&lt;/p&gt;
&lt;div id=&#34;introduction&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Legends are used to convey information about the data being represented by a plot. To understand the importance of legends, let us look at the two plots below. In the first plot, would you be able to understand what the lines represent in the absence of a legend? May be yes but only if the author provides information in a textual form outside the plot. While such information will be useful, it will also be very inconvenient. Now look at the second plot, from the legend at the top right we can easily interpret what the lines represent. Would you agree that a legend is integral to plot representing multiple data? If yes, let us go ahead and learn how to add a legend to different plots.&lt;/p&gt;
&lt;p&gt;Since we have looked at a line graph in the above example, we will learn how to add a legend to a line graph. After that, we will generalise the steps to different plots. If you do not know how to create line plots in R, please refer to this &lt;a href=&#34;https://rsquaredacademy.github.io/blog/post/data-visualization-with-r-line-graphs/&#34;&gt;post&lt;/a&gt;.&lt;/p&gt;
&lt;div id=&#34;line-graph&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Line Graph&lt;/h4&gt;
&lt;p&gt;Let us build a line graph that represents annual economic growth (GDP) data of the BRICS nations for the years 2010-14.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;year &amp;lt;- seq(2010, 2014, 1)
india &amp;lt;- c(10.3, 6.6, 5.6, 6.6, 7.2)
china &amp;lt;- c(10.6, 9.5, 7.8, 7.7, 7.3)
russia &amp;lt;- c(4.5, 4.3, 3.5, 1.3, 0.7)
brazil &amp;lt;- c(7.5, 3.9, 1.9, 3.0, 0.1)
s_africa &amp;lt;- c(3.2, 3.2, 2.2, 2.2, 1.5)
gdp &amp;lt;- data.frame(year, india, china, russia, brazil, s_africa, stringsAsFactors = FALSE)
gdp&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   year india china russia brazil s_africa
## 1 2010  10.3  10.6    4.5    7.5      3.2
## 2 2011   6.6   9.5    4.3    3.9      3.2
## 3 2012   5.6   7.8    3.5    1.9      2.2
## 4 2013   6.6   7.7    1.3    3.0      2.2
## 5 2014   7.2   7.3    0.7    0.1      1.5&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Below is the line graph that represents the above GDP data set:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2017-05-17-data-visualization-with-r-legends_files/figure-html/line1-1.png&#34; width=&#34;672&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Without a legend, it will be very difficult to map the lines to the BRICS nations. We will add a legend to the above plot using the &lt;code&gt;legend()&lt;/code&gt; function and do so one step at a time.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;legend&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Legend&lt;/h2&gt;
&lt;div id=&#34;location&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Location&lt;/h4&gt;
&lt;p&gt;In order to add a legend to the plot, the first thing we must specify is the location of the legend in the plot. There are 2 ways to do this:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;use x and y axis coordinates&lt;/li&gt;
&lt;li&gt;use keywords&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The list of keywords include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;top&lt;/li&gt;
&lt;li&gt;bottom&lt;/li&gt;
&lt;li&gt;left&lt;/li&gt;
&lt;li&gt;right&lt;/li&gt;
&lt;li&gt;center&lt;/li&gt;
&lt;li&gt;bottomright&lt;/li&gt;
&lt;li&gt;bottomleft&lt;/li&gt;
&lt;li&gt;topright&lt;/li&gt;
&lt;li&gt;topleft&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;But there is a glitch. If we do not specify what goes into the legend, the &lt;code&gt;legend()&lt;/code&gt; function will return an error. Before we experiment with the location of the legend inside the plot, we need to learn about another argument used to specify the content of the legend. The argument is also named &lt;code&gt;legend&lt;/code&gt;. It takes a vector as input. In the next example, we will plot the GDP data for India and China and add a basic legend.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;{plot(gdp$year, gdp$india, type = &amp;#39;l&amp;#39;,
      ylim = c(-5, 15), xlab = &amp;#39;Year&amp;#39;,
      ylab = &amp;#39;Growth Rate&amp;#39;, col = &amp;#39;blue&amp;#39;,
      main = &amp;#39;BRICS: Growth Rate&amp;#39;)
lines(gdp$year, gdp$china, col = &amp;#39;red&amp;#39;)
legend(x = 2013, y = 14, legend = c(&amp;#39;india&amp;#39;, &amp;#39;china&amp;#39;))}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2017-05-17-data-visualization-with-r-legends_files/figure-html/leg1-1.png&#34; width=&#34;480&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;You can see that a legend has been added bases on the X and Y axis coordinates we specified in the &lt;code&gt;legend()&lt;/code&gt; function. But the legend is incomplete and a user still cannot map the lines to the countries using the legend. We will learn how to add lines inside the legend shortly but before that let us use keywords to position the legend inside the plot.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2017-05-17-data-visualization-with-r-legends_files/figure-html/leg2-1.png&#34; width=&#34;1440&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;You can either use the keywords or the axis coordinates to position the legend inside the plot. Use the coordinates method if you want greater control over the position of the legend. Next step is to add lines inside the legend so that a user can map the lines in the plots to the countries.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;lines&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Lines&lt;/h4&gt;
&lt;p&gt;Adding a line in the legend is very simple. Use the &lt;code&gt;lty&lt;/code&gt; argument to specify the line type and the &lt;code&gt;col&lt;/code&gt; argument to add color to the line.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;{plot(gdp$year, gdp$india, type = &amp;#39;l&amp;#39;,
      ylim = c(-5, 15), xlab = &amp;#39;Year&amp;#39;,
      ylab = &amp;#39;Growth Rate&amp;#39;, col = &amp;#39;blue&amp;#39;,
      main = &amp;#39;BRICS: Growth Rate&amp;#39;)
lines(gdp$year, gdp$china, col = &amp;#39;red&amp;#39;)
legend(x = 2012, y = 14, legend = c(&amp;#39;india&amp;#39;, &amp;#39;china&amp;#39;),
       lty = 1, col = c(&amp;#39;blue&amp;#39;, &amp;#39;red&amp;#39;))}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2017-05-17-data-visualization-with-r-legends_files/figure-html/leg3-1.png&#34; width=&#34;480&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Now we can map the lines to the respective countries using the legend. But our legend looks very simple right. Let us explore the options available to modify and enhance the appearance of the legend.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;points&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Points&lt;/h4&gt;
&lt;p&gt;If the plot has both lines and points, we can use the &lt;code&gt;pch&lt;/code&gt; argument in the &lt;code&gt;legend()&lt;/code&gt; function to specify the shape of the point.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;{plot(gdp$year, gdp$india, type = &amp;#39;l&amp;#39;,
      ylim = c(-5, 15), xlab = &amp;#39;Year&amp;#39;,
      ylab = &amp;#39;Growth Rate&amp;#39;, col = &amp;#39;blue&amp;#39;,
      main = &amp;#39;BRICS: Growth Rate&amp;#39;)
points(gdp$year, gdp$india, pch = 2, col = &amp;#39;blue&amp;#39;)
lines(gdp$year, gdp$china, col = &amp;#39;red&amp;#39;)
points(gdp$year, gdp$china, pch = 2, col = &amp;#39;red&amp;#39;)
legend(x = 2012, y = 14, legend = c(&amp;#39;india&amp;#39;, &amp;#39;china&amp;#39;),
       lty = 1, pch = 2, col = c(&amp;#39;blue&amp;#39;, &amp;#39;red&amp;#39;))}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2017-05-17-data-visualization-with-r-legends_files/figure-html/leg4-1.png&#34; width=&#34;480&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;text-placement&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Text Placement&lt;/h4&gt;
&lt;p&gt;The contents of the legend can be positioned horizontally using the &lt;code&gt;horiz&lt;/code&gt; argument. It takes logical values as inputs and the default is &lt;code&gt;FALSE&lt;/code&gt;. Set it to &lt;code&gt;TRUE&lt;/code&gt; to position the contents horizontally:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;{plot(gdp$year, gdp$india, type = &amp;#39;l&amp;#39;,
      ylim = c(-5, 15), xlab = &amp;#39;Year&amp;#39;,
      ylab = &amp;#39;Growth Rate&amp;#39;, col = &amp;#39;blue&amp;#39;,
      main = &amp;#39;BRICS: Growth Rate&amp;#39;)
lines(gdp$year, gdp$china, col = &amp;#39;red&amp;#39;)
legend(x = 2011, y = 14, legend = c(&amp;#39;india&amp;#39;, &amp;#39;china&amp;#39;),
       lty = 1, col = c(&amp;#39;blue&amp;#39;, &amp;#39;red&amp;#39;),
       horiz = TRUE)}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2017-05-17-data-visualization-with-r-legends_files/figure-html/leg5-1.png&#34; width=&#34;480&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Another way to position the content inside the legend is to use columns. In the below example, we use the &lt;code&gt;ncol&lt;/code&gt; argument to split the contents of the legend into two columns instead of the default one.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2017-05-17-data-visualization-with-r-legends_files/figure-html/leg6-1.png&#34; width=&#34;672&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;The below plots show the difference in appearance:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2017-05-17-data-visualization-with-r-legends_files/figure-html/leg7-1.png&#34; width=&#34;1440&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;title&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Title&lt;/h4&gt;
&lt;p&gt;Let us add a title to the legend using the &lt;code&gt;title&lt;/code&gt; argument:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;{plot(gdp$year, gdp$india, type = &amp;#39;l&amp;#39;,
      ylim = c(-5, 15), xlab = &amp;#39;Year&amp;#39;,
      ylab = &amp;#39;Growth Rate&amp;#39;, col = &amp;#39;blue&amp;#39;,
      main = &amp;#39;BRICS: Growth Rate&amp;#39;)
lines(gdp$year, gdp$china, col = &amp;#39;red&amp;#39;)
legend(x = 2012, y = 14, legend = c(&amp;#39;india&amp;#39;, &amp;#39;china&amp;#39;),
       lty = 1, col = c(&amp;#39;blue&amp;#39;, &amp;#39;red&amp;#39;),
       title = &amp;#39;Nations&amp;#39;)}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2017-05-17-data-visualization-with-r-legends_files/figure-html/leg8-1.png&#34; width=&#34;480&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;The color of the title can be modified using the &lt;code&gt;title.col&lt;/code&gt; argument:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;{plot(gdp$year, gdp$india, type = &amp;#39;l&amp;#39;,
      ylim = c(-5, 15), xlab = &amp;#39;Year&amp;#39;,
      ylab = &amp;#39;Growth Rate&amp;#39;, col = &amp;#39;blue&amp;#39;,
      main = &amp;#39;BRICS: Growth Rate&amp;#39;)
lines(gdp$year, gdp$china, col = &amp;#39;red&amp;#39;)
legend(x = 2012, y = 14, legend = c(&amp;#39;india&amp;#39;, &amp;#39;china&amp;#39;),
       lty = 1, col = c(&amp;#39;blue&amp;#39;, &amp;#39;red&amp;#39;),
       title = &amp;#39;Nations&amp;#39;, title.col = &amp;#39;red&amp;#39;)}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2017-05-17-data-visualization-with-r-legends_files/figure-html/leg9-1.png&#34; width=&#34;480&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;The title can be positioned within the legend box using the &lt;code&gt;title.adj&lt;/code&gt; argument. It will take values between 0 and 1. The default is 0.5 and the title is positioned in the middle of the box. As the value moves away from 0.5, the position of the title moves to the left or right respectively.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;{plot(gdp$year, gdp$india, type = &amp;#39;l&amp;#39;,
      ylim = c(-5, 15), xlab = &amp;#39;Year&amp;#39;,
      ylab = &amp;#39;Growth Rate&amp;#39;, col = &amp;#39;blue&amp;#39;,
      main = &amp;#39;BRICS: Growth Rate&amp;#39;)
lines(gdp$year, gdp$china, col = &amp;#39;red&amp;#39;)
legend(x = 2012, y = 0, legend = c(&amp;#39;india&amp;#39;, &amp;#39;china&amp;#39;),
       lty = 1, col = c(&amp;#39;blue&amp;#39;, &amp;#39;red&amp;#39;), horiz = TRUE,
       title = &amp;#39;Nations&amp;#39;, title.adj = 0.1)}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2017-05-17-data-visualization-with-r-legends_files/figure-html/leg10-1.png&#34; width=&#34;672&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;The below plots show the relative position of the title within the legend box for different values between 0 and 1.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2017-05-17-data-visualization-with-r-legends_files/figure-html/leg11-1.png&#34; width=&#34;1440&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;box-appearance&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Box Appearance&lt;/h4&gt;
&lt;p&gt;There are a lot of options to modify the appearance of the legend box. The below table displays the arguments and their descriptions. Let us look at them one by one:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th align=&#34;left&#34;&gt;option&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;argument&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;values&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Box Type&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;bty&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;o, n&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Background Color&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;bg&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;blue, #0000ff&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Border Line Type&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;box.lty&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;1:5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Border Line Width&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;box.lwd&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;0.5, 1, 1.5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Border Line Color&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;box.col&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;blue, #0000ff&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Horizontal Justification&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;xjust&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;0:1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Vertical Justification&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;yjust&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;0:1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Text Color&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;text.col&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;blue, #0000ff&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Text Font&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;text.font&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;1:5&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div id=&#34;box-type&#34; class=&#34;section level5&#34;&gt;
&lt;h5&gt;Box Type&lt;/h5&gt;
&lt;p&gt;The &lt;code&gt;bty&lt;/code&gt; argument takes two values, &lt;code&gt;o&lt;/code&gt; and &lt;code&gt;n&lt;/code&gt;. If set to &lt;code&gt;n&lt;/code&gt;, there will be no box around the legend.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2017-05-17-data-visualization-with-r-legends_files/figure-html/leg12-1.png&#34; width=&#34;960&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;background-color&#34; class=&#34;section level5&#34;&gt;
&lt;h5&gt;Background Color&lt;/h5&gt;
&lt;p&gt;A background color can be added to the legend box using the &lt;code&gt;bg&lt;/code&gt; argument. Below is an example:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;{plot(gdp$year, gdp$india, type = &amp;#39;l&amp;#39;,
      ylim = c(-5, 15), xlab = &amp;#39;Year&amp;#39;,
      ylab = &amp;#39;Growth Rate&amp;#39;, col = &amp;#39;blue&amp;#39;,
      main = &amp;#39;BRICS: Growth Rate&amp;#39;)
lines(gdp$year, gdp$china, col = &amp;#39;red&amp;#39;)
legend(x = 2012, y = 0, legend = c(&amp;#39;india&amp;#39;, &amp;#39;china&amp;#39;),
       lty = 1, col = c(&amp;#39;blue&amp;#39;, &amp;#39;red&amp;#39;), bg = &amp;#39;#ffff66&amp;#39;,
       title = &amp;#39;Nations&amp;#39;)}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2017-05-17-data-visualization-with-r-legends_files/figure-html/leg13-1.png&#34; width=&#34;480&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;border&#34; class=&#34;section level5&#34;&gt;
&lt;h5&gt;Border&lt;/h5&gt;
&lt;p&gt;The following arguments can be used to modify the border of the legend box:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;box.lty&lt;/code&gt;: line type&lt;/li&gt;
&lt;li&gt;&lt;code&gt;box.lwd&lt;/code&gt;: line width&lt;/li&gt;
&lt;li&gt;&lt;code&gt;box.col&lt;/code&gt;: color&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;{plot(gdp$year, gdp$india, type = &amp;#39;l&amp;#39;,
      ylim = c(-5, 15), xlab = &amp;#39;Year&amp;#39;,
      ylab = &amp;#39;Growth Rate&amp;#39;, col = &amp;#39;blue&amp;#39;,
      main = &amp;#39;BRICS: Growth Rate&amp;#39;)
lines(gdp$year, gdp$china, col = &amp;#39;red&amp;#39;)
legend(x = 2012, y = 0, legend = c(&amp;#39;india&amp;#39;, &amp;#39;china&amp;#39;),
       lty = 1, col = c(&amp;#39;blue&amp;#39;, &amp;#39;red&amp;#39;), title = &amp;#39;Nations&amp;#39;,
       box.lty = 3, box.lwd = 1.5, box.col = &amp;#39;green&amp;#39;)}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2017-05-17-data-visualization-with-r-legends_files/figure-html/leg14-1.png&#34; width=&#34;480&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;justification&#34; class=&#34;section level5&#34;&gt;
&lt;h5&gt;Justification&lt;/h5&gt;
&lt;p&gt;The &lt;code&gt;xjust&lt;/code&gt; and &lt;code&gt;yjust&lt;/code&gt; arguments can be used to position the legend relative to the &lt;strong&gt;X&lt;/strong&gt; and &lt;strong&gt;Y&lt;/strong&gt; axis respectively. Listed below is the value and the respective justification:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;0&lt;/code&gt;: left justified&lt;/li&gt;
&lt;li&gt;&lt;code&gt;0.5&lt;/code&gt;: centered&lt;/li&gt;
&lt;li&gt;&lt;code&gt;1&lt;/code&gt;: right justified&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Let us look at a few examples to understand how it works.&lt;/p&gt;
&lt;div id=&#34;horizontal-justification&#34; class=&#34;section level6&#34;&gt;
&lt;h6&gt;Horizontal Justification&lt;/h6&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2017-05-17-data-visualization-with-r-legends_files/figure-html/leg15-1.png&#34; width=&#34;1440&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;vertical-justification&#34; class=&#34;section level6&#34;&gt;
&lt;h6&gt;Vertical Justification&lt;/h6&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2017-05-17-data-visualization-with-r-legends_files/figure-html/leg16-1.png&#34; width=&#34;1440&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;text-appearance&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Text Appearance&lt;/h4&gt;
&lt;p&gt;The last topic we will explore is the appearance of the text inside the legend box. We will modify the color and font of text using the &lt;code&gt;text.col&lt;/code&gt; and &lt;code&gt;text.font&lt;/code&gt; arguments.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;{plot(gdp$year, gdp$india, type = &amp;#39;l&amp;#39;,
      ylim = c(-5, 15), xlab = &amp;#39;Year&amp;#39;,
      ylab = &amp;#39;Growth Rate&amp;#39;, col = &amp;#39;blue&amp;#39;,
      main = &amp;#39;BRICS: Growth Rate&amp;#39;)
lines(gdp$year, gdp$china, col = &amp;#39;red&amp;#39;)
legend(x = 2012, y = 0, legend = c(&amp;#39;india&amp;#39;, &amp;#39;china&amp;#39;),
       lty = 1, col = c(&amp;#39;blue&amp;#39;, &amp;#39;red&amp;#39;), title = &amp;#39;Nations&amp;#39;,
       text.col = &amp;#39;green&amp;#39;, text.font = 3)}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2017-05-17-data-visualization-with-r-legends_files/figure-html/leg17-1.png&#34; width=&#34;480&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;summary&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Summary&lt;/h4&gt;
&lt;p&gt;In this post, we learnt to add legend to a plot using the &lt;code&gt;legend()&lt;/code&gt; function. Specifically, we learnt to&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;position the legend within the plot&lt;/li&gt;
&lt;li&gt;modify the layout using &lt;code&gt;ncol&lt;/code&gt; and &lt;code&gt;horiz&lt;/code&gt; arguments&lt;/li&gt;
&lt;li&gt;add title using the &lt;code&gt;title.&lt;/code&gt; set of arguments&lt;/li&gt;
&lt;li&gt;modify the appearance and position of the legend box&lt;/li&gt;
&lt;li&gt;modify the appearance of the text in the legend box&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In the next post, we will learn how to add text annotations to a plot using the &lt;code&gt;text()&lt;/code&gt; and &lt;code&gt;mtext()&lt;/code&gt; functions.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Data Visualization with R - Histogram</title>
      <link>/post/data-visualization-with-r-histogram/</link>
      <pubDate>Fri, 06 Nov 2015 00:00:00 +0000</pubDate>
      
      <guid>/post/data-visualization-with-r-histogram/</guid>
      <description>&lt;p&gt;This is the seventh post in the series &lt;strong&gt;Data Visualization With R&lt;/strong&gt;. In the previous post, we learnt about box and whisker plots. In this post, we will learn about histograms.&lt;/p&gt;
&lt;div id=&#34;introduction&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Introduction&lt;/h3&gt;
&lt;p&gt;A histogram is a plot that can be used to examine the shape and spread of continuous data. It looks very similar to a bar graph and can be used to detect outliers and skewness in data. The histogram graphically shows the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;center (location) of the data&lt;/li&gt;
&lt;li&gt;spread (dispersion) of the data&lt;/li&gt;
&lt;li&gt;skewness&lt;/li&gt;
&lt;li&gt;outliers&lt;/li&gt;
&lt;li&gt;presence of multiple modes&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To construct a histogram, the data is split into intervals called bins. The intervals may or may not be equal sized. For each bin, the number of data points that fall into it are counted (frequency). The Y axis of the histogram represents the frequency and the X axis represents the variable.&lt;/p&gt;
&lt;div id=&#34;distributions&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Distributions&lt;/h4&gt;
&lt;p&gt;Before we learn how to create histograms, let us see how normal and skewed distributions look when represented by a histogram.&lt;/p&gt;
&lt;div id=&#34;normal-distribution&#34; class=&#34;section level5&#34;&gt;
&lt;h5&gt;Normal Distribution&lt;/h5&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2017-05-17-data-visualization-with-r-histogram_files/figure-html/hist1-1.png&#34; width=&#34;480&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;skewed-distributions&#34; class=&#34;section level5&#34;&gt;
&lt;h5&gt;Skewed Distributions&lt;/h5&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2017-05-17-data-visualization-with-r-histogram_files/figure-html/hist2-1.png&#34; width=&#34;960&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;basics&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Basics&lt;/h3&gt;
&lt;p&gt;Histograms are created using the &lt;code&gt;hist()&lt;/code&gt; function in R. The minimum input required to create a bare bones histogram is a continuous variable. Below is an example:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2017-05-17-data-visualization-with-r-histogram_files/figure-html/hist3-1.png&#34; width=&#34;480&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;hist()&lt;/code&gt; functions returns details of the histogram which can be accessed by assigning the histogram to a variable. Let us assign the above histogram to a variable &lt;code&gt;h&lt;/code&gt; and use the &lt;code&gt;$&lt;/code&gt; symbol to access the details stored in the variable.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# store the results of hist function
h &amp;lt;- hist(mtcars$mpg)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2017-05-17-data-visualization-with-r-histogram_files/figure-html/hist4-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# display number of breaks
h$breaks&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 10 15 20 25 30 35&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# frequency of the intervals
h$counts&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1]  6 12  8  2  4&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# frequency density
h$density&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 0.0375 0.0750 0.0500 0.0125 0.0250&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# mid points of the intervals
h$mids&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 12.5 17.5 22.5 27.5 32.5&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# varible name
h$xname&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;mtcars$mpg&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# whether intervals are of equal size
h$equidist&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] TRUE&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;bins&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Bins&lt;/h4&gt;
&lt;p&gt;The &lt;code&gt;hist()&lt;/code&gt; function creates equidistant intervals by default. We can specify the number of bins using the &lt;code&gt;breaks&lt;/code&gt; argument.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2017-05-17-data-visualization-with-r-histogram_files/figure-html/hist5-1.png&#34; width=&#34;480&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;The below plot displays histograms with different number of bins:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2017-05-17-data-visualization-with-r-histogram_files/figure-html/hist6-1.png&#34; width=&#34;960&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;intervals&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Intervals&lt;/h4&gt;
&lt;p&gt;If we want to create histograms with specific intervals, the &lt;code&gt;breaks&lt;/code&gt; argument can be supplied with the intervals.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2017-05-17-data-visualization-with-r-histogram_files/figure-html/hist7-1.png&#34; width=&#34;480&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;If you observe the Y axis, it does not represent frequency any more. Instead, it represents the frequency density. What is frequency density?&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;frequency-density&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Frequency Density&lt;/h4&gt;
&lt;p&gt;Frequency Density = Relative Frequency / Class Width&lt;/p&gt;
&lt;p&gt;Relative Frequency = Frequency / Total Observations&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;h &amp;lt;- hist(mtcars$mpg, breaks = c(10, 18, 24, 30, 35))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2017-05-17-data-visualization-with-r-histogram_files/figure-html/hist8-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;frequency &amp;lt;- h$counts
class_width &amp;lt;- c(8, 6, 6, 5)
rel_freq &amp;lt;- frequency / length(mtcars$mpg)
freq_density &amp;lt;- rel_freq / class_width
d &amp;lt;- data.frame(frequency = frequency, class_width = class_width, relative_frequency = rel_freq, frequency_density = freq_density)
d&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   frequency class_width relative_frequency frequency_density
## 1        13           8            0.40625        0.05078125
## 2        12           6            0.37500        0.06250000
## 3         3           6            0.09375        0.01562500
## 4         4           5            0.12500        0.02500000&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When multiplied by the class width, the product will always sum upto 1.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;sum(d$frequency_density * d$class_width)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 1&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We will learn more about frequency density in a bit. Before we end this section, we need to learn about one more way to specify the intervals of the histogram, algorithms. The &lt;code&gt;hist()&lt;/code&gt; function allows us to specify the following algorithms:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Sturges (default)&lt;/li&gt;
&lt;li&gt;Scott&lt;/li&gt;
&lt;li&gt;Freedman-Diaconis (FD)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In the below plot, we examine how th algorithms work:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2017-05-17-data-visualization-with-r-histogram_files/figure-html/hist10-1.png&#34; width=&#34;1440&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;frequency-distribution-ii&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Frequency Distribution II&lt;/h4&gt;
&lt;p&gt;Let us come back to frequency density. If you want the Y axis of the histogram to represent frequency density instead of counts, set the &lt;code&gt;freq&lt;/code&gt; argument to &lt;code&gt;FALSE&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2017-05-17-data-visualization-with-r-histogram_files/figure-html/hist11-1.png&#34; width=&#34;960&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;The same result can be achieved by using the &lt;code&gt;probability&lt;/code&gt; argument as well. It takes only logical values as inputs and the default is &lt;code&gt;FALSE&lt;/code&gt;. If set to &lt;code&gt;TRUE&lt;/code&gt;, the Y axis will represent the frequency density instead of counts.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;hist(mtcars$mpg, probability = TRUE)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2017-05-17-data-visualization-with-r-histogram_files/figure-html/hist12-1.png&#34; width=&#34;480&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;color&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Color&lt;/h4&gt;
&lt;p&gt;To add colors to the bars of the histogram, use the &lt;code&gt;col&lt;/code&gt; argument. If the number of colors specified is less than the number of bars, the colors are recycled. Below are a few examples:&lt;/p&gt;
&lt;div id=&#34;single-color&#34; class=&#34;section level5&#34;&gt;
&lt;h5&gt;Single Color&lt;/h5&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2017-05-17-data-visualization-with-r-histogram_files/figure-html/hist13-1.png&#34; width=&#34;480&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;different-colors&#34; class=&#34;section level5&#34;&gt;
&lt;h5&gt;Different Colors&lt;/h5&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2017-05-17-data-visualization-with-r-histogram_files/figure-html/hist14-1.png&#34; width=&#34;480&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;recycled-colors&#34; class=&#34;section level5&#34;&gt;
&lt;h5&gt;Recycled Colors&lt;/h5&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2017-05-17-data-visualization-with-r-histogram_files/figure-html/hist15-1.png&#34; width=&#34;480&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;border-color&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Border Color&lt;/h4&gt;
&lt;p&gt;Colors can be specified for the borders of the histogrambars using the &lt;code&gt;border&lt;/code&gt; argument.&lt;/p&gt;
&lt;div id=&#34;different-colors-1&#34; class=&#34;section level5&#34;&gt;
&lt;h5&gt;Different Colors&lt;/h5&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2017-05-17-data-visualization-with-r-histogram_files/figure-html/hist16-1.png&#34; width=&#34;480&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;labels&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Labels&lt;/h4&gt;
&lt;p&gt;In certain cases, we might want to add the frequency counts on the histogram bars. It is easier for the user to know the frequencies of each bin when they are present on top of the bars. Let us add the frequency counts on top of the bars using the &lt;code&gt;labels&lt;/code&gt; argument. We can either set it to &lt;code&gt;TRUE&lt;/code&gt; or a character vector containing the label values. Let us look at both the methods.&lt;/p&gt;
&lt;div id=&#34;method-1&#34; class=&#34;section level5&#34;&gt;
&lt;h5&gt;Method 1&lt;/h5&gt;
&lt;p&gt;Set &lt;code&gt;labels&lt;/code&gt; to &lt;code&gt;TRUE&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2017-05-17-data-visualization-with-r-histogram_files/figure-html/hist17-1.png&#34; width=&#34;480&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;method-2&#34; class=&#34;section level5&#34;&gt;
&lt;h5&gt;Method 2&lt;/h5&gt;
&lt;p&gt;Specify the label values in a character vector.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2017-05-17-data-visualization-with-r-histogram_files/figure-html/hist18-1.png&#34; width=&#34;480&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Before we end this post, let us add a title and axis labels to the histogram. If you do not know how to add title and axis labels, refer to this &lt;a href=&#34;https://rsquaredacademy.github.io/blog/post/data-visualization-with-r-title-and-axis-labels/&#34;&gt;post&lt;/a&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;hist(mtcars$mpg, labels = TRUE, prob = TRUE,
     ylim = c(0, 0.1), xlab = &amp;#39;Miles Per Gallon&amp;#39;,
     main = &amp;#39;Distribution of Miles Per Gallon&amp;#39;,
     col = rainbow(5))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2017-05-17-data-visualization-with-r-histogram_files/figure-html/hist19-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;summary&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Summary&lt;/h3&gt;
&lt;p&gt;In this post, we learnt how to construct and use histograms to examine the underlying distribution of a continuous variable. Specifically, we learnt how to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;create a bare bones histogram&lt;/li&gt;
&lt;li&gt;specify the number of bins/intervals&lt;/li&gt;
&lt;li&gt;represent frequency density on the Y axis&lt;/li&gt;
&lt;li&gt;add colors to the bars and the border&lt;/li&gt;
&lt;li&gt;add labels to the bars&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In the next post, we will learn to add legend to plots.&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Data Visualization with R - Box Plots</title>
      <link>/post/data-visualization-with-r-box-plots/</link>
      <pubDate>Wed, 21 Oct 2015 00:00:00 +0000</pubDate>
      
      <guid>/post/data-visualization-with-r-box-plots/</guid>
      <description>&lt;p&gt;This is the sixth post in the series &lt;strong&gt;Data Visualization With R&lt;/strong&gt;. In the previous &lt;a href=&#34;&#34;&gt;post&lt;/a&gt;, we learnt how to build bar plots. In this post, we will learn about box plots.&lt;/p&gt;
&lt;div id=&#34;introduction&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;The box plot is a standardized way of displaying the distribution of data based on the five number summary: minimum, first quartile, median, third quartile, and maximum. Box plots are useful for detecting outliers and for comparing distributions. It shows the shape, central tendancy and variability of the data.&lt;/p&gt;
&lt;div id=&#34;structure&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Structure&lt;/h4&gt;
&lt;p&gt;A boxplot splits the data set into quartiles. The body of the boxplot consists of a “box” (hence, the name), which goes from the first quartile (Q1) to the third quartile (Q3). Within the box, a vertical line is drawn at the Q2, the median of the data set. Two horizontal lines, called whiskers, extend from the front and back of the box. The front whisker goes from Q1 to the smallest non-outlier in the data set, and the back whisker goes from Q3 to the largest non-outlier. If the data set includes one or more outliers, they are plotted separately as points on the chart.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;univariate-box-plot&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Univariate Box Plot&lt;/h3&gt;
&lt;div id=&#34;basic-plot&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Basic Plot&lt;/h4&gt;
&lt;p&gt;Let us begin by creating a basic box plot. We will use the &lt;code&gt;boxplot()&lt;/code&gt; function and specify the data.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;boxplot(mtcars$mpg)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2017-05-17-data-visualization-with-r-box-plots_files/figure-html/box1-1.png&#34; width=&#34;480&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;horizontal-box-plot&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Horizontal Box Plot&lt;/h4&gt;
&lt;p&gt;Use the &lt;code&gt;horizontal&lt;/code&gt; argument in the &lt;code&gt;boxplot()&lt;/code&gt; function to create a horizontal box plot.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;boxplot(mtcars$mpg, horizontal = TRUE)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2017-05-17-data-visualization-with-r-box-plots_files/figure-html/box2-1.png&#34; width=&#34;480&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;color&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Color&lt;/h4&gt;
&lt;p&gt;Let us add some color to the boxplot. Use the &lt;code&gt;col&lt;/code&gt; argument to specify a color for the plot.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;boxplot(mtcars$mpg, col = &amp;#39;blue&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2017-05-17-data-visualization-with-r-box-plots_files/figure-html/box3-1.png&#34; width=&#34;480&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;border-color&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Border Color&lt;/h4&gt;
&lt;p&gt;We can specify a separate color for the border of the box in the boxplot. To modify the border color, use the &lt;code&gt;border&lt;/code&gt; argument.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;boxplot(mtcars$mpg, border = &amp;#39;red&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2017-05-17-data-visualization-with-r-box-plots_files/figure-html/box4-1.png&#34; width=&#34;480&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;range&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Range&lt;/h4&gt;
&lt;p&gt;The &lt;code&gt;range&lt;/code&gt; argument determines how far the plot whiskers extend out from the box. If range is positive, the whiskers extend to the most extreme data point which is no more than range times the interquartile range from the box. A value of zero causes the whiskers to extend to the data extremes.&lt;/p&gt;
&lt;p&gt;Let us set the value of &lt;code&gt;range&lt;/code&gt; to 0 and observe the plot.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;boxplot(mtcars$mpg, range = 0)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2017-05-17-data-visualization-with-r-box-plots_files/figure-html/box5-1.png&#34; width=&#34;480&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;In the below plot, we set the value of &lt;code&gt;range&lt;/code&gt; to 1.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;boxplot(mtcars$mpg, range = 1)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2017-05-17-data-visualization-with-r-box-plots_files/figure-html/box6-1.png&#34; width=&#34;480&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Let us observe how the plot appears as we change the value of &lt;code&gt;range&lt;/code&gt; from 0 to 1.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2017-05-17-data-visualization-with-r-box-plots_files/figure-html/box7-1.png&#34; width=&#34;960&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;outline&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Outline&lt;/h4&gt;
&lt;p&gt;The outliers in the plot are not drawn if the &lt;code&gt;outline&lt;/code&gt; argument is set to &lt;code&gt;FALSE&lt;/code&gt;. The default value is &lt;code&gt;TRUE&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;boxplot(mtcars$mpg, range = 1, outline = FALSE)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2017-05-17-data-visualization-with-r-box-plots_files/figure-html/box8-1.png&#34; width=&#34;480&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;The below plot displays how the plot changes with the values set for &lt;code&gt;outline&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2017-05-17-data-visualization-with-r-box-plots_files/figure-html/box9-1.png&#34; width=&#34;960&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;varwidth&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Varwidth&lt;/h4&gt;
&lt;p&gt;If the &lt;code&gt;varwidth&lt;/code&gt; argument is set to &lt;code&gt;TRUE&lt;/code&gt;, the boxes are drawn with widths proportional to the square-roots of the number of observations in the groups.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2017-05-17-data-visualization-with-r-box-plots_files/figure-html/box10-1.png&#34; width=&#34;960&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;bivariatemultivariate-box-plot&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Bivariate/Multivariate Box Plot&lt;/h3&gt;
&lt;p&gt;As we said in the introduction, box plots can be used to compare distributions of several variables. Let us use the &lt;code&gt;mtcars&lt;/code&gt; data set and compare the distribution of Miles Per Gallon (&lt;code&gt;mpg&lt;/code&gt;) for automobiles with different number of cylinders (&lt;code&gt;cyl&lt;/code&gt;). We will do this by specifying a formula as shown in the below example.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;boxplot(mtcars$mpg ~ mtcars$cyl)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2017-05-17-data-visualization-with-r-box-plots_files/figure-html/box11-1.png&#34; width=&#34;480&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;We use the formula when we are comparing the distribution of a continuous variable across different levels of a categorical variable. If we want to compare the distributions without using a categorical variable, we need to specify the variable separately in the &lt;code&gt;boxplot()&lt;/code&gt; function. Below is an illustration of this method. We will split the &lt;code&gt;mpg&lt;/code&gt; data using the &lt;code&gt;split()&lt;/code&gt; function and plot them separately. The &lt;code&gt;split()&lt;/code&gt; function splits a continuous variable based on the levels of a categorical variable.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;mpg_split &amp;lt;- split(mtcars$mpg, mtcars$cyl)
mpg_split&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## $`4`
##  [1] 22.8 24.4 22.8 32.4 30.4 33.9 21.5 27.3 26.0 30.4 21.4
## 
## $`6`
## [1] 21.0 21.0 21.4 18.1 19.2 17.8 19.7
## 
## $`8`
##  [1] 18.7 14.3 16.4 17.3 15.2 10.4 10.4 14.7 15.5 15.2 13.3 19.2 15.8 15.0&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;mpg_4 &amp;lt;- mpg_split$`4`
mpg_6 &amp;lt;- mpg_split$`6`
mpg_8 &amp;lt;- mpg_split$`8`
boxplot(mpg_4, mpg_6, mpg_8)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2017-05-17-data-visualization-with-r-box-plots_files/figure-html/box13-1.png&#34; width=&#34;480&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;The same plot can be created in two ways. If you are comparing the distribution of a continuous variable for the different levels of a categorical variable, use the formula. If you are comparing distribution of independent variables, specify all the variablels in the &lt;code&gt;boxplot()&lt;/code&gt; function.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;color-1&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Color&lt;/h3&gt;
&lt;p&gt;Let us add some color to the plot. We can specify as many colors as the boxes or we can specify the same color for all of them. Below are two examples where we specify the same color in the first one and different colors in the second one.&lt;/p&gt;
&lt;div id=&#34;single-color&#34; class=&#34;section level5&#34;&gt;
&lt;h5&gt;Single Color&lt;/h5&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;boxplot(mtcars$mpg ~ mtcars$cyl, col = &amp;#39;blue&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2017-05-17-data-visualization-with-r-box-plots_files/figure-html/box14-1.png&#34; width=&#34;480&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;different-colors&#34; class=&#34;section level5&#34;&gt;
&lt;h5&gt;Different Colors&lt;/h5&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;boxplot(mtcars$mpg ~ mtcars$cyl, 
        col = c(&amp;#39;red&amp;#39;, &amp;#39;blue&amp;#39;, &amp;#39;yellow&amp;#39;))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2017-05-17-data-visualization-with-r-box-plots_files/figure-html/box15-1.png&#34; width=&#34;480&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;compare-medians&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Compare Medians&lt;/h3&gt;
&lt;p&gt;If we want to test whether the medians of the different groups differ, we can use the &lt;code&gt;notch&lt;/code&gt; argument and set it to &lt;code&gt;TRUE&lt;/code&gt;. A notch is drawn in each side of the boxes and if the notches of the plots do not overlap, it is strong evidence that the medians differ.&lt;/p&gt;
&lt;p&gt;We will use a different data set for this example. Download the &lt;code&gt;hsb2&lt;/code&gt; data from UCLA website and compare the distribution of reading score (&lt;code&gt;read&lt;/code&gt;) for males and females (&lt;code&gt;female&lt;/code&gt;).&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;hsb &amp;lt;- read.table(&amp;#39;https://stats.idre.ucla.edu/wp-content/uploads/2016/02/hsb2-2.csv&amp;#39;, header=T, sep=&amp;quot;,&amp;quot;)
boxplot(hsb$read ~ hsb$female, notch = TRUE, 
        col = c(&amp;#39;red&amp;#39;, &amp;#39;blue&amp;#39;))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2017-05-17-data-visualization-with-r-box-plots_files/figure-html/box16-1.png&#34; width=&#34;480&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Since the notches overlap, there is no strong evidence that the medians differ.&lt;/p&gt;
&lt;p&gt;We will end this post by adding a title and axis labels to the box plot. If you do not know how to add title and axis labels to a plot, please refer to this &lt;a href=&#34;https://rsquaredacademy.github.io/blog/post/data-visualization-with-r-title-and-axis-labels/&#34;&gt;post&lt;/a&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;boxplot(mtcars$mpg ~ mtcars$cyl, range = 1, outline = TRUE, 
        horizontal = TRUE, col = c(&amp;#39;red&amp;#39;, &amp;#39;blue&amp;#39;, &amp;#39;yellow&amp;#39;),
        main = &amp;#39;Miles Per Gallon by Cylinders&amp;#39;, 
        ylab = &amp;#39;Number of Cylinders&amp;#39;, xlab = &amp;#39;Miles Per Gallon&amp;#39;,
        names = c(&amp;#39;Four&amp;#39;, &amp;#39;Six&amp;#39;, &amp;#39;Eight&amp;#39;))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2017-05-17-data-visualization-with-r-box-plots_files/figure-html/box17-1.png&#34; width=&#34;480&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;summary&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Summary&lt;/h3&gt;
&lt;p&gt;In this post, we learnt how to create box plots. Specifically, we learnt to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;create univariate/multivariate box plots&lt;/li&gt;
&lt;li&gt;interpret box plots&lt;/li&gt;
&lt;li&gt;create horizontal box plots&lt;/li&gt;
&lt;li&gt;detect outliers&lt;/li&gt;
&lt;li&gt;modify box color&lt;/li&gt;
&lt;li&gt;use formula to compare distributions of different variables&lt;/li&gt;
&lt;li&gt;use notches to compare medians&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In the next post, we will learn about histograms.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Data Visualization With R - Bar Plots</title>
      <link>/post/data-visualization-with-r-bar-plots/</link>
      <pubDate>Mon, 05 Oct 2015 00:00:00 +0000</pubDate>
      
      <guid>/post/data-visualization-with-r-bar-plots/</guid>
      <description>&lt;div id=&#34;introduction&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;This is the fifth post in the series &lt;strong&gt;Data Visualization With R&lt;/strong&gt;. In the previous &lt;a href=&#34;&#34;&gt;post&lt;/a&gt; we learnt how to build line graphs. In this post, we will visualize categorical data using univariate and bivariate bar plots.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;bar-plot&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Bar Plot&lt;/h2&gt;
&lt;p&gt;A bar plot represents data in rectangular bars. The length of the bars are proportional to the values they represent. Bar plots can be either horizontal or vertical. The X axis of the plot represents the levels or the categories and the Y axis represents the frequency/count of the variable.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;univariate-bar-plot&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Univariate Bar Plot&lt;/h2&gt;
&lt;p&gt;A univariate bar plot represents a single categorical variable. The categories in the variable are represented on the X axis and their frequencies on the Y axis. In the below example, the &lt;code&gt;cyl&lt;/code&gt; variable from the &lt;code&gt;mtcars&lt;/code&gt; data set is visualized using a bar plot. The categories or levels are &lt;code&gt;4&lt;/code&gt;, &lt;code&gt;6&lt;/code&gt; and &lt;code&gt;8&lt;/code&gt; which represent the number of cylinders in the automobile and are represented on the X axis. The frequency for each type of cylinder is represented by the Y axis.&lt;/p&gt;
&lt;p&gt;In R, bar plots can be created using either the &lt;code&gt;plot()&lt;/code&gt; or &lt;code&gt;barplot()&lt;/code&gt; function. The input to both the functions are different. In case of the &lt;code&gt;plot()&lt;/code&gt; function, we can specify the variable but it must be converted to a factor variable. In case of the &lt;code&gt;barplot()&lt;/code&gt; function, the input must be the count or frequency of the variable. The &lt;code&gt;table()&lt;/code&gt; function can be used to generate the counts/frequency for a variable. Let us use both the functions to create the bar plot:&lt;/p&gt;
&lt;div id=&#34;using-plot-function&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Using plot function&lt;/h4&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;plot(as.factor(mtcars$cyl))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2017-05-17-data-visualization-with-r-bar-plots_files/figure-html/bar1-1.png&#34; width=&#34;480&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;using-barplot-function&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Using barplot function&lt;/h4&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;barplot(table(mtcars$cyl))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2017-05-17-data-visualization-with-r-bar-plots_files/figure-html/bar2-1.png&#34; width=&#34;480&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;If you observe carefully, the same plot is generated by both the functions. We will use the &lt;code&gt;barplot()&lt;/code&gt; function for the rest of the post. Before we explore the bar plots further, let us store the data in a new variable instead of using the &lt;code&gt;table()&lt;/code&gt; function in every example:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;cyl_freq &amp;lt;- table(mtcars$cyl)
cyl_freq&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
##  4  6  8 
## 11  7 14&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;horizontal-or-vertical&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Horizontal or Vertical&lt;/h4&gt;
&lt;p&gt;Bar plots can be horizontal or veritcal (which is the default). Use the &lt;code&gt;horiz&lt;/code&gt; argument in the &lt;code&gt;barplot()&lt;/code&gt; function to build a horizontal bar plot. As you can see, the axis have been flipped. The Y axis represents the categories and the X axis represents their counts/frequencies.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;barplot(cyl_freq, horiz = TRUE)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2017-05-17-data-visualization-with-r-bar-plots_files/figure-html/bar3-1.png&#34; width=&#34;480&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;bar-width&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Bar Width&lt;/h4&gt;
&lt;p&gt;In the bar plot, the width of the bars and the space between them are same. A specific category of the variable can be highlighted by increasing/decreasing the width of the bar representing it. In our example, we will increase the width of the bar that represents automobiles with 8 cylinders. The &lt;code&gt;width&lt;/code&gt; argument is used to specify the width of the bars. The width must be specified for all the bars in the plot. It must be a vector the length of which must be equal to the number of categories of the variable.&lt;/p&gt;
&lt;div id=&#34;equal-width&#34; class=&#34;section level5&#34;&gt;
&lt;h5&gt;Equal Width&lt;/h5&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;barplot(cyl_freq, width = 2)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2017-05-17-data-visualization-with-r-bar-plots_files/figure-html/bar4-1.png&#34; width=&#34;480&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;different-widths&#34; class=&#34;section level5&#34;&gt;
&lt;h5&gt;Different Widths&lt;/h5&gt;
&lt;p&gt;In the below example, the width of the third bar is twice the width of the other two bars&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;barplot(cyl_freq, width = c(1, 1, 2))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2017-05-17-data-visualization-with-r-bar-plots_files/figure-html/bar5-1.png&#34; width=&#34;480&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;In the below example, the width of the second bar is half the width of the other first bar and the third bar is twice the width of the first bar.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;barplot(cyl_freq, width = c(1, 0.5, 2))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2017-05-17-data-visualization-with-r-bar-plots_files/figure-html/bar6-1.png&#34; width=&#34;480&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;The space between the bars can be specified in a similar manner but using the &lt;code&gt;space&lt;/code&gt; argument in the &lt;code&gt;barplot()&lt;/code&gt; function:&lt;/p&gt;
&lt;p&gt;In the below example, the space between the third bar and the second bar is twice the space between first and second bar.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;barplot(cyl_freq, space = c(1, 1, 2))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2017-05-17-data-visualization-with-r-bar-plots_files/figure-html/bar7-1.png&#34; width=&#34;480&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;labels&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Labels&lt;/h4&gt;
&lt;p&gt;It is important to add appropriate labels to the bars in order to communicate properly. In our example, the bars represent automobiles with different number of cylinders. The labels likewise indicate the number of cylinders represented by the bars. In order to demonstrate how to add labels, we will change the labels from numbers to their corresponding words. The &lt;code&gt;names.arg&lt;/code&gt; argument is used to add labels to the bars in a plot. Below is our example:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;barplot(cyl_freq, names.arg = c(&amp;#39;Four&amp;#39;, &amp;#39;Six&amp;#39;, &amp;#39;Eight&amp;#39;))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2017-05-17-data-visualization-with-r-bar-plots_files/figure-html/bar8-1.png&#34; width=&#34;480&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;It is important to specify labels for all the bars in the plot else R will return an error.&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;color&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Color&lt;/h4&gt;
&lt;p&gt;Let us add some color to the plots. In a bar plot, we can specify different colors for the bars and their borders. Use the &lt;code&gt;col&lt;/code&gt; argument to add color to the bars.&lt;/p&gt;
&lt;div id=&#34;same-color-for-all-bars&#34; class=&#34;section level6&#34;&gt;
&lt;h6&gt;Same color for all bars&lt;/h6&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;barplot(cyl_freq, col = &amp;#39;blue&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2017-05-17-data-visualization-with-r-bar-plots_files/figure-html/bar9-1.png&#34; width=&#34;480&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;differnt-color-for-the-bars&#34; class=&#34;section level6&#34;&gt;
&lt;h6&gt;Differnt color for the bars&lt;/h6&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;barplot(cyl_freq, col = c(&amp;#39;blue&amp;#39;, &amp;#39;red&amp;#39;, &amp;#39;green&amp;#39;))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2017-05-17-data-visualization-with-r-bar-plots_files/figure-html/bar10-1.png&#34; width=&#34;480&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;What happens if we do not specify color for all the bars? The colors you specify are recycled.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;recycling-colors&#34; class=&#34;section level6&#34;&gt;
&lt;h6&gt;Recycling colors&lt;/h6&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;barplot(cyl_freq, col = c(&amp;#39;blue&amp;#39;, &amp;#39;red&amp;#39;))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2017-05-17-data-visualization-with-r-bar-plots_files/figure-html/bar11-1.png&#34; width=&#34;480&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;border&lt;/code&gt; argument specifies the color of the border of the bars. The rules that apply to &lt;code&gt;col&lt;/code&gt; argument apply here also. Below are the examples:&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;same-color-for-all-bars-1&#34; class=&#34;section level6&#34;&gt;
&lt;h6&gt;Same color for all bars&lt;/h6&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;barplot(cyl_freq, border = &amp;#39;blue&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2017-05-17-data-visualization-with-r-bar-plots_files/figure-html/bar12-1.png&#34; width=&#34;480&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;differnt-color-for-the-bars-1&#34; class=&#34;section level6&#34;&gt;
&lt;h6&gt;Differnt color for the bars&lt;/h6&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;barplot(cyl_freq, border = c(&amp;#39;blue&amp;#39;, &amp;#39;red&amp;#39;, &amp;#39;green&amp;#39;))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2017-05-17-data-visualization-with-r-bar-plots_files/figure-html/bar13-1.png&#34; width=&#34;480&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;What happens if we do not specify color for all the bars? The colors you specify are recycled.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;recycling-colors-1&#34; class=&#34;section level6&#34;&gt;
&lt;h6&gt;Recycling colors&lt;/h6&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;barplot(cyl_freq, border = c(&amp;#39;blue&amp;#39;, &amp;#39;red&amp;#39;))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2017-05-17-data-visualization-with-r-bar-plots_files/figure-html/bar14-1.png&#34; width=&#34;480&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;axes&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Axes&lt;/h4&gt;
&lt;p&gt;In this section, we will learn to&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;remove axes from the plot&lt;/li&gt;
&lt;li&gt;specify the line type of the X axes&lt;/li&gt;
&lt;li&gt;offset the Y axes&lt;/li&gt;
&lt;/ul&gt;
&lt;div id=&#34;remove-axes&#34; class=&#34;section level6&#34;&gt;
&lt;h6&gt;Remove axes&lt;/h6&gt;
&lt;p&gt;The &lt;code&gt;axes&lt;/code&gt; argument can be used to retain/remove the axes from the plot. It takes logical values as input and the default is &lt;code&gt;TRUE&lt;/code&gt;. Set it to &lt;code&gt;FALSE&lt;/code&gt; to remove the axes from the plot:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;barplot(cyl_freq, axes = FALSE)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2017-05-17-data-visualization-with-r-bar-plots_files/figure-html/bar15-1.png&#34; width=&#34;480&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;If we decide to retain the axes, the line type of the X axes can be specified using the &lt;code&gt;axis.lty&lt;/code&gt; argument. It does not modify the line type of the Y axes and it will not work if the &lt;code&gt;axes&lt;/code&gt; argument is set to &lt;code&gt;FALSE&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;barplot(cyl_freq, axis.lty = 3)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2017-05-17-data-visualization-with-r-bar-plots_files/figure-html/bar16-1.png&#34; width=&#34;480&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Though we cannot modify the line type of the Y axes, we can offset it using the &lt;code&gt;offset&lt;/code&gt; argument. In the below example, we will offset the Y axes and you can observe that the minimum value of the Y axes is now 5 instead of 0.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;barplot(cyl_freq, offset = 5)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2017-05-17-data-visualization-with-r-bar-plots_files/figure-html/bar17-1.png&#34; width=&#34;480&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;You can similarly modify the range of the Y axes using the &lt;code&gt;ylim&lt;/code&gt; argument. Although in case of bar plots, modifying the range of the plot may not be very useful.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;barplot(cyl_freq, ylim = c(0, 30))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2017-05-17-data-visualization-with-r-bar-plots_files/figure-html/bar18-1.png&#34; width=&#34;480&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Let us quickly revise what we have learnt so far in this post and build a bar plot for visualizing the &lt;code&gt;cyl&lt;/code&gt; variable in the &lt;code&gt;mtcars&lt;/code&gt; data set:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;barplot(cyl_freq, col = c(&amp;#39;blue&amp;#39;, &amp;#39;red&amp;#39;, &amp;#39;green&amp;#39;),
        horiz = TRUE, width = c(1, 1, 2),
        names.arg = c(&amp;#39;Four&amp;#39;, &amp;#39;Six&amp;#39;, &amp;#39;Eight&amp;#39;),
        axis.lty = 2, offset = 2)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2017-05-17-data-visualization-with-r-bar-plots_files/figure-html/bar19-1.png&#34; width=&#34;480&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Well the plot looks good but for someone who does not know the underlying data, it will diffficult to understand what is being communicated. Let us add a title and labels for the axes.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;barplot(cyl_freq, col = c(&amp;#39;blue&amp;#39;, &amp;#39;red&amp;#39;, &amp;#39;green&amp;#39;),
        horiz = TRUE, width = c(1, 1, 2),
        names.arg = c(&amp;#39;Four&amp;#39;, &amp;#39;Six&amp;#39;, &amp;#39;Eight&amp;#39;),
        axis.lty = 2, offset = 2)
title(main = &amp;#39;Distribution of Cylinders&amp;#39;,
      xlab = &amp;#39;Frequency&amp;#39;, ylab = &amp;#39;Number of Cylinders&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2017-05-17-data-visualization-with-r-bar-plots_files/figure-html/bar20-1.png&#34; width=&#34;480&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;bivariate-bar-plots&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Bivariate Bar Plots&lt;/h2&gt;
&lt;p&gt;A bivariate bar plot represents the cross table or two way table of categorical variables. They are of two types:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Stacked Bar Plots&lt;/li&gt;
&lt;li&gt;Grouped Bar Plots&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Before we look at bivariate bar plots, let us create a two way table of &lt;code&gt;cyl&lt;/code&gt; (number of cylinders) and &lt;code&gt;gear&lt;/code&gt; (number of gears) using the &lt;code&gt;table()&lt;/code&gt; function:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;table(mtcars$gear)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
##  3  4  5 
## 15 12  5&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;cyl_gear &amp;lt;- table(mtcars$cyl, mtcars$gear)
cyl_gear&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    
##      3  4  5
##   4  1  8  2
##   6  2  4  1
##   8 12  0  2&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The number of gears is represented by the columns in the table and the numbe rof cylinders is represented by the rows.&lt;/p&gt;
&lt;div id=&#34;stacked-bar-plot&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Stacked Bar Plot&lt;/h4&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;barplot(cyl_gear)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2017-05-17-data-visualization-with-r-bar-plots_files/figure-html/bar21-1.png&#34; width=&#34;480&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;The bars in the plot represent the distribution of &lt;code&gt;cyl&lt;/code&gt; for each level of category of the &lt;code&gt;gear&lt;/code&gt; variable. The first bar represents the distribution of cylinders for automobiles with 3 gears. From the two way table we saw earlier, the columns are the bars. The rows are represented by different sections of the bar. Let us add some colors to the plot as the default colors of the plot are not very intuitive. It will also allow us to clearly examine the distribution of &lt;code&gt;cyl&lt;/code&gt; for the different levels of &lt;code&gt;gear&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;barplot(cyl_gear, col = c(&amp;#39;blue&amp;#39;, &amp;#39;red&amp;#39;, &amp;#39;green&amp;#39;))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2017-05-17-data-visualization-with-r-bar-plots_files/figure-html/bar22-1.png&#34; width=&#34;480&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;If you carefully observe the table and the plot:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the blue sections of the bars represent the number of automobiles with 3 gears and 4 cylinders&lt;/li&gt;
&lt;li&gt;the red sections represent the number of automobiles with 4 gears and 6 cylinders&lt;/li&gt;
&lt;li&gt;the green sections represent the number of automobiles with 5 gears and 8 cylinders&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We need to convey the above information in some way and will do that using the &lt;code&gt;legend.text&lt;/code&gt; argument. It takes logical values as inputs and the default values is &lt;code&gt;FALSE&lt;/code&gt;. It adds a legend to the plot when it is set to &lt;code&gt;TRUE&lt;/code&gt;. In the next example, we add a legend as well as other relevant information such as title and axis labels.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;barplot(cyl_gear, col = c(&amp;#39;blue&amp;#39;, &amp;#39;red&amp;#39;, &amp;#39;green&amp;#39;),
        main = &amp;#39;Gears vs Cylinders&amp;#39;, legend.text = TRUE,
        xlab = &amp;#39;Number of Gears&amp;#39;, ylab = &amp;#39;Frequency&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2017-05-17-data-visualization-with-r-bar-plots_files/figure-html/bar23-1.png&#34; width=&#34;480&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;grouped-bar-plot&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Grouped Bar Plot&lt;/h4&gt;
&lt;p&gt;A grouped bar plot represents the same data as the stacked bar plot but instead of being stacked, the bars are now grouped and placed besides each other.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;barplot(cyl_gear, col = c(&amp;#39;blue&amp;#39;, &amp;#39;red&amp;#39;, &amp;#39;green&amp;#39;),
        beside = TRUE, legend.text = TRUE,
        main = &amp;#39;Gears vs Cylinders&amp;#39;,
        xlab = &amp;#39;Number of Gears&amp;#39;, ylab = &amp;#39;Frequency&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2017-05-17-data-visualization-with-r-bar-plots_files/figure-html/bar24-1.png&#34; width=&#34;480&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;beside&lt;/code&gt; argument in &lt;code&gt;barplot()&lt;/code&gt; function is set to &lt;code&gt;TRUE&lt;/code&gt; to build grouped bar plots. It takes logical values as inputs and the default values is FALSE. As you can observe from the plot, the bars are placed besides each other instead of being stacked.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;summary&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Summary&lt;/h2&gt;
&lt;p&gt;In this post, we learnt how to build&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;univariate bar plots&lt;/li&gt;
&lt;li&gt;bivariate bar plots&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;and explored various arguments within the &lt;code&gt;barplot()&lt;/code&gt; function such as&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;horiz&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;col&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;border&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;space&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;width&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;names.arg&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;offset&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;legend.text&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;to modify and enhance the appearance of the plot. In the next post, we will learn how to build box plots.&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Data Visualization With R - Line Graphs</title>
      <link>/post/data-visualization-with-r-line-graphs/</link>
      <pubDate>Wed, 23 Sep 2015 00:00:00 +0000</pubDate>
      
      <guid>/post/data-visualization-with-r-line-graphs/</guid>
      <description>&lt;div id=&#34;introduction&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Introduction&lt;/h3&gt;
&lt;p&gt;This is the fourth post in the series &lt;strong&gt;Data Visualization With R&lt;/strong&gt;. In the previous &lt;a href=&#34;https://rsquaredacademy.github.io/post/data-visualization-with-r-scatter-plots/&#34;&gt;post&lt;/a&gt;, we learnt how to build scatter plots. In this post, we will build line graphs. To be more specific we will learn to&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;create line plots&lt;/li&gt;
&lt;li&gt;add color to lines&lt;/li&gt;
&lt;li&gt;modify line type/style&lt;/li&gt;
&lt;li&gt;modify line width&lt;/li&gt;
&lt;li&gt;add points to the lines&lt;/li&gt;
&lt;li&gt;modify axis range&lt;/li&gt;
&lt;li&gt;add additional lines to the plot&lt;/li&gt;
&lt;/ul&gt;
&lt;div id=&#34;line-graph&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Line Graph&lt;/h4&gt;
&lt;p&gt;To build a line graph, we will learn a new argument in the &lt;code&gt;plot()&lt;/code&gt; function called &lt;code&gt;type&lt;/code&gt;. It allows us to specify the symbol that must be used to represent the data. Let us begin by building a simple line graph. We will use the &lt;code&gt;AirPassengers&lt;/code&gt; data set in this post. Before we begin to build the plot, let us take a quick look at the data in order to understand what we are plotting.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;head(AirPassengers)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 112 118 132 129 121 135&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In order to build a line plot, we will set the &lt;code&gt;type&lt;/code&gt; argument in the &lt;code&gt;plot()&lt;/code&gt; function to &lt;strong&gt;l&lt;/strong&gt; (line). There are other values which &lt;code&gt;type&lt;/code&gt; takes but we will explore them later.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;data &amp;lt;- head(AirPassengers)
plot(data, type = &amp;#39;l&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2017-05-16-data-visualization-with-r-line-graphs_files/figure-html/line1-1.png&#34; width=&#34;480&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;If you do not like plain lines, you can represent the data using lines interspersed with points by setting the &lt;code&gt;type&lt;/code&gt; argument to &lt;strong&gt;b&lt;/strong&gt; (both lines and points).&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;plot(data, type = &amp;#39;b&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2017-05-16-data-visualization-with-r-line-graphs_files/figure-html/line2-1.png&#34; width=&#34;480&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Another option is to have the points and lines overplotted. It can be achieved by setting the &lt;code&gt;type&lt;/code&gt; argument to &lt;strong&gt;o&lt;/strong&gt; (overplotted).&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;plot(data, type = &amp;#39;o&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2017-05-16-data-visualization-with-r-line-graphs_files/figure-html/line3-1.png&#34; width=&#34;480&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;You can also create lines without points but with breaks instead by setting the &lt;code&gt;type&lt;/code&gt; argument to &lt;strong&gt;c&lt;/strong&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;plot(data, type = &amp;#39;c&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2017-05-16-data-visualization-with-r-line-graphs_files/figure-html/line4-1.png&#34; width=&#34;480&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;color&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Color&lt;/h4&gt;
&lt;p&gt;So now we know how to build a simple line graph. Let us now make this plot more elegant by modifying its appearance. Let us begin by adding some color to the line using the &lt;code&gt;col&lt;/code&gt; argument in the &lt;code&gt;plot()&lt;/code&gt; function.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;plot(data, type = &amp;#39;l&amp;#39;, col = &amp;#39;blue&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2017-05-16-data-visualization-with-r-line-graphs_files/figure-html/line5-1.png&#34; width=&#34;480&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;If you have points along with the line, they will have the same color as well.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;plot(data, type = &amp;#39;b&amp;#39;, col = &amp;#39;blue&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2017-05-16-data-visualization-with-r-line-graphs_files/figure-html/line6-1.png&#34; width=&#34;480&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;line-type&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Line Type&lt;/h4&gt;
&lt;p&gt;The line type can be modified using the &lt;code&gt;lty&lt;/code&gt; argument. It takes values from 1 to 6 and the default value is 1. Below is an example:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;plot(data, type = &amp;#39;l&amp;#39;, lty = 3)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2017-05-16-data-visualization-with-r-line-graphs_files/figure-html/line9-1.png&#34; width=&#34;480&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1:solid&lt;/li&gt;
&lt;li&gt;2:dashed&lt;/li&gt;
&lt;li&gt;3:dotted&lt;/li&gt;
&lt;li&gt;4:dotdash&lt;/li&gt;
&lt;li&gt;5:longdash&lt;/li&gt;
&lt;li&gt;6:twodash&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Let us look at all the line types in the below example:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2017-05-16-data-visualization-with-r-line-graphs_files/figure-html/lin7-1.png&#34; width=&#34;960&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Instead of specifying the numbers 1:6, you can use their description as well.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2017-05-16-data-visualization-with-r-line-graphs_files/figure-html/lin8-1.png&#34; width=&#34;960&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;line-width&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Line Width&lt;/h4&gt;
&lt;p&gt;The width of the lines can be modified using the &lt;code&gt;lwd&lt;/code&gt; argument in the &lt;code&gt;plot()&lt;/code&gt; function. The default value for width is 1.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;plot(data, type = &amp;#39;l&amp;#39;, lwd = 2.5)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2017-05-16-data-visualization-with-r-line-graphs_files/figure-html/line10-1.png&#34; width=&#34;480&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;In the below example, we look at the width of the lines relative to the default value.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2017-05-16-data-visualization-with-r-line-graphs_files/figure-html/lin11-1.png&#34; width=&#34;960&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;enhance-points&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Enhance Points&lt;/h4&gt;
&lt;p&gt;We can enhance the points in the line plot in the same way as we enhanced the points in the scatter plot in this previous &lt;a href=&#34;https://rsquaredacademy.github.io/post/data-visualization-with-r-scatter-plots/&#34;&gt;post&lt;/a&gt;. Let us look at an example:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;plot(data, type = &amp;#39;b&amp;#39;, pch = 23, col = &amp;#39;red&amp;#39;, cex = 1.5)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2017-05-16-data-visualization-with-r-line-graphs_files/figure-html/line12-1.png&#34; width=&#34;480&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;We have used the &lt;code&gt;pch&lt;/code&gt;, &lt;code&gt;col&lt;/code&gt; and &lt;code&gt;cex&lt;/code&gt; arguments to modify the shape, color and size of the points. One drawback of the above method is that the color of the line and the points will be the same. What if we want them to have different colors? The solution is as follows:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;build the line graph using the &lt;code&gt;plot()&lt;/code&gt; function&lt;/li&gt;
&lt;li&gt;add the points to the above plot using the &lt;code&gt;points()&lt;/code&gt; function&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In the next example, let us first build the line plot, add points using the &lt;code&gt;points()&lt;/code&gt; function and then specify separate colors to the line and the points.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;plot(data, type = &amp;#39;l&amp;#39;, col = &amp;#39;red&amp;#39;)
points(data, pch = 23, col = &amp;#39;blue&amp;#39;, bg = &amp;#39;green&amp;#39;, cex = 1.5)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2017-05-16-data-visualization-with-r-line-graphs_files/figure-html/line13-1.png&#34; width=&#34;480&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;additional-lines&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Additional Lines&lt;/h4&gt;
&lt;p&gt;If you want to compare variables, you would want to add additional lines to the line graph. In R, this can be achieved using the &lt;code&gt;lines()&lt;/code&gt; function. First we create the line plot using the base variable and then we can add as many lines as we want using the &lt;code&gt;lines()&lt;/code&gt; function.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Before you add additional lines, it is important to ensure that the range of both the axis are modified to accommodate the data of the additional lines. If we do not modify the axis range, some of the lines will be outside the plot.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Let us now create a line plot and add an additional line using the &lt;code&gt;lines()&lt;/code&gt; function.We will use some dummy data for this example:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;data1 &amp;lt;- c(7.2, 7.6, 6.8, 6.5, 7)
data2 &amp;lt;- c(6.8, 7.2, 7.8, 7, 6.2)
plot(data1, type = &amp;quot;b&amp;quot;, col = &amp;quot;blue&amp;quot;)
lines(data2, type = &amp;quot;b&amp;quot;, col = &amp;quot;red&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2017-05-16-data-visualization-with-r-line-graphs_files/figure-html/line14-1.png&#34; width=&#34;480&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;As you can see the second line is outside the plot. Let us recreate the plot but this time we will modify the range of the axis to accommodate the second line (data2).&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;plot(data1, type = &amp;quot;b&amp;quot;, col = &amp;quot;blue&amp;quot;, ylim = c(5, 9))
lines(data2, type = &amp;quot;b&amp;quot;, col = &amp;quot;red&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2017-05-16-data-visualization-with-r-line-graphs_files/figure-html/line15-1.png&#34; width=&#34;480&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Finally let us enhance the plot by adding a title and modifying the axis labels which we learnt in this first &lt;a href=&#34;https://rsquaredacademy.github.io/post/data-visualization-with-r-title-and-axis-labels/&#34;&gt;post&lt;/a&gt; of the series.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;plot(data1, type = &amp;quot;b&amp;quot;, col = &amp;quot;blue&amp;quot;, 
     ylim = c(5, 9), main = &amp;#39;Line Graph&amp;#39;,
     xlab = &amp;#39;Index&amp;#39;, ylab = &amp;#39;Data&amp;#39;)
lines(data2, type = &amp;quot;b&amp;quot;, col = &amp;quot;red&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2017-05-16-data-visualization-with-r-line-graphs_files/figure-html/line16-1.png&#34; width=&#34;480&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;summary&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Summary&lt;/h3&gt;
&lt;p&gt;In this post, we learnt how to&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;create line plots&lt;/li&gt;
&lt;li&gt;modify appearance of the line&lt;/li&gt;
&lt;li&gt;add points to the line plot&lt;/li&gt;
&lt;li&gt;add additional lines&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In the next post, we will learn how to build bar plots which are used to visualize a single categorical data or the relationship between two categorical variables.&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Data Visualization With R - Scatter Plots</title>
      <link>/post/data-visualization-with-r-scatter-plots/</link>
      <pubDate>Mon, 07 Sep 2015 00:00:00 +0000</pubDate>
      
      <guid>/post/data-visualization-with-r-scatter-plots/</guid>
      <description>&lt;div id=&#34;introduction&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;This is the third post in the series &lt;strong&gt;Data Visualization With R&lt;/strong&gt;. In the previous &lt;a href=&#34;https://rsquaredacademy.github.io/post/data-visualization-with-r-title-and-axis-labels/&#34;&gt;post&lt;/a&gt;, we learned how to add title, subtitle and axis labels. We also learned how to modify the range of the axis. In this post, we will learn how to create scatter plots. If you remember, we had created a scatter plot in this &lt;a href=&#34;https://rsquaredacademy.github.io/post/data-visualization-with-r-introduction/&#34;&gt;post&lt;/a&gt;, using the &lt;code&gt;plot()&lt;/code&gt; function. We will continue with the same plot and learn how to enhance a scatter plot by&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;adding color to the points&lt;/li&gt;
&lt;li&gt;modify shape of the points&lt;/li&gt;
&lt;li&gt;modify size of the points&lt;/li&gt;
&lt;/ul&gt;
&lt;div id=&#34;basic-plot&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Basic Plot&lt;/h3&gt;
&lt;p&gt;Let us recreate the plot that we had created in the first post by using the &lt;code&gt;mtcars&lt;/code&gt; data set. We will use the &lt;code&gt;disp&lt;/code&gt; (displacement) and &lt;code&gt;mpg&lt;/code&gt; (miles per gallon) variables. &lt;code&gt;disp&lt;/code&gt; will be on the X axis and &lt;code&gt;mpg&lt;/code&gt; will be on the Y axis.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;plot(mtcars$disp, mtcars$mpg)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2017-05-15-data-visualization-with-r-scatter-plots_files/figure-html/scatter1-1.png&#34; width=&#34;480&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;We have created a very basic plot and any one looking at it for the first time will get confused with the axis labels &lt;code&gt;mtcars$disp&lt;/code&gt; and &lt;code&gt;mtcars$mpg&lt;/code&gt;. Let us put into practice what we learnt in the second &lt;a href=&#34;https://rsquaredacademy.github.io/post/data-visualization-with-r-title-and-axis-labels/&#34;&gt;post&lt;/a&gt; and add a title to the plot, and make the axis labels more meaningful.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;plot(mtcars$disp, mtcars$mpg,
     main = &amp;#39;Displacement vs Miles Per Gallon&amp;#39;,
     xlab = &amp;#39;Displacement&amp;#39;, ylab = &amp;#39;Miles Per Gallon&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2017-05-15-data-visualization-with-r-scatter-plots_files/figure-html/scatter2-1.png&#34; width=&#34;480&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Now the plot clearly communicates that it represents the relationship between the displacement and mileage of cars. Now the color of the points in the plot is black by default. Some of us may agree that black is beautiful but not all of us will like it. As a first step in enhancing the way our plot looks, let us change the shape of the points.&lt;/p&gt;
&lt;div id=&#34;shape&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Shape&lt;/h4&gt;
&lt;p&gt;The shape of the point can be specified using the &lt;code&gt;pch&lt;/code&gt; argument. It will take values between &lt;strong&gt;0&lt;/strong&gt; and &lt;strong&gt;25&lt;/strong&gt;. Below is an example:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# point shape
plot(mtcars$disp, mtcars$mpg, pch = 6)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2017-05-15-data-visualization-with-r-scatter-plots_files/figure-html/scatter-shape-1.png&#34; width=&#34;480&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Let us check out a few of the other shapes:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2017-05-15-data-visualization-with-r-scatter-plots_files/figure-html/scatter-pch-1.png&#34; width=&#34;960&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;We can specify the shape based on a third (categorical variable as well). In the below plot, the shape is based on the levels of the categorical variable &lt;code&gt;cyl&lt;/code&gt; (number of cylinders) from the &lt;code&gt;mtcars&lt;/code&gt; data set:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# shape  based on number of levels of a third variable
plot(mtcars$disp, mtcars$mpg, pch = nlevels(factor(mtcars$cyl)))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2017-05-15-data-visualization-with-r-scatter-plots_files/figure-html/scatter-pch2-1.png&#34; width=&#34;480&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# shape based on a third categorical variable
plot(mtcars$disp, mtcars$mpg, pch = unclass(mtcars$cyl))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2017-05-15-data-visualization-with-r-scatter-plots_files/figure-html/scatter-pch3-1.png&#34; width=&#34;480&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;size&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Size&lt;/h4&gt;
&lt;p&gt;The size of the points in the scatter plot can be specified using the &lt;code&gt;cex&lt;/code&gt; argument in the &lt;code&gt;plot()&lt;/code&gt; function. The default value for &lt;code&gt;cex&lt;/code&gt; is 1.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# point size
plot(mtcars$disp, mtcars$mpg, cex = 1.5)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2017-05-15-data-visualization-with-r-scatter-plots_files/figure-html/scatter-size-1.png&#34; width=&#34;480&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;The below plots show the size of the points for values relative to 1.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2017-05-15-data-visualization-with-r-scatter-plots_files/figure-html/scatter-cex-1.png&#34; width=&#34;960&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;color&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Color&lt;/h4&gt;
&lt;p&gt;We can specify a border color for the points using the &lt;code&gt;col&lt;/code&gt; argument and a background color using the &lt;code&gt;bg&lt;/code&gt; argument. The background color can be specified only for points whose &lt;code&gt;pch&lt;/code&gt; argument takes values between &lt;strong&gt;21&lt;/strong&gt; and &lt;strong&gt;25&lt;/strong&gt;. Let us look at some examples to understand this distinction between border and background color.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# shape between 0 and 21
plot(mtcars$disp, mtcars$mpg, pch = 5, col = &amp;#39;blue&amp;#39;, bg = &amp;#39;red&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2017-05-15-data-visualization-with-r-scatter-plots_files/figure-html/col1-1.png&#34; width=&#34;480&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;You can observe that although we have specified a background color using the &lt;code&gt;bg&lt;/code&gt; argument, we do not see the red background color as the value specified for the &lt;code&gt;pch&lt;/code&gt; (shape) argument is not between 21 and 25. In the next example, we will use a value between 21 and 25 so that the &lt;code&gt;pch&lt;/code&gt; argument is effective.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# shape between 0 and 21
plot(mtcars$disp, mtcars$mpg, pch = 24, col = &amp;#39;red&amp;#39;, bg = &amp;#39;blue&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2017-05-15-data-visualization-with-r-scatter-plots_files/figure-html/col2-1.png&#34; width=&#34;480&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;The color of the points can be specified using (levels) of a categorical variable as well. In the next example, we will use the &lt;code&gt;cyl&lt;/code&gt; variable to specify the color of the points.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# color based on a third variable
plot(mtcars$disp, mtcars$mpg, pch = 5, col = factor(mtcars$cyl))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2017-05-15-data-visualization-with-r-scatter-plots_files/figure-html/col3-1.png&#34; width=&#34;480&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Since &lt;code&gt;cyl&lt;/code&gt; is a categorical variable with 3 levels, we can see that the points now have 3 different colors. The above method is useful when you want to segregate the points in a scatter plot based on a third variable.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;summary&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Summary&lt;/h3&gt;
&lt;p&gt;In this post, we learned how to&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;create scatter plots&lt;/li&gt;
&lt;li&gt;add color to the points&lt;/li&gt;
&lt;li&gt;modify shape of the points&lt;/li&gt;
&lt;li&gt;modify size of the points&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In certain cases we might want to fit a regression line or add horizontal/vertical lines to the scatter plots. We will learn to do that in the next post, where we build line plots.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Data Visualization With R - Title and Axis Labels</title>
      <link>/post/data-visualization-with-r-title-and-axis-labels/</link>
      <pubDate>Sat, 22 Aug 2015 00:00:00 +0000</pubDate>
      
      <guid>/post/data-visualization-with-r-title-and-axis-labels/</guid>
      <description>&lt;div id=&#34;introduction&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;This is the second post of the series &lt;strong&gt;Data Visualization With R&lt;/strong&gt;. In the previous &lt;a href=&#34;https://rsquaredacademy.github.io/post/data-visualization-with-r-introduction/&#34;&gt;post&lt;/a&gt;, we explored the &lt;code&gt;plot()&lt;/code&gt; function and observed the different types of plots it generated. In this post, we will learn how to add:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Title&lt;/li&gt;
&lt;li&gt;Subtitle&lt;/li&gt;
&lt;li&gt;Axis Labels&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;to a plot and how to modify:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Axis range&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In the previous &lt;a href=&#34;https://rsquaredacademy.github.io/post/data-visualization-with-r-introduction/&#34;&gt;post&lt;/a&gt;, we created plots which did not have any title or labels. Such plots are of no use to any one as they do not indicate what the X and Y axis represent or the primary information being communicated by the plot. The &lt;code&gt;title&lt;/code&gt; and &lt;code&gt;labels&lt;/code&gt; play an important part in making the plot holistic. There are two ways to add them to a plot:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;use the relevant arguments within the &lt;code&gt;plot()&lt;/code&gt; function&lt;/li&gt;
&lt;li&gt;use the &lt;code&gt;title()&lt;/code&gt; function&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We will explore both the above methods one by one, and you can choose the method most convenient to you. Let us begin with the &lt;code&gt;plot()&lt;/code&gt; function:&lt;/p&gt;
&lt;div id=&#34;syntax&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Syntax&lt;/h4&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th align=&#34;left&#34;&gt;Feature&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Argument&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Value&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Example&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Title&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;main&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;string&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;“Scatter Plot”&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Subtitle&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;sub&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;string&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;“Displacement vs Miles Per Gallon”&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;X Axis Label&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;xlab&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;string&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;“Displacement”&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Y Axis Label&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;ylab&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;string&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;“Miles Per Gallon”&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div id=&#34;title&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Title&lt;/h4&gt;
&lt;p&gt;You can add a title to the plot using the &lt;code&gt;main&lt;/code&gt; argument in the &lt;code&gt;plot()&lt;/code&gt; function. Ensure that the title is enclosed in single/double quotes as it is a string. Let us create a scatter plot of &lt;code&gt;disp&lt;/code&gt; and &lt;code&gt;mpg&lt;/code&gt; from &lt;code&gt;mtcars&lt;/code&gt; data set, and add a title to it.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;plot(mtcars$disp, mtcars$mpg, 
     main = &amp;#39;Displacement vs Miles Per Gallon&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2017-05-15-data-visualization-with-r-title-and-axis-labels_files/figure-html/title-1.png&#34; width=&#34;480&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;subtitle&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Subtitle&lt;/h4&gt;
&lt;p&gt;You can add a subtitle to the plot using the &lt;code&gt;sub&lt;/code&gt; argument in the &lt;code&gt;plot()&lt;/code&gt; function. The subtitle will appear below the X axis label. Ensure that the subtitle is enclosed in single/double quotes as it is a string. Let us add a subtitle to the plot we created in the previous example:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;plot(mtcars$disp, mtcars$mpg, 
     main = &amp;#39;Displacement vs Miles Per Gallon&amp;#39;,
     sub = &amp;#39;Mileage is inversely related to Displacement&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2017-05-15-data-visualization-with-r-title-and-axis-labels_files/figure-html/subtitle-1.png&#34; width=&#34;480&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;axis-labels&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Axis Labels&lt;/h4&gt;
&lt;p&gt;In the plots created in the previous examples, the axis labels appear as &lt;code&gt;mtcars$mpg&lt;/code&gt; and &lt;code&gt;mtcars$disp&lt;/code&gt;. It is not the best way to name the axis and it will make more sense to use names that describe the data. Let us modify the axis labels using the &lt;code&gt;xlab&lt;/code&gt; and &lt;code&gt;ylab&lt;/code&gt; arguments in the &lt;code&gt;plot()&lt;/code&gt; function:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;plot(mtcars$disp, mtcars$mpg, 
     main = &amp;#39;Displacement vs Miles Per Gallon&amp;#39;,
     sub = &amp;#39;Mileage is inversely related to Displacement&amp;#39;,
     xlab = &amp;#39;Displacement&amp;#39;, ylab = &amp;#39;Miles Per Gallon&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2017-05-15-data-visualization-with-r-title-and-axis-labels_files/figure-html/axis-1.png&#34; width=&#34;480&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;title-1&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;title()&lt;/h4&gt;
&lt;p&gt;We can add title, subtitle and axis labels using the &lt;code&gt;title()&lt;/code&gt; function as well. Let us recreate the plots from the previous examples but this time we will use the &lt;code&gt;title()&lt;/code&gt; instead of the &lt;code&gt;plot()&lt;/code&gt; function. We will continue to use the &lt;code&gt;plot()&lt;/code&gt; function to create the plot.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# create scatter plot
plot(mtcars$disp, mtcars$mpg) 

# add title, subtitle and axis labels
title(main = &amp;#39;Displacement vs Miles Per Gallon&amp;#39;,
      sub = &amp;#39;Mileage is inversely related to Displacement&amp;#39;,
      xlab = &amp;#39;Displacement&amp;#39;, ylab = &amp;#39;Miles Per Gallon&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2017-05-15-data-visualization-with-r-title-and-axis-labels_files/figure-html/title1-1.png&#34; width=&#34;480&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Do you notice that the axis labels are overwritten? This happens because the &lt;code&gt;plot()&lt;/code&gt; function adds the default labels and we add a new set of labels without modifying the existing ones. The solution is to instruct the &lt;code&gt;plot()&lt;/code&gt; function not to add any labels to the X and Y axis. This can be achieved using the &lt;code&gt;ann&lt;/code&gt; (annotate) argument in the &lt;code&gt;plot()&lt;/code&gt; function and set it to &lt;code&gt;FALSE&lt;/code&gt;. Let us try it:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# create scatter plot
plot(mtcars$disp, mtcars$mpg, ann = FALSE) 

# add title, subtitle and axis labels
title(main = &amp;#39;Displacement vs Miles Per Gallon&amp;#39;,
      sub = &amp;#39;Mileage is inversely related to Displacement&amp;#39;,
      xlab = &amp;#39;Displacement&amp;#39;, ylab = &amp;#39;Miles Per Gallon&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2017-05-15-data-visualization-with-r-title-and-axis-labels_files/figure-html/title2-1.png&#34; width=&#34;480&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;The axis labels are legible and not overwritten. You can use either the &lt;code&gt;plot()&lt;/code&gt; function or the &lt;code&gt;title()&lt;/code&gt; function to add title, subtitle and axis labels but ensure that in case you use the &lt;code&gt;title()&lt;/code&gt; function, set &lt;code&gt;ann&lt;/code&gt; argument to &lt;code&gt;FALSE&lt;/code&gt; in the &lt;code&gt;plot()&lt;/code&gt; function.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;axis-range&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Axis Range&lt;/h3&gt;
&lt;p&gt;In certain cases, you would want to modify the range of the axis of the plots. By default, the &lt;code&gt;plot()&lt;/code&gt; function will take into account the &lt;code&gt;min&lt;/code&gt; and &lt;code&gt;max&lt;/code&gt; values of the variable(s) and set the range for the axis. We can modify the range by using the &lt;code&gt;xlim&lt;/code&gt; and &lt;code&gt;ylim&lt;/code&gt; arguments in the &lt;code&gt;plot()&lt;/code&gt; function. Both the &lt;code&gt;xlim&lt;/code&gt; and &lt;code&gt;ylim&lt;/code&gt; arguments take 2 values as inputes. The first value is the minimum value for the axis and the second value is the maximum value for the axis. The &lt;code&gt;plot()&lt;/code&gt; function will return an error if we do not specify two values for both &lt;code&gt;xlim&lt;/code&gt; and &lt;code&gt;ylim&lt;/code&gt; arguments. Let us recreate the plot from the previous examples but change the range of both the X and Y axis:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;plot(mtcars$disp, mtcars$mpg, 
     xlim = c(0, 600), ylim = c(0, 50))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2017-05-15-data-visualization-with-r-title-and-axis-labels_files/figure-html/axisrange-1.png&#34; width=&#34;480&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Keep in mind that the axis ranges cannot be modified using the &lt;code&gt;title()&lt;/code&gt; function.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;summary&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Summary&lt;/h2&gt;
&lt;p&gt;In this post, we learned how to add title, subtitle and axis labels to a plot using the &lt;code&gt;plot()&lt;/code&gt; and &lt;code&gt;title()&lt;/code&gt; function. We also learned how to modify the range of the X and Y axis using the &lt;code&gt;xlim&lt;/code&gt; and &lt;code&gt;ylim&lt;/code&gt; arguments within the &lt;code&gt;plot()&lt;/code&gt; function. In the next post, we will learn to create the &lt;strong&gt;scatter plot&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>