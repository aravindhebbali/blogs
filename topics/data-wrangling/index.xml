<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Data Wrangling on Rsquared Academy Blog</title>
    <link>/topics/data-wrangling/index.xml</link>
    <description>Recent content in Data Wrangling on Rsquared Academy Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2014-2017. All rights reserved.</copyright>
    <atom:link href="/topics/data-wrangling/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Why you should purrr - Part 2</title>
      <link>/post/why-you-should-purrr-part-2/</link>
      <pubDate>Fri, 23 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>/post/why-you-should-purrr-part-2/</guid>
      <description>&lt;!-- BLOGDOWN-HEAD --&gt;
&lt;!-- /BLOGDOWN-HEAD --&gt;

&lt;!-- BLOGDOWN-BODY-BEFORE --&gt;
&lt;!-- /BLOGDOWN-BODY-BEFORE --&gt;

</description>
    </item>
    
    <item>
      <title>Why you should purrr?</title>
      <link>/post/why-you-should-purrr-part-1/</link>
      <pubDate>Fri, 23 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>/post/why-you-should-purrr-part-1/</guid>
      <description>&lt;!-- BLOGDOWN-HEAD --&gt;
&lt;!-- /BLOGDOWN-HEAD --&gt;

&lt;!-- BLOGDOWN-BODY-BEFORE --&gt;
&lt;!-- /BLOGDOWN-BODY-BEFORE --&gt;
&lt;p&gt;This is the 10th post in the series &lt;strong&gt;Data Wrangling with R&lt;/strong&gt;. In the previous &lt;a href=&#34;https://rsquaredacademy.github.io/blog/post/data-manipulation-in-r-with-dplyr-part-3/&#34;&gt;post&lt;/a&gt;, we learnt helper functions in &lt;a href=&#34;http://stringr.tidyverse.org&#34;&gt;dplyr&lt;/a&gt; package. In this post, we will learn about &lt;a href=&#34;http://purrr.tidyverse.org&#34;&gt;purrr&lt;/a&gt;, an R package that enhances Râ€™s functional programming toolkit. Let us begin by installing and loading purrr and a set of other pacakges we will be using.&lt;/p&gt;
&lt;p&gt;As we did in the earlier posts in this series, we will use a case study to explore the various features of the stringr package. You can download the data for the case study from &lt;a href=&#34;https://raw.githubusercontent.com/rsquaredacademy/datasets/master/mock_strings.csv&#34;&gt;here&lt;/a&gt; or directly import the data using the readr package.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;mockstring &amp;lt;- readr::read_csv(&amp;#39;https://raw.githubusercontent.com/rsquaredacademy/datasets/master/mock_strings.csv&amp;#39;)
mockstring&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 1,000 x 16
##       id                bundle_id    app_name
##    &amp;lt;int&amp;gt;                    &amp;lt;chr&amp;gt;       &amp;lt;chr&amp;gt;
##  1     1       com.netlog.Cardify   Ronstring
##  2     2      com.devhub.Aerified     Fintone
##  3     3           int.who.Zathin Ventosanzap
##  4     4           jp.ne.goo.Rank     Redhold
##  5     5  au.gov.oaic.Stringtough    Tres-Zap
##  6     6           com.go.Pannier    Tampflex
##  7     7            com.webs.Stim     Bitchip
##  8     8        com.sogou.Bitchip      Namfix
##  9     9          com.amazon.Viva    Wrapsafe
## 10    10 com.theguardian.Domainer     Pannier
## # ... with 990 more rows, and 13 more variables: image_url &amp;lt;chr&amp;gt;,
## #   phrase &amp;lt;chr&amp;gt;, domain &amp;lt;chr&amp;gt;, imageurl &amp;lt;chr&amp;gt;, email &amp;lt;chr&amp;gt;,
## #   filename &amp;lt;chr&amp;gt;, denominatio &amp;lt;chr&amp;gt;, strings &amp;lt;chr&amp;gt;, phone &amp;lt;chr&amp;gt;,
## #   slogans &amp;lt;chr&amp;gt;, address &amp;lt;chr&amp;gt;, url &amp;lt;chr&amp;gt;, useragent &amp;lt;chr&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We will do the following in this case study:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;extract domain name from random email ids&lt;/li&gt;
&lt;li&gt;extract image type from url&lt;/li&gt;
&lt;li&gt;extract image dimension from url&lt;/li&gt;
&lt;li&gt;extract extension from domain name&lt;/li&gt;
&lt;li&gt;extract http protocol from url&lt;/li&gt;
&lt;li&gt;extract domain name from url&lt;/li&gt;
&lt;li&gt;extract extension from url&lt;/li&gt;
&lt;li&gt;extract file type from url&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Data Manipulation in R with dplyr - Part 3</title>
      <link>/post/data-manipulation-in-r-with-dplyr-part-3/</link>
      <pubDate>Sun, 28 May 2017 00:00:00 +0000</pubDate>
      
      <guid>/post/data-manipulation-in-r-with-dplyr-part-3/</guid>
      <description>&lt;!-- BLOGDOWN-HEAD --&gt;
&lt;!-- /BLOGDOWN-HEAD --&gt;

&lt;!-- BLOGDOWN-BODY-BEFORE --&gt;
&lt;!-- /BLOGDOWN-BODY-BEFORE --&gt;
&lt;div id=&#34;introduction&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Introduction&lt;/h1&gt;
&lt;p&gt;In the previous post, we learnt how to combine tables using the &lt;code&gt;*_join()&lt;/code&gt; family of functions in &lt;a href=&#34;dplyr.tidyverse.org&#34;&gt;dplyr&lt;/a&gt;. In this post, we will explore a set of helper functions in order to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;extract unique rows&lt;/li&gt;
&lt;li&gt;rename columns&lt;/li&gt;
&lt;li&gt;sample data&lt;/li&gt;
&lt;li&gt;extract columns&lt;/li&gt;
&lt;li&gt;slice rows&lt;/li&gt;
&lt;li&gt;arrange rows&lt;/li&gt;
&lt;li&gt;compare tables&lt;/li&gt;
&lt;li&gt;extract/mutate data using predicate functions&lt;/li&gt;
&lt;li&gt;count observations for different levels of a variable&lt;/li&gt;
&lt;/ul&gt;
&lt;div id=&#34;case-study&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Case Study&lt;/h2&gt;
&lt;p&gt;Let us look at a case study (e-commerce data) and see how we can use dplyr helper functions to answer questions we have about and to modify/transform the underlying data set. You can download the data from &lt;a href=&#34;https://github.com/rsquaredacademy/datasets/blob/master/web.csv&#34;&gt;here&lt;/a&gt; or import it directly using &lt;code&gt;read_csv()&lt;/code&gt; from the &lt;a href=&#34;readr.tidyverse.org&#34;&gt;readr&lt;/a&gt; package.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;## Parsed with column specification:
## cols(
##   id = col_integer(),
##   referrer = col_character(),
##   device = col_character(),
##   bouncers = col_character(),
##   n_visit = col_integer(),
##   n_pages = col_double(),
##   duration = col_integer(),
##   country = col_character(),
##   purchase = col_character(),
##   order_items = col_double(),
##   order_value = col_double()
## )&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Below is the description of the data set:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;id: row id&lt;/li&gt;
&lt;li&gt;referrer: referrer website/search engine&lt;/li&gt;
&lt;li&gt;os: operating system&lt;/li&gt;
&lt;li&gt;browser: browser&lt;/li&gt;
&lt;li&gt;device: device used to visit the website&lt;/li&gt;
&lt;li&gt;n_pages: number of pages visited&lt;/li&gt;
&lt;li&gt;duration: time spent on the website (in seconds)&lt;/li&gt;
&lt;li&gt;repeat: frequency of visits&lt;/li&gt;
&lt;li&gt;country: country of origin&lt;/li&gt;
&lt;li&gt;purchase: whether visitor purchased&lt;/li&gt;
&lt;li&gt;order_value: order value of visitor (in dollars)&lt;/li&gt;
&lt;/ul&gt;
&lt;div id=&#34;data-sanitization&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Data Sanitization&lt;/h3&gt;
&lt;p&gt;Check the sources of traffic and device types.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ecom %&amp;gt;%
  distinct(referrer)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 5 x 1
##   referrer
##      &amp;lt;chr&amp;gt;
## 1   google
## 2    yahoo
## 3   direct
## 4     bing
## 5   social&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ecom %&amp;gt;%
  distinct(device)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 3 x 1
##   device
##    &amp;lt;chr&amp;gt;
## 1 laptop
## 2 tablet
## 3 mobile&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;rename-columns&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Rename Columns&lt;/h3&gt;
&lt;p&gt;Rename the &lt;code&gt;duration&lt;/code&gt; column to &lt;code&gt;time_on_site&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ecom %&amp;gt;%
  rename(time_on_site = duration)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 1,000 x 11
##       id referrer device bouncers n_visit n_pages time_on_site        country purchase order_items order_value
##    &amp;lt;int&amp;gt;    &amp;lt;chr&amp;gt;  &amp;lt;chr&amp;gt;    &amp;lt;chr&amp;gt;   &amp;lt;int&amp;gt;   &amp;lt;dbl&amp;gt;        &amp;lt;int&amp;gt;          &amp;lt;chr&amp;gt;    &amp;lt;chr&amp;gt;       &amp;lt;dbl&amp;gt;       &amp;lt;dbl&amp;gt;
##  1     1   google laptop     true      10       1           27 Czech Republic    false           0           0
##  2     2    yahoo tablet     true       9       1          899          Yemen    false           0           0
##  3     3   direct laptop     true       0       1           72         Brazil    false           0           0
##  4     4     bing tablet    false       3      18          155          China     true           6         434
##  5     5    yahoo mobile     true       9       1          899         Poland    false           0           0
##  6     6    yahoo laptop    false       5       5          573   South Africa    false           0           0
##  7     7    yahoo mobile     true      10       1          692     Bangladesh    false           0           0
##  8     8   direct mobile     true      10       1          578      Indonesia    false           0           0
##  9     9     bing mobile    false       3      19          794    Netherlands    false           0           0
## 10    10   google mobile     true       6       1          762 Czech Republic    false           0           0
## # ... with 990 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;sampling-data&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Sampling Data&lt;/h3&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ecom %&amp;gt;%
  sample_n(700)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 700 x 11
##       id referrer device bouncers n_visit n_pages duration  country purchase order_items order_value
##    &amp;lt;int&amp;gt;    &amp;lt;chr&amp;gt;  &amp;lt;chr&amp;gt;    &amp;lt;chr&amp;gt;   &amp;lt;int&amp;gt;   &amp;lt;dbl&amp;gt;    &amp;lt;int&amp;gt;    &amp;lt;chr&amp;gt;    &amp;lt;chr&amp;gt;       &amp;lt;dbl&amp;gt;       &amp;lt;dbl&amp;gt;
##  1   715   google laptop    false      10      18      158    China    false           0           0
##  2   153   google tablet     true      10       1      361    China    false           0           0
##  3   541     bing laptop     true       5       1      573   France    false           0           0
##  4   415    yahoo laptop    false       0       4      620 Colombia    false           0           0
##  5   197     bing mobile     true       1       1      542   Greece    false           0           0
##  6   467    yahoo laptop    false       3      10       43     Peru     true           3        2063
##  7   964     bing mobile     true       4       1        1   Greece    false           0           0
##  8   663   google tablet     true       2       1       77 Pakistan    false           0           0
##  9   356     bing laptop     true       4       1       48    Yemen    false           0           0
## 10   949     bing mobile    false      10       1      826    China    false           0           0
## # ... with 690 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ecom %&amp;gt;%
  group_by(referrer) %&amp;gt;%
  sample_n(100)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 500 x 11
## # Groups:   referrer [5]
##       id referrer device bouncers n_visit n_pages duration       country purchase order_items order_value
##    &amp;lt;int&amp;gt;    &amp;lt;chr&amp;gt;  &amp;lt;chr&amp;gt;    &amp;lt;chr&amp;gt;   &amp;lt;int&amp;gt;   &amp;lt;dbl&amp;gt;    &amp;lt;int&amp;gt;         &amp;lt;chr&amp;gt;    &amp;lt;chr&amp;gt;       &amp;lt;dbl&amp;gt;       &amp;lt;dbl&amp;gt;
##  1   523     bing tablet    false       4      15      650     Indonesia    false           0           0
##  2   681     bing mobile     true       8       1      879         China    false           0           0
##  3   724     bing laptop     true       3       1      820        Sweden    false           0           0
##  4   575     bing laptop    false       1      19      238         Yemen     true           4        2036
##  5   231     bing tablet     true       0       1      650      Portugal    false           0           0
##  6   734     bing mobile     true       3       1      663          Peru    false           0           0
##  7   128     bing tablet    false       9       2      909 United States    false           0           0
##  8   114     bing tablet    false       0      14      878        Brazil    false           0           0
##  9   655     bing mobile     true       6       1      522       Nigeria    false           0           0
## 10   787     bing mobile     true       9       1      791  South Africa    false           0           0
## # ... with 490 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ecom %&amp;gt;%
  sample_frac(size = 0.7)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 700 x 11
##       id referrer device bouncers n_visit n_pages duration                          country purchase order_items order_value
##    &amp;lt;int&amp;gt;    &amp;lt;chr&amp;gt;  &amp;lt;chr&amp;gt;    &amp;lt;chr&amp;gt;   &amp;lt;int&amp;gt;   &amp;lt;dbl&amp;gt;    &amp;lt;int&amp;gt;                            &amp;lt;chr&amp;gt;    &amp;lt;chr&amp;gt;       &amp;lt;dbl&amp;gt;       &amp;lt;dbl&amp;gt;
##  1   908   google laptop     true       5       1      614                      Philippines    false           0           0
##  2   197     bing mobile     true       1       1      542                           Greece    false           0           0
##  3   373    yahoo mobile    false       2      20      495                         Portugal    false           0           0
##  4   635   google laptop     true       2       1      291                            China    false           0           0
##  5   946   direct mobile    false       1      15      151                            Kenya     true           5        1093
##  6   141    yahoo tablet     true       1       1      232                            Japan    false           0           0
##  7    53   social tablet    false       3      12      573                            China    false           0           0
##  8   868   google tablet    false       9      14      619 Democratic Republic of the Congo     true           7        2436
##  9    59    yahoo tablet     true       9       1      582                      Philippines    false           0           0
## 10    19   social tablet    false       7      10      346                         Colombia     true           9        1304
## # ... with 690 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ecom %&amp;gt;%
  group_by(referrer) %&amp;gt;%
  sample_frac(0.3)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 299 x 11
## # Groups:   referrer [5]
##       id referrer device bouncers n_visit n_pages duration       country purchase order_items order_value
##    &amp;lt;int&amp;gt;    &amp;lt;chr&amp;gt;  &amp;lt;chr&amp;gt;    &amp;lt;chr&amp;gt;   &amp;lt;int&amp;gt;   &amp;lt;dbl&amp;gt;    &amp;lt;int&amp;gt;         &amp;lt;chr&amp;gt;    &amp;lt;chr&amp;gt;       &amp;lt;dbl&amp;gt;       &amp;lt;dbl&amp;gt;
##  1   580     bing laptop     true       7       1       63 United States    false           0           0
##  2   485     bing tablet     true       7       1      456         Qatar    false           0           0
##  3   191     bing mobile     true       4       1       72   New Zealand    false           0           0
##  4   414     bing tablet    false       7       3      556    Madagascar     true           4         260
##  5   765     bing laptop    false       8      10      294         China     true           7        1531
##  6   514     bing mobile    false       9       3      136      Thailand    false           0           0
##  7   364     bing laptop     true       3       1      897         Kenya    false           0           0
##  8   655     bing mobile     true       6       1      522       Nigeria    false           0           0
##  9   740     bing mobile    false       9       2      400     Indonesia    false           0           0
## 10   709     bing mobile     true       6       1      547      Colombia    false           0           0
## # ... with 289 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;extract-columns&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Extract Columns&lt;/h3&gt;
&lt;p&gt;Extract the &lt;code&gt;device&lt;/code&gt; column.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ecom %&amp;gt;%
  pull(device)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    [1] &amp;quot;laptop&amp;quot; &amp;quot;tablet&amp;quot; &amp;quot;laptop&amp;quot; &amp;quot;tablet&amp;quot; &amp;quot;mobile&amp;quot; &amp;quot;laptop&amp;quot; &amp;quot;mobile&amp;quot;
##    [8] &amp;quot;mobile&amp;quot; &amp;quot;mobile&amp;quot; &amp;quot;mobile&amp;quot; &amp;quot;laptop&amp;quot; &amp;quot;tablet&amp;quot; &amp;quot;mobile&amp;quot; &amp;quot;tablet&amp;quot;
##   [15] &amp;quot;mobile&amp;quot; &amp;quot;laptop&amp;quot; &amp;quot;tablet&amp;quot; &amp;quot;tablet&amp;quot; &amp;quot;tablet&amp;quot; &amp;quot;tablet&amp;quot; &amp;quot;laptop&amp;quot;
##   [22] &amp;quot;mobile&amp;quot; &amp;quot;mobile&amp;quot; &amp;quot;laptop&amp;quot; &amp;quot;laptop&amp;quot; &amp;quot;laptop&amp;quot; &amp;quot;tablet&amp;quot; &amp;quot;laptop&amp;quot;
##   [29] &amp;quot;mobile&amp;quot; &amp;quot;mobile&amp;quot; &amp;quot;tablet&amp;quot; &amp;quot;mobile&amp;quot; &amp;quot;laptop&amp;quot; &amp;quot;tablet&amp;quot; &amp;quot;mobile&amp;quot;
##   [36] &amp;quot;mobile&amp;quot; &amp;quot;laptop&amp;quot; &amp;quot;mobile&amp;quot; &amp;quot;mobile&amp;quot; &amp;quot;mobile&amp;quot; &amp;quot;mobile&amp;quot; &amp;quot;mobile&amp;quot;
##   [43] &amp;quot;laptop&amp;quot; &amp;quot;tablet&amp;quot; &amp;quot;laptop&amp;quot; &amp;quot;tablet&amp;quot; &amp;quot;mobile&amp;quot; &amp;quot;laptop&amp;quot; &amp;quot;mobile&amp;quot;
##   [50] &amp;quot;tablet&amp;quot; &amp;quot;mobile&amp;quot; &amp;quot;mobile&amp;quot; &amp;quot;tablet&amp;quot; &amp;quot;tablet&amp;quot; &amp;quot;mobile&amp;quot; &amp;quot;tablet&amp;quot;
##   [57] &amp;quot;laptop&amp;quot; &amp;quot;tablet&amp;quot; &amp;quot;tablet&amp;quot; &amp;quot;laptop&amp;quot; &amp;quot;laptop&amp;quot; &amp;quot;tablet&amp;quot; &amp;quot;mobile&amp;quot;
##   [64] &amp;quot;tablet&amp;quot; &amp;quot;laptop&amp;quot; &amp;quot;tablet&amp;quot; &amp;quot;tablet&amp;quot; &amp;quot;mobile&amp;quot; &amp;quot;tablet&amp;quot; &amp;quot;mobile&amp;quot;
##   [71] &amp;quot;laptop&amp;quot; &amp;quot;laptop&amp;quot; &amp;quot;tablet&amp;quot; &amp;quot;tablet&amp;quot; &amp;quot;tablet&amp;quot; &amp;quot;tablet&amp;quot; &amp;quot;laptop&amp;quot;
##   [78] &amp;quot;laptop&amp;quot; &amp;quot;mobile&amp;quot; &amp;quot;laptop&amp;quot; &amp;quot;laptop&amp;quot; &amp;quot;tablet&amp;quot; &amp;quot;mobile&amp;quot; &amp;quot;tablet&amp;quot;
##   [85] &amp;quot;tablet&amp;quot; &amp;quot;tablet&amp;quot; &amp;quot;tablet&amp;quot; &amp;quot;tablet&amp;quot; &amp;quot;mobile&amp;quot; &amp;quot;mobile&amp;quot; &amp;quot;laptop&amp;quot;
##   [92] &amp;quot;mobile&amp;quot; &amp;quot;laptop&amp;quot; &amp;quot;tablet&amp;quot; &amp;quot;tablet&amp;quot; &amp;quot;tablet&amp;quot; &amp;quot;tablet&amp;quot; &amp;quot;mobile&amp;quot;
##   [99] &amp;quot;mobile&amp;quot; &amp;quot;laptop&amp;quot; &amp;quot;tablet&amp;quot; &amp;quot;mobile&amp;quot; &amp;quot;laptop&amp;quot; &amp;quot;tablet&amp;quot; &amp;quot;mobile&amp;quot;
##  [106] &amp;quot;mobile&amp;quot; &amp;quot;mobile&amp;quot; &amp;quot;laptop&amp;quot; &amp;quot;tablet&amp;quot; &amp;quot;mobile&amp;quot; &amp;quot;tablet&amp;quot; &amp;quot;mobile&amp;quot;
##  [113] &amp;quot;tablet&amp;quot; &amp;quot;tablet&amp;quot; &amp;quot;laptop&amp;quot; &amp;quot;mobile&amp;quot; &amp;quot;tablet&amp;quot; &amp;quot;laptop&amp;quot; &amp;quot;laptop&amp;quot;
##  [120] &amp;quot;mobile&amp;quot; &amp;quot;laptop&amp;quot; &amp;quot;laptop&amp;quot; &amp;quot;mobile&amp;quot; &amp;quot;mobile&amp;quot; &amp;quot;mobile&amp;quot; &amp;quot;mobile&amp;quot;
##  [127] &amp;quot;tablet&amp;quot; &amp;quot;tablet&amp;quot; &amp;quot;tablet&amp;quot; &amp;quot;laptop&amp;quot; &amp;quot;tablet&amp;quot; &amp;quot;tablet&amp;quot; &amp;quot;mobile&amp;quot;
##  [134] &amp;quot;mobile&amp;quot; &amp;quot;mobile&amp;quot; &amp;quot;tablet&amp;quot; &amp;quot;mobile&amp;quot; &amp;quot;tablet&amp;quot; &amp;quot;laptop&amp;quot; &amp;quot;laptop&amp;quot;
##  [141] &amp;quot;tablet&amp;quot; &amp;quot;laptop&amp;quot; &amp;quot;mobile&amp;quot; &amp;quot;tablet&amp;quot; &amp;quot;laptop&amp;quot; &amp;quot;laptop&amp;quot; &amp;quot;tablet&amp;quot;
##  [148] &amp;quot;laptop&amp;quot; &amp;quot;tablet&amp;quot; &amp;quot;laptop&amp;quot; &amp;quot;tablet&amp;quot; &amp;quot;mobile&amp;quot; &amp;quot;tablet&amp;quot; &amp;quot;laptop&amp;quot;
##  [155] &amp;quot;mobile&amp;quot; &amp;quot;mobile&amp;quot; &amp;quot;laptop&amp;quot; &amp;quot;tablet&amp;quot; &amp;quot;laptop&amp;quot; &amp;quot;tablet&amp;quot; &amp;quot;laptop&amp;quot;
##  [162] &amp;quot;tablet&amp;quot; &amp;quot;laptop&amp;quot; &amp;quot;mobile&amp;quot; &amp;quot;laptop&amp;quot; &amp;quot;tablet&amp;quot; &amp;quot;mobile&amp;quot; &amp;quot;tablet&amp;quot;
##  [169] &amp;quot;laptop&amp;quot; &amp;quot;tablet&amp;quot; &amp;quot;laptop&amp;quot; &amp;quot;laptop&amp;quot; &amp;quot;mobile&amp;quot; &amp;quot;mobile&amp;quot; &amp;quot;mobile&amp;quot;
##  [176] &amp;quot;laptop&amp;quot; &amp;quot;laptop&amp;quot; &amp;quot;mobile&amp;quot; &amp;quot;laptop&amp;quot; &amp;quot;tablet&amp;quot; &amp;quot;mobile&amp;quot; &amp;quot;mobile&amp;quot;
##  [183] &amp;quot;mobile&amp;quot; &amp;quot;laptop&amp;quot; &amp;quot;mobile&amp;quot; &amp;quot;tablet&amp;quot; &amp;quot;laptop&amp;quot; &amp;quot;tablet&amp;quot; &amp;quot;mobile&amp;quot;
##  [190] &amp;quot;tablet&amp;quot; &amp;quot;mobile&amp;quot; &amp;quot;laptop&amp;quot; &amp;quot;tablet&amp;quot; &amp;quot;laptop&amp;quot; &amp;quot;laptop&amp;quot; &amp;quot;laptop&amp;quot;
##  [197] &amp;quot;mobile&amp;quot; &amp;quot;tablet&amp;quot; &amp;quot;laptop&amp;quot; &amp;quot;tablet&amp;quot; &amp;quot;laptop&amp;quot; &amp;quot;tablet&amp;quot; &amp;quot;tablet&amp;quot;
##  [204] &amp;quot;tablet&amp;quot; &amp;quot;tablet&amp;quot; &amp;quot;mobile&amp;quot; &amp;quot;tablet&amp;quot; &amp;quot;tablet&amp;quot; &amp;quot;laptop&amp;quot; &amp;quot;mobile&amp;quot;
##  [211] &amp;quot;tablet&amp;quot; &amp;quot;tablet&amp;quot; &amp;quot;laptop&amp;quot; &amp;quot;laptop&amp;quot; &amp;quot;mobile&amp;quot; &amp;quot;laptop&amp;quot; &amp;quot;mobile&amp;quot;
##  [218] &amp;quot;laptop&amp;quot; &amp;quot;mobile&amp;quot; &amp;quot;tablet&amp;quot; &amp;quot;tablet&amp;quot; &amp;quot;laptop&amp;quot; &amp;quot;tablet&amp;quot; &amp;quot;mobile&amp;quot;
##  [225] &amp;quot;tablet&amp;quot; &amp;quot;laptop&amp;quot; &amp;quot;mobile&amp;quot; &amp;quot;tablet&amp;quot; &amp;quot;mobile&amp;quot; &amp;quot;tablet&amp;quot; &amp;quot;tablet&amp;quot;
##  [232] &amp;quot;laptop&amp;quot; &amp;quot;tablet&amp;quot; &amp;quot;tablet&amp;quot; &amp;quot;laptop&amp;quot; &amp;quot;tablet&amp;quot; &amp;quot;laptop&amp;quot; &amp;quot;mobile&amp;quot;
##  [239] &amp;quot;mobile&amp;quot; &amp;quot;laptop&amp;quot; &amp;quot;mobile&amp;quot; &amp;quot;mobile&amp;quot; &amp;quot;tablet&amp;quot; &amp;quot;mobile&amp;quot; &amp;quot;laptop&amp;quot;
##  [246] &amp;quot;mobile&amp;quot; &amp;quot;laptop&amp;quot; &amp;quot;tablet&amp;quot; &amp;quot;mobile&amp;quot; &amp;quot;laptop&amp;quot; &amp;quot;tablet&amp;quot; &amp;quot;tablet&amp;quot;
##  [253] &amp;quot;mobile&amp;quot; &amp;quot;laptop&amp;quot; &amp;quot;tablet&amp;quot; &amp;quot;laptop&amp;quot; &amp;quot;laptop&amp;quot; &amp;quot;mobile&amp;quot; &amp;quot;mobile&amp;quot;
##  [260] &amp;quot;laptop&amp;quot; &amp;quot;laptop&amp;quot; &amp;quot;mobile&amp;quot; &amp;quot;mobile&amp;quot; &amp;quot;laptop&amp;quot; &amp;quot;laptop&amp;quot; &amp;quot;laptop&amp;quot;
##  [267] &amp;quot;laptop&amp;quot; &amp;quot;tablet&amp;quot; &amp;quot;laptop&amp;quot; &amp;quot;mobile&amp;quot; &amp;quot;laptop&amp;quot; &amp;quot;mobile&amp;quot; &amp;quot;laptop&amp;quot;
##  [274] &amp;quot;mobile&amp;quot; &amp;quot;laptop&amp;quot; &amp;quot;laptop&amp;quot; &amp;quot;tablet&amp;quot; &amp;quot;laptop&amp;quot; &amp;quot;laptop&amp;quot; &amp;quot;mobile&amp;quot;
##  [281] &amp;quot;laptop&amp;quot; &amp;quot;laptop&amp;quot; &amp;quot;mobile&amp;quot; &amp;quot;mobile&amp;quot; &amp;quot;mobile&amp;quot; &amp;quot;tablet&amp;quot; &amp;quot;mobile&amp;quot;
##  [288] &amp;quot;tablet&amp;quot; &amp;quot;mobile&amp;quot; &amp;quot;mobile&amp;quot; &amp;quot;laptop&amp;quot; &amp;quot;tablet&amp;quot; &amp;quot;mobile&amp;quot; &amp;quot;laptop&amp;quot;
##  [295] &amp;quot;laptop&amp;quot; &amp;quot;mobile&amp;quot; &amp;quot;mobile&amp;quot; &amp;quot;laptop&amp;quot; &amp;quot;laptop&amp;quot; &amp;quot;laptop&amp;quot; &amp;quot;tablet&amp;quot;
##  [302] &amp;quot;laptop&amp;quot; &amp;quot;mobile&amp;quot; &amp;quot;laptop&amp;quot; &amp;quot;tablet&amp;quot; &amp;quot;mobile&amp;quot; &amp;quot;laptop&amp;quot; &amp;quot;tablet&amp;quot;
##  [309] &amp;quot;mobile&amp;quot; &amp;quot;laptop&amp;quot; &amp;quot;tablet&amp;quot; &amp;quot;tablet&amp;quot; &amp;quot;laptop&amp;quot; &amp;quot;mobile&amp;quot; &amp;quot;tablet&amp;quot;
##  [316] &amp;quot;laptop&amp;quot; &amp;quot;mobile&amp;quot; &amp;quot;laptop&amp;quot; &amp;quot;laptop&amp;quot; &amp;quot;laptop&amp;quot; &amp;quot;tablet&amp;quot; &amp;quot;tablet&amp;quot;
##  [323] &amp;quot;mobile&amp;quot; &amp;quot;laptop&amp;quot; &amp;quot;tablet&amp;quot; &amp;quot;mobile&amp;quot; &amp;quot;laptop&amp;quot; &amp;quot;mobile&amp;quot; &amp;quot;mobile&amp;quot;
##  [330] &amp;quot;laptop&amp;quot; &amp;quot;mobile&amp;quot; &amp;quot;laptop&amp;quot; &amp;quot;tablet&amp;quot; &amp;quot;mobile&amp;quot; &amp;quot;tablet&amp;quot; &amp;quot;mobile&amp;quot;
##  [337] &amp;quot;mobile&amp;quot; &amp;quot;mobile&amp;quot; &amp;quot;tablet&amp;quot; &amp;quot;mobile&amp;quot; &amp;quot;mobile&amp;quot; &amp;quot;tablet&amp;quot; &amp;quot;tablet&amp;quot;
##  [344] &amp;quot;mobile&amp;quot; &amp;quot;laptop&amp;quot; &amp;quot;tablet&amp;quot; &amp;quot;tablet&amp;quot; &amp;quot;laptop&amp;quot; &amp;quot;laptop&amp;quot; &amp;quot;mobile&amp;quot;
##  [351] &amp;quot;tablet&amp;quot; &amp;quot;tablet&amp;quot; &amp;quot;tablet&amp;quot; &amp;quot;laptop&amp;quot; &amp;quot;laptop&amp;quot; &amp;quot;laptop&amp;quot; &amp;quot;mobile&amp;quot;
##  [358] &amp;quot;mobile&amp;quot; &amp;quot;laptop&amp;quot; &amp;quot;mobile&amp;quot; &amp;quot;laptop&amp;quot; &amp;quot;mobile&amp;quot; &amp;quot;laptop&amp;quot; &amp;quot;laptop&amp;quot;
##  [365] &amp;quot;laptop&amp;quot; &amp;quot;tablet&amp;quot; &amp;quot;laptop&amp;quot; &amp;quot;laptop&amp;quot; &amp;quot;laptop&amp;quot; &amp;quot;tablet&amp;quot; &amp;quot;laptop&amp;quot;
##  [372] &amp;quot;tablet&amp;quot; &amp;quot;mobile&amp;quot; &amp;quot;mobile&amp;quot; &amp;quot;laptop&amp;quot; &amp;quot;mobile&amp;quot; &amp;quot;mobile&amp;quot; &amp;quot;mobile&amp;quot;
##  [379] &amp;quot;tablet&amp;quot; &amp;quot;mobile&amp;quot; &amp;quot;laptop&amp;quot; &amp;quot;laptop&amp;quot; &amp;quot;mobile&amp;quot; &amp;quot;tablet&amp;quot; &amp;quot;tablet&amp;quot;
##  [386] &amp;quot;laptop&amp;quot; &amp;quot;mobile&amp;quot; &amp;quot;laptop&amp;quot; &amp;quot;mobile&amp;quot; &amp;quot;tablet&amp;quot; &amp;quot;tablet&amp;quot; &amp;quot;laptop&amp;quot;
##  [393] &amp;quot;mobile&amp;quot; &amp;quot;laptop&amp;quot; &amp;quot;mobile&amp;quot; &amp;quot;mobile&amp;quot; &amp;quot;tablet&amp;quot; &amp;quot;laptop&amp;quot; &amp;quot;tablet&amp;quot;
##  [400] &amp;quot;mobile&amp;quot; &amp;quot;tablet&amp;quot; &amp;quot;laptop&amp;quot; &amp;quot;mobile&amp;quot; &amp;quot;laptop&amp;quot; &amp;quot;mobile&amp;quot; &amp;quot;mobile&amp;quot;
##  [407] &amp;quot;mobile&amp;quot; &amp;quot;laptop&amp;quot; &amp;quot;laptop&amp;quot; &amp;quot;mobile&amp;quot; &amp;quot;mobile&amp;quot; &amp;quot;mobile&amp;quot; &amp;quot;mobile&amp;quot;
##  [414] &amp;quot;tablet&amp;quot; &amp;quot;laptop&amp;quot; &amp;quot;laptop&amp;quot; &amp;quot;mobile&amp;quot; &amp;quot;tablet&amp;quot; &amp;quot;mobile&amp;quot; &amp;quot;mobile&amp;quot;
##  [421] &amp;quot;laptop&amp;quot; &amp;quot;laptop&amp;quot; &amp;quot;laptop&amp;quot; &amp;quot;tablet&amp;quot; &amp;quot;laptop&amp;quot; &amp;quot;mobile&amp;quot; &amp;quot;tablet&amp;quot;
##  [428] &amp;quot;laptop&amp;quot; &amp;quot;tablet&amp;quot; &amp;quot;mobile&amp;quot; &amp;quot;tablet&amp;quot; &amp;quot;mobile&amp;quot; &amp;quot;tablet&amp;quot; &amp;quot;mobile&amp;quot;
##  [435] &amp;quot;mobile&amp;quot; &amp;quot;mobile&amp;quot; &amp;quot;laptop&amp;quot; &amp;quot;tablet&amp;quot; &amp;quot;tablet&amp;quot; &amp;quot;mobile&amp;quot; &amp;quot;laptop&amp;quot;
##  [442] &amp;quot;tablet&amp;quot; &amp;quot;tablet&amp;quot; &amp;quot;tablet&amp;quot; &amp;quot;tablet&amp;quot; &amp;quot;laptop&amp;quot; &amp;quot;laptop&amp;quot; &amp;quot;laptop&amp;quot;
##  [449] &amp;quot;laptop&amp;quot; &amp;quot;laptop&amp;quot; &amp;quot;tablet&amp;quot; &amp;quot;tablet&amp;quot; &amp;quot;mobile&amp;quot; &amp;quot;tablet&amp;quot; &amp;quot;laptop&amp;quot;
##  [456] &amp;quot;mobile&amp;quot; &amp;quot;laptop&amp;quot; &amp;quot;mobile&amp;quot; &amp;quot;tablet&amp;quot; &amp;quot;tablet&amp;quot; &amp;quot;tablet&amp;quot; &amp;quot;mobile&amp;quot;
##  [463] &amp;quot;laptop&amp;quot; &amp;quot;tablet&amp;quot; &amp;quot;laptop&amp;quot; &amp;quot;tablet&amp;quot; &amp;quot;laptop&amp;quot; &amp;quot;laptop&amp;quot; &amp;quot;tablet&amp;quot;
##  [470] &amp;quot;mobile&amp;quot; &amp;quot;mobile&amp;quot; &amp;quot;tablet&amp;quot; &amp;quot;laptop&amp;quot; &amp;quot;laptop&amp;quot; &amp;quot;tablet&amp;quot; &amp;quot;mobile&amp;quot;
##  [477] &amp;quot;tablet&amp;quot; &amp;quot;laptop&amp;quot; &amp;quot;mobile&amp;quot; &amp;quot;tablet&amp;quot; &amp;quot;mobile&amp;quot; &amp;quot;tablet&amp;quot; &amp;quot;tablet&amp;quot;
##  [484] &amp;quot;laptop&amp;quot; &amp;quot;tablet&amp;quot; &amp;quot;tablet&amp;quot; &amp;quot;laptop&amp;quot; &amp;quot;mobile&amp;quot; &amp;quot;tablet&amp;quot; &amp;quot;laptop&amp;quot;
##  [491] &amp;quot;tablet&amp;quot; &amp;quot;laptop&amp;quot; &amp;quot;mobile&amp;quot; &amp;quot;laptop&amp;quot; &amp;quot;laptop&amp;quot; &amp;quot;tablet&amp;quot; &amp;quot;mobile&amp;quot;
##  [498] &amp;quot;mobile&amp;quot; &amp;quot;tablet&amp;quot; &amp;quot;mobile&amp;quot; &amp;quot;mobile&amp;quot; &amp;quot;laptop&amp;quot; &amp;quot;mobile&amp;quot; &amp;quot;laptop&amp;quot;
##  [505] &amp;quot;tablet&amp;quot; &amp;quot;laptop&amp;quot; &amp;quot;mobile&amp;quot; &amp;quot;laptop&amp;quot; &amp;quot;laptop&amp;quot; &amp;quot;mobile&amp;quot; &amp;quot;tablet&amp;quot;
##  [512] &amp;quot;mobile&amp;quot; &amp;quot;laptop&amp;quot; &amp;quot;mobile&amp;quot; &amp;quot;laptop&amp;quot; &amp;quot;mobile&amp;quot; &amp;quot;laptop&amp;quot; &amp;quot;tablet&amp;quot;
##  [519] &amp;quot;tablet&amp;quot; &amp;quot;mobile&amp;quot; &amp;quot;laptop&amp;quot; &amp;quot;laptop&amp;quot; &amp;quot;tablet&amp;quot; &amp;quot;mobile&amp;quot; &amp;quot;laptop&amp;quot;
##  [526] &amp;quot;tablet&amp;quot; &amp;quot;laptop&amp;quot; &amp;quot;mobile&amp;quot; &amp;quot;tablet&amp;quot; &amp;quot;mobile&amp;quot; &amp;quot;tablet&amp;quot; &amp;quot;mobile&amp;quot;
##  [533] &amp;quot;laptop&amp;quot; &amp;quot;tablet&amp;quot; &amp;quot;tablet&amp;quot; &amp;quot;mobile&amp;quot; &amp;quot;laptop&amp;quot; &amp;quot;laptop&amp;quot; &amp;quot;mobile&amp;quot;
##  [540] &amp;quot;tablet&amp;quot; &amp;quot;laptop&amp;quot; &amp;quot;mobile&amp;quot; &amp;quot;tablet&amp;quot; &amp;quot;mobile&amp;quot; &amp;quot;laptop&amp;quot; &amp;quot;mobile&amp;quot;
##  [547] &amp;quot;laptop&amp;quot; &amp;quot;mobile&amp;quot; &amp;quot;tablet&amp;quot; &amp;quot;tablet&amp;quot; &amp;quot;mobile&amp;quot; &amp;quot;tablet&amp;quot; &amp;quot;mobile&amp;quot;
##  [554] &amp;quot;tablet&amp;quot; &amp;quot;mobile&amp;quot; &amp;quot;mobile&amp;quot; &amp;quot;mobile&amp;quot; &amp;quot;laptop&amp;quot; &amp;quot;laptop&amp;quot; &amp;quot;laptop&amp;quot;
##  [561] &amp;quot;tablet&amp;quot; &amp;quot;laptop&amp;quot; &amp;quot;tablet&amp;quot; &amp;quot;laptop&amp;quot; &amp;quot;mobile&amp;quot; &amp;quot;tablet&amp;quot; &amp;quot;mobile&amp;quot;
##  [568] &amp;quot;tablet&amp;quot; &amp;quot;laptop&amp;quot; &amp;quot;laptop&amp;quot; &amp;quot;mobile&amp;quot; &amp;quot;laptop&amp;quot; &amp;quot;laptop&amp;quot; &amp;quot;mobile&amp;quot;
##  [575] &amp;quot;laptop&amp;quot; &amp;quot;laptop&amp;quot; &amp;quot;laptop&amp;quot; &amp;quot;tablet&amp;quot; &amp;quot;tablet&amp;quot; &amp;quot;laptop&amp;quot; &amp;quot;laptop&amp;quot;
##  [582] &amp;quot;mobile&amp;quot; &amp;quot;laptop&amp;quot; &amp;quot;mobile&amp;quot; &amp;quot;tablet&amp;quot; &amp;quot;laptop&amp;quot; &amp;quot;mobile&amp;quot; &amp;quot;mobile&amp;quot;
##  [589] &amp;quot;tablet&amp;quot; &amp;quot;laptop&amp;quot; &amp;quot;laptop&amp;quot; &amp;quot;mobile&amp;quot; &amp;quot;mobile&amp;quot; &amp;quot;laptop&amp;quot; &amp;quot;tablet&amp;quot;
##  [596] &amp;quot;mobile&amp;quot; &amp;quot;tablet&amp;quot; &amp;quot;tablet&amp;quot; &amp;quot;mobile&amp;quot; &amp;quot;laptop&amp;quot; &amp;quot;laptop&amp;quot; &amp;quot;mobile&amp;quot;
##  [603] &amp;quot;mobile&amp;quot; &amp;quot;tablet&amp;quot; &amp;quot;laptop&amp;quot; &amp;quot;tablet&amp;quot; &amp;quot;mobile&amp;quot; &amp;quot;laptop&amp;quot; &amp;quot;tablet&amp;quot;
##  [610] &amp;quot;laptop&amp;quot; &amp;quot;mobile&amp;quot; &amp;quot;mobile&amp;quot; &amp;quot;laptop&amp;quot; &amp;quot;laptop&amp;quot; &amp;quot;laptop&amp;quot; &amp;quot;laptop&amp;quot;
##  [617] &amp;quot;tablet&amp;quot; &amp;quot;laptop&amp;quot; &amp;quot;laptop&amp;quot; &amp;quot;tablet&amp;quot; &amp;quot;mobile&amp;quot; &amp;quot;mobile&amp;quot; &amp;quot;tablet&amp;quot;
##  [624] &amp;quot;laptop&amp;quot; &amp;quot;mobile&amp;quot; &amp;quot;tablet&amp;quot; &amp;quot;laptop&amp;quot; &amp;quot;tablet&amp;quot; &amp;quot;tablet&amp;quot; &amp;quot;mobile&amp;quot;
##  [631] &amp;quot;tablet&amp;quot; &amp;quot;tablet&amp;quot; &amp;quot;mobile&amp;quot; &amp;quot;mobile&amp;quot; &amp;quot;laptop&amp;quot; &amp;quot;laptop&amp;quot; &amp;quot;tablet&amp;quot;
##  [638] &amp;quot;mobile&amp;quot; &amp;quot;mobile&amp;quot; &amp;quot;mobile&amp;quot; &amp;quot;laptop&amp;quot; &amp;quot;laptop&amp;quot; &amp;quot;tablet&amp;quot; &amp;quot;laptop&amp;quot;
##  [645] &amp;quot;laptop&amp;quot; &amp;quot;tablet&amp;quot; &amp;quot;laptop&amp;quot; &amp;quot;mobile&amp;quot; &amp;quot;laptop&amp;quot; &amp;quot;laptop&amp;quot; &amp;quot;laptop&amp;quot;
##  [652] &amp;quot;tablet&amp;quot; &amp;quot;mobile&amp;quot; &amp;quot;mobile&amp;quot; &amp;quot;mobile&amp;quot; &amp;quot;laptop&amp;quot; &amp;quot;laptop&amp;quot; &amp;quot;laptop&amp;quot;
##  [659] &amp;quot;mobile&amp;quot; &amp;quot;tablet&amp;quot; &amp;quot;laptop&amp;quot; &amp;quot;tablet&amp;quot; &amp;quot;tablet&amp;quot; &amp;quot;laptop&amp;quot; &amp;quot;mobile&amp;quot;
##  [666] &amp;quot;mobile&amp;quot; &amp;quot;mobile&amp;quot; &amp;quot;mobile&amp;quot; &amp;quot;tablet&amp;quot; &amp;quot;tablet&amp;quot; &amp;quot;laptop&amp;quot; &amp;quot;tablet&amp;quot;
##  [673] &amp;quot;mobile&amp;quot; &amp;quot;mobile&amp;quot; &amp;quot;mobile&amp;quot; &amp;quot;laptop&amp;quot; &amp;quot;tablet&amp;quot; &amp;quot;mobile&amp;quot; &amp;quot;laptop&amp;quot;
##  [680] &amp;quot;tablet&amp;quot; &amp;quot;mobile&amp;quot; &amp;quot;tablet&amp;quot; &amp;quot;mobile&amp;quot; &amp;quot;tablet&amp;quot; &amp;quot;laptop&amp;quot; &amp;quot;tablet&amp;quot;
##  [687] &amp;quot;laptop&amp;quot; &amp;quot;mobile&amp;quot; &amp;quot;mobile&amp;quot; &amp;quot;mobile&amp;quot; &amp;quot;tablet&amp;quot; &amp;quot;laptop&amp;quot; &amp;quot;tablet&amp;quot;
##  [694] &amp;quot;laptop&amp;quot; &amp;quot;mobile&amp;quot; &amp;quot;mobile&amp;quot; &amp;quot;tablet&amp;quot; &amp;quot;mobile&amp;quot; &amp;quot;mobile&amp;quot; &amp;quot;tablet&amp;quot;
##  [701] &amp;quot;tablet&amp;quot; &amp;quot;tablet&amp;quot; &amp;quot;mobile&amp;quot; &amp;quot;laptop&amp;quot; &amp;quot;laptop&amp;quot; &amp;quot;tablet&amp;quot; &amp;quot;tablet&amp;quot;
##  [708] &amp;quot;laptop&amp;quot; &amp;quot;mobile&amp;quot; &amp;quot;mobile&amp;quot; &amp;quot;tablet&amp;quot; &amp;quot;mobile&amp;quot; &amp;quot;tablet&amp;quot; &amp;quot;tablet&amp;quot;
##  [715] &amp;quot;laptop&amp;quot; &amp;quot;tablet&amp;quot; &amp;quot;laptop&amp;quot; &amp;quot;mobile&amp;quot; &amp;quot;tablet&amp;quot; &amp;quot;laptop&amp;quot; &amp;quot;mobile&amp;quot;
##  [722] &amp;quot;mobile&amp;quot; &amp;quot;mobile&amp;quot; &amp;quot;laptop&amp;quot; &amp;quot;laptop&amp;quot; &amp;quot;mobile&amp;quot; &amp;quot;mobile&amp;quot; &amp;quot;tablet&amp;quot;
##  [729] &amp;quot;laptop&amp;quot; &amp;quot;mobile&amp;quot; &amp;quot;laptop&amp;quot; &amp;quot;mobile&amp;quot; &amp;quot;laptop&amp;quot; &amp;quot;mobile&amp;quot; &amp;quot;tablet&amp;quot;
##  [736] &amp;quot;tablet&amp;quot; &amp;quot;mobile&amp;quot; &amp;quot;mobile&amp;quot; &amp;quot;mobile&amp;quot; &amp;quot;mobile&amp;quot; &amp;quot;tablet&amp;quot; &amp;quot;mobile&amp;quot;
##  [743] &amp;quot;tablet&amp;quot; &amp;quot;tablet&amp;quot; &amp;quot;mobile&amp;quot; &amp;quot;laptop&amp;quot; &amp;quot;mobile&amp;quot; &amp;quot;mobile&amp;quot; &amp;quot;laptop&amp;quot;
##  [750] &amp;quot;laptop&amp;quot; &amp;quot;tablet&amp;quot; &amp;quot;mobile&amp;quot; &amp;quot;laptop&amp;quot; &amp;quot;mobile&amp;quot; &amp;quot;tablet&amp;quot; &amp;quot;tablet&amp;quot;
##  [757] &amp;quot;tablet&amp;quot; &amp;quot;tablet&amp;quot; &amp;quot;tablet&amp;quot; &amp;quot;tablet&amp;quot; &amp;quot;mobile&amp;quot; &amp;quot;laptop&amp;quot; &amp;quot;laptop&amp;quot;
##  [764] &amp;quot;mobile&amp;quot; &amp;quot;laptop&amp;quot; &amp;quot;laptop&amp;quot; &amp;quot;tablet&amp;quot; &amp;quot;tablet&amp;quot; &amp;quot;mobile&amp;quot; &amp;quot;laptop&amp;quot;
##  [771] &amp;quot;tablet&amp;quot; &amp;quot;mobile&amp;quot; &amp;quot;laptop&amp;quot; &amp;quot;laptop&amp;quot; &amp;quot;laptop&amp;quot; &amp;quot;mobile&amp;quot; &amp;quot;mobile&amp;quot;
##  [778] &amp;quot;mobile&amp;quot; &amp;quot;laptop&amp;quot; &amp;quot;mobile&amp;quot; &amp;quot;laptop&amp;quot; &amp;quot;mobile&amp;quot; &amp;quot;laptop&amp;quot; &amp;quot;tablet&amp;quot;
##  [785] &amp;quot;tablet&amp;quot; &amp;quot;mobile&amp;quot; &amp;quot;mobile&amp;quot; &amp;quot;mobile&amp;quot; &amp;quot;laptop&amp;quot; &amp;quot;tablet&amp;quot; &amp;quot;mobile&amp;quot;
##  [792] &amp;quot;laptop&amp;quot; &amp;quot;laptop&amp;quot; &amp;quot;mobile&amp;quot; &amp;quot;tablet&amp;quot; &amp;quot;tablet&amp;quot; &amp;quot;tablet&amp;quot; &amp;quot;laptop&amp;quot;
##  [799] &amp;quot;mobile&amp;quot; &amp;quot;tablet&amp;quot; &amp;quot;mobile&amp;quot; &amp;quot;mobile&amp;quot; &amp;quot;laptop&amp;quot; &amp;quot;tablet&amp;quot; &amp;quot;tablet&amp;quot;
##  [806] &amp;quot;mobile&amp;quot; &amp;quot;tablet&amp;quot; &amp;quot;mobile&amp;quot; &amp;quot;mobile&amp;quot; &amp;quot;mobile&amp;quot; &amp;quot;tablet&amp;quot; &amp;quot;mobile&amp;quot;
##  [813] &amp;quot;laptop&amp;quot; &amp;quot;mobile&amp;quot; &amp;quot;mobile&amp;quot; &amp;quot;tablet&amp;quot; &amp;quot;laptop&amp;quot; &amp;quot;mobile&amp;quot; &amp;quot;mobile&amp;quot;
##  [820] &amp;quot;tablet&amp;quot; &amp;quot;tablet&amp;quot; &amp;quot;laptop&amp;quot; &amp;quot;mobile&amp;quot; &amp;quot;laptop&amp;quot; &amp;quot;laptop&amp;quot; &amp;quot;mobile&amp;quot;
##  [827] &amp;quot;tablet&amp;quot; &amp;quot;tablet&amp;quot; &amp;quot;laptop&amp;quot; &amp;quot;mobile&amp;quot; &amp;quot;tablet&amp;quot; &amp;quot;tablet&amp;quot; &amp;quot;mobile&amp;quot;
##  [834] &amp;quot;tablet&amp;quot; &amp;quot;tablet&amp;quot; &amp;quot;laptop&amp;quot; &amp;quot;mobile&amp;quot; &amp;quot;mobile&amp;quot; &amp;quot;laptop&amp;quot; &amp;quot;laptop&amp;quot;
##  [841] &amp;quot;tablet&amp;quot; &amp;quot;laptop&amp;quot; &amp;quot;mobile&amp;quot; &amp;quot;tablet&amp;quot; &amp;quot;tablet&amp;quot; &amp;quot;tablet&amp;quot; &amp;quot;mobile&amp;quot;
##  [848] &amp;quot;mobile&amp;quot; &amp;quot;tablet&amp;quot; &amp;quot;tablet&amp;quot; &amp;quot;laptop&amp;quot; &amp;quot;tablet&amp;quot; &amp;quot;tablet&amp;quot; &amp;quot;tablet&amp;quot;
##  [855] &amp;quot;laptop&amp;quot; &amp;quot;laptop&amp;quot; &amp;quot;tablet&amp;quot; &amp;quot;tablet&amp;quot; &amp;quot;tablet&amp;quot; &amp;quot;tablet&amp;quot; &amp;quot;tablet&amp;quot;
##  [862] &amp;quot;laptop&amp;quot; &amp;quot;tablet&amp;quot; &amp;quot;mobile&amp;quot; &amp;quot;tablet&amp;quot; &amp;quot;mobile&amp;quot; &amp;quot;tablet&amp;quot; &amp;quot;tablet&amp;quot;
##  [869] &amp;quot;laptop&amp;quot; &amp;quot;mobile&amp;quot; &amp;quot;mobile&amp;quot; &amp;quot;mobile&amp;quot; &amp;quot;tablet&amp;quot; &amp;quot;mobile&amp;quot; &amp;quot;laptop&amp;quot;
##  [876] &amp;quot;laptop&amp;quot; &amp;quot;mobile&amp;quot; &amp;quot;laptop&amp;quot; &amp;quot;mobile&amp;quot; &amp;quot;mobile&amp;quot; &amp;quot;mobile&amp;quot; &amp;quot;laptop&amp;quot;
##  [883] &amp;quot;mobile&amp;quot; &amp;quot;tablet&amp;quot; &amp;quot;laptop&amp;quot; &amp;quot;mobile&amp;quot; &amp;quot;tablet&amp;quot; &amp;quot;tablet&amp;quot; &amp;quot;mobile&amp;quot;
##  [890] &amp;quot;laptop&amp;quot; &amp;quot;tablet&amp;quot; &amp;quot;tablet&amp;quot; &amp;quot;laptop&amp;quot; &amp;quot;laptop&amp;quot; &amp;quot;tablet&amp;quot; &amp;quot;mobile&amp;quot;
##  [897] &amp;quot;mobile&amp;quot; &amp;quot;laptop&amp;quot; &amp;quot;tablet&amp;quot; &amp;quot;tablet&amp;quot; &amp;quot;mobile&amp;quot; &amp;quot;laptop&amp;quot; &amp;quot;laptop&amp;quot;
##  [904] &amp;quot;tablet&amp;quot; &amp;quot;tablet&amp;quot; &amp;quot;tablet&amp;quot; &amp;quot;tablet&amp;quot; &amp;quot;laptop&amp;quot; &amp;quot;mobile&amp;quot; &amp;quot;laptop&amp;quot;
##  [911] &amp;quot;tablet&amp;quot; &amp;quot;laptop&amp;quot; &amp;quot;laptop&amp;quot; &amp;quot;mobile&amp;quot; &amp;quot;mobile&amp;quot; &amp;quot;mobile&amp;quot; &amp;quot;laptop&amp;quot;
##  [918] &amp;quot;mobile&amp;quot; &amp;quot;laptop&amp;quot; &amp;quot;mobile&amp;quot; &amp;quot;tablet&amp;quot; &amp;quot;tablet&amp;quot; &amp;quot;mobile&amp;quot; &amp;quot;tablet&amp;quot;
##  [925] &amp;quot;laptop&amp;quot; &amp;quot;mobile&amp;quot; &amp;quot;tablet&amp;quot; &amp;quot;mobile&amp;quot; &amp;quot;tablet&amp;quot; &amp;quot;tablet&amp;quot; &amp;quot;tablet&amp;quot;
##  [932] &amp;quot;laptop&amp;quot; &amp;quot;mobile&amp;quot; &amp;quot;mobile&amp;quot; &amp;quot;tablet&amp;quot; &amp;quot;mobile&amp;quot; &amp;quot;mobile&amp;quot; &amp;quot;laptop&amp;quot;
##  [939] &amp;quot;tablet&amp;quot; &amp;quot;tablet&amp;quot; &amp;quot;tablet&amp;quot; &amp;quot;tablet&amp;quot; &amp;quot;tablet&amp;quot; &amp;quot;mobile&amp;quot; &amp;quot;tablet&amp;quot;
##  [946] &amp;quot;mobile&amp;quot; &amp;quot;tablet&amp;quot; &amp;quot;tablet&amp;quot; &amp;quot;mobile&amp;quot; &amp;quot;mobile&amp;quot; &amp;quot;tablet&amp;quot; &amp;quot;tablet&amp;quot;
##  [953] &amp;quot;mobile&amp;quot; &amp;quot;tablet&amp;quot; &amp;quot;mobile&amp;quot; &amp;quot;laptop&amp;quot; &amp;quot;tablet&amp;quot; &amp;quot;tablet&amp;quot; &amp;quot;mobile&amp;quot;
##  [960] &amp;quot;laptop&amp;quot; &amp;quot;tablet&amp;quot; &amp;quot;laptop&amp;quot; &amp;quot;laptop&amp;quot; &amp;quot;mobile&amp;quot; &amp;quot;laptop&amp;quot; &amp;quot;tablet&amp;quot;
##  [967] &amp;quot;laptop&amp;quot; &amp;quot;tablet&amp;quot; &amp;quot;laptop&amp;quot; &amp;quot;laptop&amp;quot; &amp;quot;laptop&amp;quot; &amp;quot;mobile&amp;quot; &amp;quot;mobile&amp;quot;
##  [974] &amp;quot;tablet&amp;quot; &amp;quot;tablet&amp;quot; &amp;quot;tablet&amp;quot; &amp;quot;laptop&amp;quot; &amp;quot;laptop&amp;quot; &amp;quot;tablet&amp;quot; &amp;quot;mobile&amp;quot;
##  [981] &amp;quot;mobile&amp;quot; &amp;quot;tablet&amp;quot; &amp;quot;mobile&amp;quot; &amp;quot;mobile&amp;quot; &amp;quot;mobile&amp;quot; &amp;quot;laptop&amp;quot; &amp;quot;laptop&amp;quot;
##  [988] &amp;quot;laptop&amp;quot; &amp;quot;laptop&amp;quot; &amp;quot;laptop&amp;quot; &amp;quot;mobile&amp;quot; &amp;quot;tablet&amp;quot; &amp;quot;tablet&amp;quot; &amp;quot;tablet&amp;quot;
##  [995] &amp;quot;tablet&amp;quot; &amp;quot;mobile&amp;quot; &amp;quot;laptop&amp;quot; &amp;quot;tablet&amp;quot; &amp;quot;mobile&amp;quot; &amp;quot;mobile&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Extract the first column.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ecom %&amp;gt;%
  pull(1)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    [1]    1    2    3    4    5    6    7    8    9   10   11   12   13
##   [14]   14   15   16   17   18   19   20   21   22   23   24   25   26
##   [27]   27   28   29   30   31   32   33   34   35   36   37   38   39
##   [40]   40   41   42   43   44   45   46   47   48   49   50   51   52
##   [53]   53   54   55   56   57   58   59   60   61   62   63   64   65
##   [66]   66   67   68   69   70   71   72   73   74   75   76   77   78
##   [79]   79   80   81   82   83   84   85   86   87   88   89   90   91
##   [92]   92   93   94   95   96   97   98   99  100  101  102  103  104
##  [105]  105  106  107  108  109  110  111  112  113  114  115  116  117
##  [118]  118  119  120  121  122  123  124  125  126  127  128  129  130
##  [131]  131  132  133  134  135  136  137  138  139  140  141  142  143
##  [144]  144  145  146  147  148  149  150  151  152  153  154  155  156
##  [157]  157  158  159  160  161  162  163  164  165  166  167  168  169
##  [170]  170  171  172  173  174  175  176  177  178  179  180  181  182
##  [183]  183  184  185  186  187  188  189  190  191  192  193  194  195
##  [196]  196  197  198  199  200  201  202  203  204  205  206  207  208
##  [209]  209  210  211  212  213  214  215  216  217  218  219  220  221
##  [222]  222  223  224  225  226  227  228  229  230  231  232  233  234
##  [235]  235  236  237  238  239  240  241  242  243  244  245  246  247
##  [248]  248  249  250  251  252  253  254  255  256  257  258  259  260
##  [261]  261  262  263  264  265  266  267  268  269  270  271  272  273
##  [274]  274  275  276  277  278  279  280  281  282  283  284  285  286
##  [287]  287  288  289  290  291  292  293  294  295  296  297  298  299
##  [300]  300  301  302  303  304  305  306  307  308  309  310  311  312
##  [313]  313  314  315  316  317  318  319  320  321  322  323  324  325
##  [326]  326  327  328  329  330  331  332  333  334  335  336  337  338
##  [339]  339  340  341  342  343  344  345  346  347  348  349  350  351
##  [352]  352  353  354  355  356  357  358  359  360  361  362  363  364
##  [365]  365  366  367  368  369  370  371  372  373  374  375  376  377
##  [378]  378  379  380  381  382  383  384  385  386  387  388  389  390
##  [391]  391  392  393  394  395  396  397  398  399  400  401  402  403
##  [404]  404  405  406  407  408  409  410  411  412  413  414  415  416
##  [417]  417  418  419  420  421  422  423  424  425  426  427  428  429
##  [430]  430  431  432  433  434  435  436  437  438  439  440  441  442
##  [443]  443  444  445  446  447  448  449  450  451  452  453  454  455
##  [456]  456  457  458  459  460  461  462  463  464  465  466  467  468
##  [469]  469  470  471  472  473  474  475  476  477  478  479  480  481
##  [482]  482  483  484  485  486  487  488  489  490  491  492  493  494
##  [495]  495  496  497  498  499  500  501  502  503  504  505  506  507
##  [508]  508  509  510  511  512  513  514  515  516  517  518  519  520
##  [521]  521  522  523  524  525  526  527  528  529  530  531  532  533
##  [534]  534  535  536  537  538  539  540  541  542  543  544  545  546
##  [547]  547  548  549  550  551  552  553  554  555  556  557  558  559
##  [560]  560  561  562  563  564  565  566  567  568  569  570  571  572
##  [573]  573  574  575  576  577  578  579  580  581  582  583  584  585
##  [586]  586  587  588  589  590  591  592  593  594  595  596  597  598
##  [599]  599  600  601  602  603  604  605  606  607  608  609  610  611
##  [612]  612  613  614  615  616  617  618  619  620  621  622  623  624
##  [625]  625  626  627  628  629  630  631  632  633  634  635  636  637
##  [638]  638  639  640  641  642  643  644  645  646  647  648  649  650
##  [651]  651  652  653  654  655  656  657  658  659  660  661  662  663
##  [664]  664  665  666  667  668  669  670  671  672  673  674  675  676
##  [677]  677  678  679  680  681  682  683  684  685  686  687  688  689
##  [690]  690  691  692  693  694  695  696  697  698  699  700  701  702
##  [703]  703  704  705  706  707  708  709  710  711  712  713  714  715
##  [716]  716  717  718  719  720  721  722  723  724  725  726  727  728
##  [729]  729  730  731  732  733  734  735  736  737  738  739  740  741
##  [742]  742  743  744  745  746  747  748  749  750  751  752  753  754
##  [755]  755  756  757  758  759  760  761  762  763  764  765  766  767
##  [768]  768  769  770  771  772  773  774  775  776  777  778  779  780
##  [781]  781  782  783  784  785  786  787  788  789  790  791  792  793
##  [794]  794  795  796  797  798  799  800  801  802  803  804  805  806
##  [807]  807  808  809  810  811  812  813  814  815  816  817  818  819
##  [820]  820  821  822  823  824  825  826  827  828  829  830  831  832
##  [833]  833  834  835  836  837  838  839  840  841  842  843  844  845
##  [846]  846  847  848  849  850  851  852  853  854  855  856  857  858
##  [859]  859  860  861  862  863  864  865  866  867  868  869  870  871
##  [872]  872  873  874  875  876  877  878  879  880  881  882  883  884
##  [885]  885  886  887  888  889  890  891  892  893  894  895  896  897
##  [898]  898  899  900  901  902  903  904  905  906  907  908  909  910
##  [911]  911  912  913  914  915  916  917  918  919  920  921  922  923
##  [924]  924  925  926  927  928  929  930  931  932  933  934  935  936
##  [937]  937  938  939  940  941  942  943  944  945  946  947  948  949
##  [950]  950  951  952  953  954  955  956  957  958  959  960  961  962
##  [963]  963  964  965  966  967  968  969  970  971  972  973  974  975
##  [976]  976  977  978  979  980  981  982  983  984  985  986  987  988
##  [989]  989  990  991  992  993  994  995  996  997  998  999 1000&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Extract the last column&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ecom %&amp;gt;%
  pull(-1)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    [1]    0    0    0  434    0    0    0    0    0    0    0    0  651
##   [14]  362 2423    0 1049    0 1304 2077    0    0  237    0    0    0
##   [27]  622    0    0    0    0    0    0 1613    0 1885    0    0    0
##   [40]    0  184    0    0    0    0    0    0    0 1515    0    0    0
##   [53]    0    0    0    0 1532    0    0    0    0    0    0 2798  370
##   [66]    0    0    0    0    0    0 2216    0    0    0  632    0    0
##   [79]    0    0    0    0    0    0    0    0    0    0 2001    0    0
##   [92] 1273    0  286    0  722    0  764    0    0 1667  583    0    0
##  [105]    0    0    0    0    0    0    0  287 1482    0 2514    0    0
##  [118]    0    0 1772    0    0    0    0 1443    0    0    0    0    0
##  [131]  489    0    0 2449    0    0    0    0  287    0    0    0 2824
##  [144]    0 2086    0 2055    0  393    0    0  907    0    0    0 1670
##  [157]    0 1358 1833    0    0    0    0    0    0 1155  837    0    0
##  [170]    0    0    0  358    0    0    0 1252    0    0    0    0 2429
##  [183]    0    0    0    0 1286    0    0    0    0    0 1578    0    0
##  [196]    0    0    0    0    0    0    0    0    0    0    0    0  178
##  [209]    0    0    0    0    0    0    0    0 1758    0 1021    0 2208
##  [222] 2373    0    0 1257    0  288    0    0    0    0    0    0    0
##  [235]    0    0    0    0    0    0 1537    0    0    0    0    0    0
##  [248]    0    0    0 2157    0 2091  343    0 2629    0    0    0 2992
##  [261]    0    0    0    0    0    0    0    0 2633  947 2367    0    0
##  [274]  813    0    0 1179    0 2251    0    0    0    0    0    0    0
##  [287]    0 2929    0 2896    0 1748    0  610    0    0    0 1203    0
##  [300]    0 1152    0    0    0  631  632    0    0    0    0    0 2578
##  [313]    0    0    0    0 1753    0 2894 2716 2433    0    0 2488    0
##  [326]    0    0  714    0 1560    0    0    0    0    0    0    0    0
##  [339]    0    0 2274    0    0    0    0 2028    0 2011    0 2765    0
##  [352] 2636    0    0 1648    0    0    0 2694    0    0 2281    0    0
##  [365]    0    0    0    0    0    0    0    0    0    0    0    0    0
##  [378]    0    0    0    0    0 2057    0    0    0    0    0    0 1629
##  [391] 1652    0    0    0 1662  472 1508    0    0  139    0    0    0
##  [404] 2482    0    0  312 2605    0 1255    0    0    0  260    0 1729
##  [417]    0    0    0 2144 1288    0    0    0 1912 2642   44    0    0
##  [430]    0    0    0    0 1436    0    0    0    0  969 1625    0    0
##  [443]    0  793 2754    0    0  996    0    0    0    0 2826    0    0
##  [456] 2182    0    0    0 1743    0    0    0    0 1436    0 2063 1598
##  [469]    0  671    0  683    0    0    0    0  364 2720    0    0    0
##  [482]    0 1622 1719    0    0  697    0    0    0 1034    0    0    0
##  [495] 2367    0    0    0    0    0    0    0    0    0  510    0 1201
##  [508] 1760    0    0    0    0 1504    0    0    0    0    0    0 2332
##  [521]  153    0    0    0    0    0 2676    0    0    0    0    0 2462
##  [534]    0    0    0   54 2781    0    0    0    0    0    0 1395 1648
##  [547]    0    0    0    0    0    0    0  487    0  898    0    0    0
##  [560]    0  293    0  866    0    0    0 1270    0 2770    0    0 1931
##  [573]    0    0 2036    0    0    0    0    0    0    0 1861    0    0
##  [586]    0    0    0    0    0    0    0 2943    0    0    0    0    0
##  [599]    0    0    0  968    0    0 1345    0    0    0    0    0    0
##  [612]   17 1747  122    0    0    0    0    0    0    0 2000    0    0
##  [625] 2092    0    0    0    0   75    0    0    0  388    0 1782    0
##  [638]    0    0  463    0 1523    0    0    0    0    0    0   27    0
##  [651]    0    0    0    0    0  683    0    0    0    0    0 1057    0
##  [664] 2702    0    0    0    0    0    0    0    0    0    0 1922    0
##  [677]    0  935    0    0    0 2006    0    0 1733    0  828    0 1178
##  [690] 2001    0    0    0    0    0    0    0 1669    0 2302 2780    0
##  [703]    0    0    0    0 1645 1894    0    0    0    0   37 1368    0
##  [716]    0    0    0    0    0    0    0   98    0  154    0    0    0
##  [729]    0    0 2876 2781    0    0    0    0    0    0    0    0 1268
##  [742]    0    0    0    0 1238    0    0 1384    0    0    0    0    0
##  [755] 2671  462    0    0  388    0    0    0    0    0 1531    0 2419
##  [768]    0    0  576    0    0    0    0 2717    0    0    0    0 1320
##  [781]    0    0    0    0  980    0    0   29    0    0 2845    0    0
##  [794]    0    0    0    0    0 1503    0    0   68    0    0    0 1516
##  [807]    0    0 2882    0    0    0 2560   26 1762    0    0    0    0
##  [820]    0    0    0    0    0 1523    0 2429 1153    0    0    0    0
##  [833]    0    0    0    0    0 1992 2991 2235  820 2717    0    0    0
##  [846]    0    0    0    0    0    0    0 2122    0    0    0    0    0
##  [859]    0 1936    0    0    0    0    0    0    0 2436    0    0    0
##  [872]    0 1564  621    0 1801    0    0    0    0    0 2802    0    0
##  [885]    0    0    0    0  399    0    0    0    0    0    0    0 2094
##  [898]    0    0 2043    0    0 1725    0 2826    0    0    0  637    0
##  [911] 1722    0 1736 1607    0  735    0    0    0    0 2857    0    0
##  [924] 2171    0    0    0    0    0  964 1497    0 1354 1749    0    0
##  [937] 1421    0    0    0   27    0    0    0    0 1093    0    0    0
##  [950]    0 1478  389 2591    0    0    0    0    0    0    0 2648    0
##  [963]    0    0    0    0 1397  982    0    0    0    0    0    0    0
##  [976]    0    0    0 1390 2006    0    0    0    0    0    0  510    0
##  [989] 2397    0 2409 1232    0    0    0    0 2250    0    0    0&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;slice-rows&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Slice Rows&lt;/h3&gt;
&lt;p&gt;Extract the first 20 rows.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ecom %&amp;gt;%
  slice(1:20)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 20 x 11
##       id referrer device bouncers n_visit n_pages duration        country purchase order_items order_value
##    &amp;lt;int&amp;gt;    &amp;lt;chr&amp;gt;  &amp;lt;chr&amp;gt;    &amp;lt;chr&amp;gt;   &amp;lt;int&amp;gt;   &amp;lt;dbl&amp;gt;    &amp;lt;int&amp;gt;          &amp;lt;chr&amp;gt;    &amp;lt;chr&amp;gt;       &amp;lt;dbl&amp;gt;       &amp;lt;dbl&amp;gt;
##  1     1   google laptop     true      10       1       27 Czech Republic    false           0           0
##  2     2    yahoo tablet     true       9       1      899          Yemen    false           0           0
##  3     3   direct laptop     true       0       1       72         Brazil    false           0           0
##  4     4     bing tablet    false       3      18      155          China     true           6         434
##  5     5    yahoo mobile     true       9       1      899         Poland    false           0           0
##  6     6    yahoo laptop    false       5       5      573   South Africa    false           0           0
##  7     7    yahoo mobile     true      10       1      692     Bangladesh    false           0           0
##  8     8   direct mobile     true      10       1      578      Indonesia    false           0           0
##  9     9     bing mobile    false       3      19      794    Netherlands    false           0           0
## 10    10   google mobile     true       6       1      762 Czech Republic    false           0           0
## 11    11   direct laptop     true       9       1      905        Jamaica    false           0           0
## 12    12   direct tablet    false       6      12      999        Estonia    false           0           0
## 13    13   direct mobile    false       9      14      386        Ireland     true           3         651
## 14    14    yahoo tablet    false       5       8      260    Philippines     true           2         362
## 15    15    yahoo mobile    false       7       1      447         France     true           7        2423
## 16    16     bing laptop     true       1       1      289  United States    false           0           0
## 17    17     bing tablet    false       5      16       96           Peru     true           6        1049
## 18    18   google tablet     true       7       1      166          China    false           0           0
## 19    19   social tablet    false       7      10      346       Colombia     true           9        1304
## 20    20   social tablet    false       2       1      412        Namibia     true           7        2077&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Extract the last row.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ecom %&amp;gt;%
  slice(n())&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 1 x 11
##      id referrer device bouncers n_visit n_pages duration country purchase order_items order_value
##   &amp;lt;int&amp;gt;    &amp;lt;chr&amp;gt;  &amp;lt;chr&amp;gt;    &amp;lt;chr&amp;gt;   &amp;lt;int&amp;gt;   &amp;lt;dbl&amp;gt;    &amp;lt;int&amp;gt;   &amp;lt;chr&amp;gt;    &amp;lt;chr&amp;gt;       &amp;lt;dbl&amp;gt;       &amp;lt;dbl&amp;gt;
## 1  1000   google mobile     true       9       1       48   China    false           0           0&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;count-of-observations&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Count of observations&lt;/h3&gt;
&lt;p&gt;Total number of observations in the data.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ecom %&amp;gt;%
  tally()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 1 x 1
##       n
##   &amp;lt;int&amp;gt;
## 1  1000&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Observations of different types of referrers.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ecom %&amp;gt;%
  group_by(referrer) %&amp;gt;%
  tally()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 5 x 2
##   referrer     n
##      &amp;lt;chr&amp;gt; &amp;lt;int&amp;gt;
## 1     bing   194
## 2   direct   191
## 3   google   208
## 4   social   200
## 5    yahoo   207&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Observations of referrers and bouncers.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ecom %&amp;gt;%
  group_by(referrer, bouncers) %&amp;gt;%
  tally()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 10 x 3
## # Groups:   referrer [?]
##    referrer bouncers     n
##       &amp;lt;chr&amp;gt;    &amp;lt;chr&amp;gt; &amp;lt;int&amp;gt;
##  1     bing    false   104
##  2     bing     true    90
##  3   direct    false    98
##  4   direct     true    93
##  5   google    false   101
##  6   google     true   107
##  7   social    false    93
##  8   social     true   107
##  9    yahoo    false   110
## 10    yahoo     true    97&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Observations of referrers and purchasers.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ecom %&amp;gt;%
  group_by(referrer, purchase) %&amp;gt;%
  tally()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 10 x 3
## # Groups:   referrer [?]
##    referrer purchase     n
##       &amp;lt;chr&amp;gt;    &amp;lt;chr&amp;gt; &amp;lt;int&amp;gt;
##  1     bing    false   148
##  2     bing     true    46
##  3   direct    false   137
##  4   direct     true    54
##  5   google    false   163
##  6   google     true    45
##  7   social    false   154
##  8   social     true    46
##  9    yahoo    false   144
## 10    yahoo     true    63&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ecom %&amp;gt;%
  group_by(referrer, purchase) %&amp;gt;%
  tally() %&amp;gt;%
  filter(purchase == &amp;#39;true&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 5 x 3
## # Groups:   referrer [5]
##   referrer purchase     n
##      &amp;lt;chr&amp;gt;    &amp;lt;chr&amp;gt; &amp;lt;int&amp;gt;
## 1     bing     true    46
## 2   direct     true    54
## 3   google     true    45
## 4   social     true    46
## 5    yahoo     true    63&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Use &lt;code&gt;count()&lt;/code&gt; instead of &lt;code&gt;tally()&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ecom %&amp;gt;%
  count(referrer, purchase)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 10 x 3
##    referrer purchase     n
##       &amp;lt;chr&amp;gt;    &amp;lt;chr&amp;gt; &amp;lt;int&amp;gt;
##  1     bing    false   148
##  2     bing     true    46
##  3   direct    false   137
##  4   direct     true    54
##  5   google    false   163
##  6   google     true    45
##  7   social    false   154
##  8   social     true    46
##  9    yahoo    false   144
## 10    yahoo     true    63&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Top 2 referrers that bring orders.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ecom %&amp;gt;%
  count(referrer, purchase) %&amp;gt;%
  filter(purchase == &amp;#39;true&amp;#39;) %&amp;gt;%
  arrange(desc(n)) %&amp;gt;%
  top_n(n = 2)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Selecting by n&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 2 x 3
##   referrer purchase     n
##      &amp;lt;chr&amp;gt;    &amp;lt;chr&amp;gt; &amp;lt;int&amp;gt;
## 1    yahoo     true    63
## 2   direct     true    54&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ecom %&amp;gt;%
  pull(n_pages) %&amp;gt;%
  between(5, 15) &lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    [1] FALSE FALSE FALSE FALSE FALSE  TRUE FALSE FALSE FALSE FALSE FALSE
##   [12]  TRUE  TRUE  TRUE FALSE FALSE FALSE FALSE  TRUE FALSE FALSE FALSE
##   [23]  TRUE FALSE FALSE FALSE FALSE FALSE FALSE  TRUE FALSE FALSE FALSE
##   [34] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE  TRUE FALSE  TRUE
##   [45] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE  TRUE FALSE FALSE
##   [56] FALSE  TRUE FALSE FALSE FALSE FALSE FALSE FALSE  TRUE  TRUE  TRUE
##   [67] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
##   [78] FALSE FALSE  TRUE FALSE FALSE FALSE FALSE FALSE FALSE FALSE  TRUE
##   [89]  TRUE FALSE FALSE  TRUE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
##  [100] FALSE  TRUE FALSE  TRUE FALSE FALSE FALSE FALSE FALSE FALSE  TRUE
##  [111] FALSE  TRUE FALSE  TRUE  TRUE FALSE FALSE FALSE FALSE  TRUE FALSE
##  [122] FALSE FALSE FALSE  TRUE FALSE FALSE FALSE FALSE FALSE  TRUE FALSE
##  [133] FALSE FALSE FALSE FALSE FALSE FALSE  TRUE FALSE FALSE  TRUE FALSE
##  [144] FALSE  TRUE FALSE  TRUE FALSE FALSE  TRUE FALSE FALSE FALSE FALSE
##  [155]  TRUE FALSE  TRUE  TRUE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
##  [166] FALSE FALSE  TRUE  TRUE FALSE  TRUE FALSE  TRUE FALSE  TRUE FALSE
##  [177] FALSE  TRUE FALSE FALSE FALSE FALSE  TRUE FALSE FALSE FALSE FALSE
##  [188] FALSE FALSE  TRUE FALSE FALSE  TRUE FALSE FALSE FALSE FALSE FALSE
##  [199]  TRUE FALSE  TRUE  TRUE FALSE FALSE FALSE FALSE  TRUE FALSE FALSE
##  [210] FALSE FALSE FALSE FALSE  TRUE FALSE FALSE  TRUE FALSE FALSE  TRUE
##  [221] FALSE  TRUE  TRUE  TRUE  TRUE FALSE  TRUE FALSE FALSE  TRUE FALSE
##  [232] FALSE FALSE FALSE FALSE FALSE FALSE FALSE  TRUE FALSE  TRUE  TRUE
##  [243] FALSE  TRUE FALSE FALSE FALSE FALSE  TRUE FALSE  TRUE FALSE FALSE
##  [254]  TRUE FALSE  TRUE  TRUE FALSE FALSE  TRUE FALSE FALSE FALSE FALSE
##  [265] FALSE FALSE FALSE FALSE  TRUE  TRUE  TRUE  TRUE FALSE FALSE FALSE
##  [276] FALSE FALSE  TRUE  TRUE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
##  [287] FALSE  TRUE FALSE FALSE FALSE  TRUE FALSE FALSE FALSE  TRUE  TRUE
##  [298] FALSE FALSE FALSE  TRUE  TRUE FALSE FALSE  TRUE  TRUE  TRUE  TRUE
##  [309] FALSE  TRUE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE  TRUE
##  [320] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE  TRUE FALSE FALSE
##  [331] FALSE  TRUE FALSE  TRUE FALSE FALSE  TRUE FALSE FALSE FALSE  TRUE
##  [342] FALSE FALSE  TRUE FALSE FALSE FALSE FALSE FALSE  TRUE FALSE FALSE
##  [353] FALSE FALSE FALSE FALSE FALSE  TRUE  TRUE FALSE FALSE FALSE  TRUE
##  [364] FALSE FALSE FALSE FALSE FALSE FALSE  TRUE FALSE FALSE FALSE FALSE
##  [375] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE  TRUE  TRUE
##  [386]  TRUE FALSE FALSE  TRUE  TRUE  TRUE FALSE FALSE FALSE  TRUE  TRUE
##  [397]  TRUE FALSE FALSE  TRUE  TRUE FALSE FALSE FALSE FALSE  TRUE  TRUE
##  [408] FALSE FALSE FALSE FALSE FALSE  TRUE FALSE FALSE FALSE FALSE FALSE
##  [419] FALSE FALSE FALSE FALSE FALSE FALSE  TRUE  TRUE FALSE FALSE FALSE
##  [430]  TRUE FALSE FALSE FALSE FALSE  TRUE FALSE FALSE FALSE  TRUE FALSE
##  [441] FALSE FALSE FALSE FALSE  TRUE FALSE FALSE FALSE  TRUE FALSE FALSE
##  [452]  TRUE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
##  [463] FALSE FALSE FALSE FALSE  TRUE FALSE FALSE  TRUE  TRUE  TRUE FALSE
##  [474] FALSE FALSE FALSE FALSE FALSE FALSE FALSE  TRUE FALSE  TRUE FALSE
##  [485] FALSE FALSE  TRUE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
##  [496] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
##  [507]  TRUE FALSE FALSE FALSE FALSE FALSE  TRUE FALSE FALSE FALSE FALSE
##  [518] FALSE FALSE  TRUE  TRUE FALSE  TRUE FALSE FALSE  TRUE  TRUE FALSE
##  [529]  TRUE FALSE FALSE FALSE  TRUE FALSE FALSE FALSE FALSE  TRUE FALSE
##  [540] FALSE FALSE  TRUE FALSE FALSE FALSE  TRUE FALSE FALSE FALSE FALSE
##  [551] FALSE  TRUE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE  TRUE
##  [562] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE  TRUE
##  [573] FALSE FALSE FALSE FALSE  TRUE FALSE FALSE FALSE FALSE  TRUE FALSE
##  [584] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE  TRUE  TRUE FALSE
##  [595] FALSE FALSE  TRUE FALSE FALSE  TRUE FALSE  TRUE FALSE FALSE FALSE
##  [606] FALSE FALSE FALSE FALSE FALSE FALSE FALSE  TRUE FALSE FALSE FALSE
##  [617] FALSE FALSE FALSE  TRUE  TRUE  TRUE FALSE FALSE  TRUE  TRUE FALSE
##  [628]  TRUE FALSE FALSE FALSE  TRUE FALSE  TRUE FALSE FALSE FALSE FALSE
##  [639] FALSE FALSE FALSE FALSE  TRUE FALSE FALSE  TRUE FALSE FALSE FALSE
##  [650] FALSE FALSE  TRUE FALSE FALSE FALSE  TRUE FALSE FALSE  TRUE FALSE
##  [661] FALSE FALSE FALSE  TRUE FALSE FALSE FALSE FALSE FALSE FALSE  TRUE
##  [672] FALSE  TRUE FALSE  TRUE FALSE FALSE  TRUE FALSE FALSE FALSE FALSE
##  [683] FALSE FALSE  TRUE FALSE  TRUE FALSE FALSE  TRUE  TRUE FALSE FALSE
##  [694] FALSE FALSE FALSE FALSE  TRUE FALSE  TRUE  TRUE FALSE FALSE  TRUE
##  [705] FALSE FALSE  TRUE  TRUE FALSE  TRUE FALSE FALSE  TRUE FALSE FALSE
##  [716] FALSE FALSE FALSE  TRUE FALSE FALSE FALSE FALSE FALSE  TRUE FALSE
##  [727] FALSE FALSE FALSE FALSE  TRUE FALSE FALSE FALSE FALSE  TRUE FALSE
##  [738] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE  TRUE  TRUE FALSE
##  [749] FALSE FALSE FALSE FALSE FALSE FALSE FALSE  TRUE FALSE FALSE FALSE
##  [760]  TRUE FALSE FALSE FALSE FALSE  TRUE FALSE  TRUE FALSE  TRUE  TRUE
##  [771] FALSE  TRUE FALSE FALSE FALSE FALSE FALSE FALSE FALSE  TRUE FALSE
##  [782] FALSE FALSE FALSE  TRUE  TRUE FALSE  TRUE FALSE FALSE FALSE FALSE
##  [793] FALSE  TRUE FALSE  TRUE FALSE FALSE  TRUE FALSE  TRUE  TRUE FALSE
##  [804] FALSE FALSE FALSE FALSE FALSE FALSE FALSE  TRUE  TRUE  TRUE FALSE
##  [815] FALSE FALSE FALSE FALSE FALSE  TRUE  TRUE  TRUE  TRUE FALSE FALSE
##  [826] FALSE FALSE  TRUE FALSE FALSE FALSE FALSE  TRUE FALSE FALSE FALSE
##  [837] FALSE  TRUE  TRUE  TRUE FALSE  TRUE  TRUE FALSE  TRUE FALSE FALSE
##  [848] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
##  [859] FALSE  TRUE FALSE FALSE FALSE FALSE FALSE  TRUE FALSE  TRUE FALSE
##  [870] FALSE  TRUE FALSE FALSE FALSE FALSE FALSE  TRUE FALSE  TRUE FALSE
##  [881] FALSE  TRUE FALSE FALSE FALSE FALSE  TRUE FALSE FALSE FALSE  TRUE
##  [892] FALSE  TRUE FALSE FALSE FALSE FALSE  TRUE FALSE FALSE  TRUE FALSE
##  [903]  TRUE FALSE FALSE FALSE  TRUE FALSE FALSE FALSE  TRUE FALSE FALSE
##  [914] FALSE FALSE  TRUE FALSE FALSE FALSE FALSE FALSE  TRUE  TRUE  TRUE
##  [925] FALSE FALSE  TRUE FALSE FALSE  TRUE FALSE FALSE  TRUE FALSE FALSE
##  [936] FALSE  TRUE FALSE FALSE FALSE  TRUE FALSE FALSE  TRUE  TRUE  TRUE
##  [947] FALSE  TRUE FALSE  TRUE FALSE  TRUE  TRUE FALSE FALSE FALSE  TRUE
##  [958] FALSE  TRUE  TRUE FALSE FALSE FALSE FALSE  TRUE FALSE  TRUE FALSE
##  [969] FALSE FALSE FALSE FALSE FALSE FALSE FALSE  TRUE FALSE FALSE FALSE
##  [980]  TRUE FALSE FALSE FALSE FALSE FALSE FALSE  TRUE  TRUE  TRUE FALSE
##  [991]  TRUE FALSE FALSE FALSE  TRUE FALSE  TRUE FALSE FALSE FALSE&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;mtcars %&amp;gt;%
  select(mpg, disp, cyl, gear, carb) %&amp;gt;%
  mutate(
    type = case_when(
      disp &amp;gt; 200 ~ &amp;#39;dabba&amp;#39;,
      cyl == 8 ~ &amp;#39;kachda&amp;#39;,
      TRUE ~ &amp;#39;worst&amp;#39;
    )
  )&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##     mpg  disp cyl gear carb  type
## 1  21.0 160.0   6    4    4 worst
## 2  21.0 160.0   6    4    4 worst
## 3  22.8 108.0   4    4    1 worst
## 4  21.4 258.0   6    3    1 dabba
## 5  18.7 360.0   8    3    2 dabba
## 6  18.1 225.0   6    3    1 dabba
## 7  14.3 360.0   8    3    4 dabba
## 8  24.4 146.7   4    4    2 worst
## 9  22.8 140.8   4    4    2 worst
## 10 19.2 167.6   6    4    4 worst
## 11 17.8 167.6   6    4    4 worst
## 12 16.4 275.8   8    3    3 dabba
## 13 17.3 275.8   8    3    3 dabba
## 14 15.2 275.8   8    3    3 dabba
## 15 10.4 472.0   8    3    4 dabba
## 16 10.4 460.0   8    3    4 dabba
## 17 14.7 440.0   8    3    4 dabba
## 18 32.4  78.7   4    4    1 worst
## 19 30.4  75.7   4    4    2 worst
## 20 33.9  71.1   4    4    1 worst
## 21 21.5 120.1   4    3    1 worst
## 22 15.5 318.0   8    3    2 dabba
## 23 15.2 304.0   8    3    2 dabba
## 24 13.3 350.0   8    3    4 dabba
## 25 19.2 400.0   8    3    2 dabba
## 26 27.3  79.0   4    4    1 worst
## 27 26.0 120.3   4    5    2 worst
## 28 30.4  95.1   4    5    2 worst
## 29 15.8 351.0   8    5    4 dabba
## 30 19.7 145.0   6    5    6 worst
## 31 15.0 301.0   8    5    8 dabba
## 32 21.4 121.0   4    4    2 worst&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ecom %&amp;gt;%
  pull(referrer) %&amp;gt;%
  nth(1)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;google&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ecom %&amp;gt;%
  pull(referrer) %&amp;gt;%
  nth(1000)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;google&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ecom %&amp;gt;%
  pull(referrer) %&amp;gt;%
  last()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;google&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ecom %&amp;gt;%
  pull(referrer) %&amp;gt;%
  first()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;google&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Data Manipulation in R with dplyr - Part 2</title>
      <link>/post/data-manipulation-in-r-with-dplyr-part-2/</link>
      <pubDate>Mon, 22 May 2017 00:00:00 +0000</pubDate>
      
      <guid>/post/data-manipulation-in-r-with-dplyr-part-2/</guid>
      <description>&lt;!-- BLOGDOWN-HEAD --&gt;
&lt;!-- /BLOGDOWN-HEAD --&gt;

&lt;!-- BLOGDOWN-BODY-BEFORE --&gt;
&lt;!-- /BLOGDOWN-BODY-BEFORE --&gt;
&lt;div id=&#34;introduction&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Introduction&lt;/h1&gt;
&lt;p&gt;In a previous &lt;a href=&#34;http://www.rsquaredacademy.com/blog/post/data-manipulation-in-r-with-dplyr-part-1/&#34;&gt;post&lt;/a&gt;, we learnt about dplyr verbs and used them to compute average order value for an e-commerce website data. In this post, we will learn to combine tables using different &lt;code&gt;join&lt;/code&gt; functions provided in dplyr. Let us assume we have 2 tables &lt;strong&gt;X&lt;/strong&gt; and &lt;strong&gt;y&lt;/strong&gt;. Below are the different types of &lt;code&gt;join&lt;/code&gt; functions provided in dplyr.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;inner_join()&lt;/code&gt;: return all rows from x where there are matching values in y, and all columns from x and y. If there are multiple matches between x and y, all combination of the matches are returned.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;left_join()&lt;/code&gt;: return all rows from x, and all columns from x and y. Rows in x with no match in y will have NA values in the new columns. If there are multiple matches between x and y, all combinations of the matches are returned.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;right_join()&lt;/code&gt;: return all rows from y, and all columns from x and y. Rows in y with no match in x will have NA values in the new columns. If there are multiple matches between x and y, all combinations of the matches are returned.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;semi_join()&lt;/code&gt;: return all rows from x where there are matching values in y, keeping just columns from x. A semi join differs from an inner join because an inner join will return one row of x for each matching row of y, where a semi join will never duplicate rows of x.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;anti_join()&lt;/code&gt;: return all rows from x where there are not matching values in y, keeping just columns from x.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;full_join()&lt;/code&gt;: return all rows and all columns from both x and y. Where there are not matching values, returns NA for the one missing.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div id=&#34;case-study&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Case Study&lt;/h2&gt;
&lt;p&gt;We have two data sets with details of customers and their orders. We will use the above functions to combine the data sets in different ways to glean information about customer orders. Let us import the data from our github repository:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;order &amp;lt;- readr::read_csv(&amp;#39;https://raw.githubusercontent.com/rsquaredacademy/datasets/master/order.csv&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Parsed with column specification:
## cols(
##   id = col_integer(),
##   order_data = col_character(),
##   order_number = col_integer(),
##   customer_id = col_integer(),
##   amount = col_double()
## )&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;order&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 300 x 5
##       id order_data order_number customer_id  amount
##    &amp;lt;int&amp;gt;      &amp;lt;chr&amp;gt;        &amp;lt;int&amp;gt;       &amp;lt;int&amp;gt;   &amp;lt;dbl&amp;gt;
##  1   368   7/2/2016       543346         352  364.97
##  2   286  11/2/2016       543390         305 2063.53
##  3    28  2/22/2017       543404          78  432.06
##  4   309   3/5/2017       543389         447  480.22
##  5     2 12/28/2016       543233         374  235.37
##  6    31 12/30/2016       543475          48 2745.24
##  7   179 12/21/2016       543155         280 2358.25
##  8   484 11/24/2016       543485         445 1030.58
##  9   115   9/9/2016       543489         278 1217.50
## 10   340   5/6/2017       543246         131 1184.39
## # ... with 290 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;customer &amp;lt;- readr::read_csv(&amp;#39;https://raw.githubusercontent.com/rsquaredacademy/datasets/master/customer.csv&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Parsed with column specification:
## cols(
##   id = col_integer(),
##   first_name = col_character(),
##   last_name = col_character(),
##   city = col_character(),
##   phone = col_character()
## )&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;customer&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 91 x 5
##       id first_name             last_name       city           phone
##    &amp;lt;int&amp;gt;      &amp;lt;chr&amp;gt;                 &amp;lt;chr&amp;gt;      &amp;lt;chr&amp;gt;           &amp;lt;chr&amp;gt;
##  1     1  Elbertine            Robertucci California 1-(805)951-9083
##  2     2   Marcella              Kilshall   Colorado 1-(303)642-9320
##  3     3      Daria de la Valette Parisot    Florida 1-(352)629-9125
##  4     4   Sherilyn                  Widd Distric... 1-(202)453-3897
##  5     5      Ketty               Cridlin      Texas 1-(214)455-2169
##  6     6     Jethro            Lubomirski California 1-(510)278-9668
##  7     7   Jeremiah              Carrabot California 1-(559)713-9864
##  8     8 Constancia              Eastmead      Texas 1-(806)550-1701
##  9     9      Muire             Prestwich      Idaho 1-(208)811-7437
## 10    10    Abigail                Craigs      Texas 1-(469)653-1340
## # ... with 81 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;div id=&#34;inner-join&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;inner join&lt;/h3&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;customer %&amp;gt;%
  inner_join(order)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Joining, by = &amp;quot;id&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 55 x 9
##       id first_name  last_name       city           phone order_data order_number customer_id  amount
##    &amp;lt;int&amp;gt;      &amp;lt;chr&amp;gt;      &amp;lt;chr&amp;gt;      &amp;lt;chr&amp;gt;           &amp;lt;chr&amp;gt;      &amp;lt;chr&amp;gt;        &amp;lt;int&amp;gt;       &amp;lt;int&amp;gt;   &amp;lt;dbl&amp;gt;
##  1     2   Marcella   Kilshall   Colorado 1-(303)642-9320 12/28/2016       543233         374  235.37
##  2     2   Marcella   Kilshall   Colorado 1-(303)642-9320  8/31/2016       543129         334 1150.40
##  3     5      Ketty    Cridlin      Texas 1-(214)455-2169  1/17/2017       543453         475  346.07
##  4     6     Jethro Lubomirski California 1-(510)278-9668  1/27/2017       543274         218 2317.16
##  5     7   Jeremiah   Carrabot California 1-(559)713-9864  6/21/2016       543423         282  135.53
##  6     7   Jeremiah   Carrabot California 1-(559)713-9864  2/13/2017       543379         346 1407.32
##  7     7   Jeremiah   Carrabot California 1-(559)713-9864   7/8/2016       543477         483 1913.79
##  8     8 Constancia   Eastmead      Texas 1-(806)550-1701  11/5/2016       543157         341 2461.46
##  9     8 Constancia   Eastmead      Texas 1-(806)550-1701  5/19/2017       543117         364 2714.20
## 10     9      Muire  Prestwich      Idaho 1-(208)811-7437 12/28/2016       543201         207  187.03
## # ... with 45 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;left-join&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;left join&lt;/h3&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;customer %&amp;gt;%
  left_join(order)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Joining, by = &amp;quot;id&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 104 x 9
##       id first_name             last_name       city           phone order_data order_number customer_id  amount
##    &amp;lt;int&amp;gt;      &amp;lt;chr&amp;gt;                 &amp;lt;chr&amp;gt;      &amp;lt;chr&amp;gt;           &amp;lt;chr&amp;gt;      &amp;lt;chr&amp;gt;        &amp;lt;int&amp;gt;       &amp;lt;int&amp;gt;   &amp;lt;dbl&amp;gt;
##  1     1  Elbertine            Robertucci California 1-(805)951-9083       &amp;lt;NA&amp;gt;           NA          NA      NA
##  2     2   Marcella              Kilshall   Colorado 1-(303)642-9320 12/28/2016       543233         374  235.37
##  3     2   Marcella              Kilshall   Colorado 1-(303)642-9320  8/31/2016       543129         334 1150.40
##  4     3      Daria de la Valette Parisot    Florida 1-(352)629-9125       &amp;lt;NA&amp;gt;           NA          NA      NA
##  5     4   Sherilyn                  Widd Distric... 1-(202)453-3897       &amp;lt;NA&amp;gt;           NA          NA      NA
##  6     5      Ketty               Cridlin      Texas 1-(214)455-2169  1/17/2017       543453         475  346.07
##  7     6     Jethro            Lubomirski California 1-(510)278-9668  1/27/2017       543274         218 2317.16
##  8     7   Jeremiah              Carrabot California 1-(559)713-9864  6/21/2016       543423         282  135.53
##  9     7   Jeremiah              Carrabot California 1-(559)713-9864  2/13/2017       543379         346 1407.32
## 10     7   Jeremiah              Carrabot California 1-(559)713-9864   7/8/2016       543477         483 1913.79
## # ... with 94 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;right-join&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;right join&lt;/h3&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;customer %&amp;gt;%
  right_join(order)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Joining, by = &amp;quot;id&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 300 x 9
##       id first_name last_name      city           phone order_data order_number customer_id  amount
##    &amp;lt;int&amp;gt;      &amp;lt;chr&amp;gt;     &amp;lt;chr&amp;gt;     &amp;lt;chr&amp;gt;           &amp;lt;chr&amp;gt;      &amp;lt;chr&amp;gt;        &amp;lt;int&amp;gt;       &amp;lt;int&amp;gt;   &amp;lt;dbl&amp;gt;
##  1   368       &amp;lt;NA&amp;gt;      &amp;lt;NA&amp;gt;      &amp;lt;NA&amp;gt;            &amp;lt;NA&amp;gt;   7/2/2016       543346         352  364.97
##  2   286       &amp;lt;NA&amp;gt;      &amp;lt;NA&amp;gt;      &amp;lt;NA&amp;gt;            &amp;lt;NA&amp;gt;  11/2/2016       543390         305 2063.53
##  3    28      Avrit    Lerven     Texas 1-(817)651-5322  2/22/2017       543404          78  432.06
##  4   309       &amp;lt;NA&amp;gt;      &amp;lt;NA&amp;gt;      &amp;lt;NA&amp;gt;            &amp;lt;NA&amp;gt;   3/5/2017       543389         447  480.22
##  5     2   Marcella  Kilshall  Colorado 1-(303)642-9320 12/28/2016       543233         374  235.37
##  6    31    Clemmie   McKeady Tennessee 1-(865)334-8263 12/30/2016       543475          48 2745.24
##  7   179       &amp;lt;NA&amp;gt;      &amp;lt;NA&amp;gt;      &amp;lt;NA&amp;gt;            &amp;lt;NA&amp;gt; 12/21/2016       543155         280 2358.25
##  8   484       &amp;lt;NA&amp;gt;      &amp;lt;NA&amp;gt;      &amp;lt;NA&amp;gt;            &amp;lt;NA&amp;gt; 11/24/2016       543485         445 1030.58
##  9   115       &amp;lt;NA&amp;gt;      &amp;lt;NA&amp;gt;      &amp;lt;NA&amp;gt;            &amp;lt;NA&amp;gt;   9/9/2016       543489         278 1217.50
## 10   340       &amp;lt;NA&amp;gt;      &amp;lt;NA&amp;gt;      &amp;lt;NA&amp;gt;            &amp;lt;NA&amp;gt;   5/6/2017       543246         131 1184.39
## # ... with 290 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;semi-join&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;semi join&lt;/h3&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;customer %&amp;gt;%
  semi_join(order)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Joining, by = &amp;quot;id&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 42 x 5
##       id first_name   last_name       city           phone
##    &amp;lt;int&amp;gt;      &amp;lt;chr&amp;gt;       &amp;lt;chr&amp;gt;      &amp;lt;chr&amp;gt;           &amp;lt;chr&amp;gt;
##  1    28      Avrit      Lerven      Texas 1-(817)651-5322
##  2     2   Marcella    Kilshall   Colorado 1-(303)642-9320
##  3    31    Clemmie     McKeady  Tennessee 1-(865)334-8263
##  4     8 Constancia    Eastmead      Texas 1-(806)550-1701
##  5    16    Monique     Van Zon   Missouri 1-(314)444-6148
##  6    15  Valentijn      Reddel California 1-(562)760-7094
##  7    65       Thea       Prose      Texas 1-(214)513-8473
##  8    50     Trudie   Bartolijn       Iowa 1-(515)197-8097
##  9    47  Radcliffe        Aers California 1-(213)580-7332
## 10    41      Alana Biesterfeld California 1-(661)871-1329
## # ... with 32 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;anti-join&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;anti join&lt;/h3&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;customer %&amp;gt;%
  anti_join(order)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Joining, by = &amp;quot;id&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 49 x 5
##       id first_name             last_name       city           phone
##    &amp;lt;int&amp;gt;      &amp;lt;chr&amp;gt;                 &amp;lt;chr&amp;gt;      &amp;lt;chr&amp;gt;           &amp;lt;chr&amp;gt;
##  1     1  Elbertine            Robertucci California 1-(805)951-9083
##  2     3      Daria de la Valette Parisot    Florida 1-(352)629-9125
##  3     4   Sherilyn                  Widd Distric... 1-(202)453-3897
##  4    10    Abigail                Craigs      Texas 1-(469)653-1340
##  5    11      Wynne                 Roote    Georgia 1-(404)911-0264
##  6    12     Pietra                Hynson  Minnesota 1-(651)506-8628
##  7    13       Bram                 Valde       Iowa 1-(515)637-1353
##  8    14       Rees           MacAllester   New York 1-(716)187-2661
##  9    17     Orazio                Boddis  Louisiana 1-(318)313-4592
## 10    18      Mason             Letterick      Texas 1-(806)351-0113
## # ... with 39 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;full-join&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;full join&lt;/h3&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;customer %&amp;gt;%
  full_join(order)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Joining, by = &amp;quot;id&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 349 x 9
##       id first_name             last_name       city           phone order_data order_number customer_id  amount
##    &amp;lt;int&amp;gt;      &amp;lt;chr&amp;gt;                 &amp;lt;chr&amp;gt;      &amp;lt;chr&amp;gt;           &amp;lt;chr&amp;gt;      &amp;lt;chr&amp;gt;        &amp;lt;int&amp;gt;       &amp;lt;int&amp;gt;   &amp;lt;dbl&amp;gt;
##  1     1  Elbertine            Robertucci California 1-(805)951-9083       &amp;lt;NA&amp;gt;           NA          NA      NA
##  2     2   Marcella              Kilshall   Colorado 1-(303)642-9320 12/28/2016       543233         374  235.37
##  3     2   Marcella              Kilshall   Colorado 1-(303)642-9320  8/31/2016       543129         334 1150.40
##  4     3      Daria de la Valette Parisot    Florida 1-(352)629-9125       &amp;lt;NA&amp;gt;           NA          NA      NA
##  5     4   Sherilyn                  Widd Distric... 1-(202)453-3897       &amp;lt;NA&amp;gt;           NA          NA      NA
##  6     5      Ketty               Cridlin      Texas 1-(214)455-2169  1/17/2017       543453         475  346.07
##  7     6     Jethro            Lubomirski California 1-(510)278-9668  1/27/2017       543274         218 2317.16
##  8     7   Jeremiah              Carrabot California 1-(559)713-9864  6/21/2016       543423         282  135.53
##  9     7   Jeremiah              Carrabot California 1-(559)713-9864  2/13/2017       543379         346 1407.32
## 10     7   Jeremiah              Carrabot California 1-(559)713-9864   7/8/2016       543477         483 1913.79
## # ... with 339 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Introduction to tibbles</title>
      <link>/post/introduction-to-tibbles/</link>
      <pubDate>Sat, 22 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>/post/introduction-to-tibbles/</guid>
      <description>&lt;!-- BLOGDOWN-HEAD --&gt;
&lt;!-- /BLOGDOWN-HEAD --&gt;

&lt;!-- BLOGDOWN-BODY-BEFORE --&gt;
&lt;!-- /BLOGDOWN-BODY-BEFORE --&gt;
&lt;div id=&#34;introduction&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Introduction&lt;/h1&gt;
&lt;p&gt;tibbles are a modern version of data frames that retain the good aspects (of data frames) while getting rid of the frustrating and annoying parts. tibbles are part of the &lt;a href=&#34;http://tidyverse.org/&#34;&gt;tidyverse&lt;/a&gt;. In this post, we will learn how tibbles makes certain parts of the data analysis workflow easier by being different from data frames. Specifically, we will learn&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;how to create tibbles&lt;/li&gt;
&lt;li&gt;how to convert other objects to tibbles&lt;/li&gt;
&lt;li&gt;compare tibbles with data frames&lt;/li&gt;
&lt;li&gt;to manipulate tibbles&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;div id=&#34;creating-tibbles&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Creating tibbles&lt;/h2&gt;
&lt;p&gt;In this first section, we will create tibbles using the &lt;code&gt;tibble()&lt;/code&gt; function.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;tibble(x = letters,
       y = 1:26,
       z = sample(100, 26))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 26 x 3
##        x     y     z
##    &amp;lt;chr&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt;
##  1     a     1    90
##  2     b     2    68
##  3     c     3    56
##  4     d     4     9
##  5     e     5     6
##  6     f     6    66
##  7     g     7   100
##  8     h     8    61
##  9     i     9    35
## 10     j    10     4
## # ... with 16 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;tibble-features&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;tibble features&lt;/h2&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;div id=&#34;never-changes-inputs-type&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;never changes inputâ€™s type&lt;/h3&gt;
&lt;p&gt;In the &lt;code&gt;data.frame()&lt;/code&gt; function, any column with &lt;code&gt;character&lt;/code&gt; data is converted to &lt;code&gt;factors&lt;/code&gt; unless you set &lt;code&gt;stringsAsFactors&lt;/code&gt; argument to &lt;code&gt;FALSE&lt;/code&gt;. tibble takes care of this by never changing any inputâ€™s type. As you can observe in the below example, tibbles do not convert &lt;code&gt;characters&lt;/code&gt; to &lt;code&gt;factors&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;tibble(x = letters,
       y = 1:26,
       z = sample(100, 26))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 26 x 3
##        x     y     z
##    &amp;lt;chr&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt;
##  1     a     1    43
##  2     b     2    61
##  3     c     3     9
##  4     d     4    94
##  5     e     5    23
##  6     f     6    35
##  7     g     7    29
##  8     h     8    36
##  9     i     9    65
## 10     j    10    38
## # ... with 16 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;never-adjusts-variable-names&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;never adjusts variable names&lt;/h3&gt;
&lt;p&gt;If there is more than one word in a variable name, &lt;code&gt;data.frame()&lt;/code&gt; will add a &lt;code&gt;.&lt;/code&gt; and join them but tibble never adjusts variable names. Below is an example:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;names(data.frame(`order value` = 10))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;order.value&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;names(tibble(`order value` = 10))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;order value&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;never-prints-all-rows&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;never prints all rows&lt;/h3&gt;
&lt;p&gt;tibble only shows the first ten rows and all the columns that fit on one screen. Below the column names, it prints the column type as well. Let us look at an example:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;x &amp;lt;- 1:100
y &amp;lt;- letters[1]
z &amp;lt;- sample(c(TRUE, FALSE), 100, replace = TRUE)
tibble(x, y, z)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 100 x 3
##        x     y     z
##    &amp;lt;int&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;lgl&amp;gt;
##  1     1     a FALSE
##  2     2     a  TRUE
##  3     3     a FALSE
##  4     4     a FALSE
##  5     5     a  TRUE
##  6     6     a  TRUE
##  7     7     a FALSE
##  8     8     a FALSE
##  9     9     a  TRUE
## 10    10     a  TRUE
## # ... with 90 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;never-recycles-vectors-of-length-greater-than-1&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;never recycles vectors of length greater than 1&lt;/h3&gt;
&lt;p&gt;tibble will never recycle a vector of length greater than 1. If you observe the previous example, we could have used all the letters instead of just the first letter but tibble will return an error if the vectors are of length greater than 1.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;creating-tibbles-ii&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Creating tibbles II&lt;/h2&gt;
&lt;p&gt;In the previous section, we created tibbles using the &lt;code&gt;tibble()&lt;/code&gt; function by directly inputting data as arguments. In this section, we will convert the following objects to tibble using the &lt;code&gt;as_tibble()&lt;/code&gt; function:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;data.frame&lt;/li&gt;
&lt;li&gt;list&lt;/li&gt;
&lt;li&gt;matrix&lt;/li&gt;
&lt;li&gt;table&lt;/li&gt;
&lt;li&gt;tbl_df&lt;/li&gt;
&lt;li&gt;atomic vectors&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;div id=&#34;dataframes&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;DataFrames&lt;/h3&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;as_tibble(iris)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 150 x 5
##    Sepal.Length Sepal.Width Petal.Length Petal.Width Species
##           &amp;lt;dbl&amp;gt;       &amp;lt;dbl&amp;gt;        &amp;lt;dbl&amp;gt;       &amp;lt;dbl&amp;gt;  &amp;lt;fctr&amp;gt;
##  1          5.1         3.5          1.4         0.2  setosa
##  2          4.9         3.0          1.4         0.2  setosa
##  3          4.7         3.2          1.3         0.2  setosa
##  4          4.6         3.1          1.5         0.2  setosa
##  5          5.0         3.6          1.4         0.2  setosa
##  6          5.4         3.9          1.7         0.4  setosa
##  7          4.6         3.4          1.4         0.3  setosa
##  8          5.0         3.4          1.5         0.2  setosa
##  9          4.4         2.9          1.4         0.2  setosa
## 10          4.9         3.1          1.5         0.1  setosa
## # ... with 140 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;lists&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Lists&lt;/h3&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;l &amp;lt;- list(x = 1:32, y = sample(100, 32), z = replicate(32, letters, simplify = FALSE))
as_tibble(l)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 32 x 3
##        x     y          z
##    &amp;lt;int&amp;gt; &amp;lt;int&amp;gt;     &amp;lt;list&amp;gt;
##  1     1    77 &amp;lt;chr [26]&amp;gt;
##  2     2    58 &amp;lt;chr [26]&amp;gt;
##  3     3    49 &amp;lt;chr [26]&amp;gt;
##  4     4    14 &amp;lt;chr [26]&amp;gt;
##  5     5    80 &amp;lt;chr [26]&amp;gt;
##  6     6    50 &amp;lt;chr [26]&amp;gt;
##  7     7    35 &amp;lt;chr [26]&amp;gt;
##  8     8    94 &amp;lt;chr [26]&amp;gt;
##  9     9    72 &amp;lt;chr [26]&amp;gt;
## 10    10     5 &amp;lt;chr [26]&amp;gt;
## # ... with 22 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;matrix&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Matrix&lt;/h3&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;m &amp;lt;- matrix(sample(1000, 2600, replace = TRUE), ncol = 26)
colnames(m) &amp;lt;- letters
as_tibble(m)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 100 x 26
##        a     b     c     d     e     f     g     h     i     j     k     l
##    &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt;
##  1    81   434   176   625   955   471    72   966   173   879   828   829
##  2   179    81   390   255    94   857   111   263   158   166   998   752
##  3   650   296   922   869    63   952   830   279   139   221   838   968
##  4   686   648   328    95   285   785   714    96   317   168   478   267
##  5   791   455   198   626    39   687   691   602   294   324   379   851
##  6   599   332   986   555    82   337   666   199   295   759   686    16
##  7   128   145   975   976   666   510   756   597   730   899   143   797
##  8   952   774   664   458   683   807   287   500   104   883   745   584
##  9   709   116   508   701   472   995   794   657   403   443   243   551
## 10   946   600   603   184   202   746   790   190   989   338   605   806
## # ... with 90 more rows, and 14 more variables: m &amp;lt;int&amp;gt;, n &amp;lt;int&amp;gt;, o &amp;lt;int&amp;gt;,
## #   p &amp;lt;int&amp;gt;, q &amp;lt;int&amp;gt;, r &amp;lt;int&amp;gt;, s &amp;lt;int&amp;gt;, t &amp;lt;int&amp;gt;, u &amp;lt;int&amp;gt;, v &amp;lt;int&amp;gt;,
## #   w &amp;lt;int&amp;gt;, x &amp;lt;int&amp;gt;, y &amp;lt;int&amp;gt;, z &amp;lt;int&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;table&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Table&lt;/h3&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;k &amp;lt;- table(mtcars$cyl)
as_tibble(k)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 3 x 2
##    Var1     n
##   &amp;lt;chr&amp;gt; &amp;lt;int&amp;gt;
## 1     4    11
## 2     6     7
## 3     8    14&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;tbl_df&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;tbl_df&lt;/h3&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;k &amp;lt;- tbl_df(iris)
as_tibble(k)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 150 x 5
##    Sepal.Length Sepal.Width Petal.Length Petal.Width Species
##           &amp;lt;dbl&amp;gt;       &amp;lt;dbl&amp;gt;        &amp;lt;dbl&amp;gt;       &amp;lt;dbl&amp;gt;  &amp;lt;fctr&amp;gt;
##  1          5.1         3.5          1.4         0.2  setosa
##  2          4.9         3.0          1.4         0.2  setosa
##  3          4.7         3.2          1.3         0.2  setosa
##  4          4.6         3.1          1.5         0.2  setosa
##  5          5.0         3.6          1.4         0.2  setosa
##  6          5.4         3.9          1.7         0.4  setosa
##  7          4.6         3.4          1.4         0.3  setosa
##  8          5.0         3.4          1.5         0.2  setosa
##  9          4.4         2.9          1.4         0.2  setosa
## 10          4.9         3.1          1.5         0.1  setosa
## # ... with 140 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;atomic-vectors&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;atomic vectors&lt;/h3&gt;
&lt;p&gt;We can create tibbles from atomic vectors using the &lt;code&gt;enframe()&lt;/code&gt; functions. Let us use the web traffic data and create a tibble for the browsers.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;browsers &amp;lt;- c(&amp;#39;chrome&amp;#39;, &amp;#39;safari&amp;#39;, &amp;#39;firefox&amp;#39;, &amp;#39;edge&amp;#39;)
enframe(browsers)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 4 x 2
##    name   value
##   &amp;lt;int&amp;gt;   &amp;lt;chr&amp;gt;
## 1     1  chrome
## 2     2  safari
## 3     3 firefox
## 4     4    edge&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;browsers &amp;lt;- c(chrome = 40, firefox = 20, edge = 30, safari = 10)
enframe(browsers)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 4 x 2
##      name value
##     &amp;lt;chr&amp;gt; &amp;lt;dbl&amp;gt;
## 1  chrome    40
## 2 firefox    20
## 3    edge    30
## 4  safari    10&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;We can test if an object is a tibble using the &lt;code&gt;is_tibble()&lt;/code&gt; function.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;is_tibble(mtcars)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] FALSE&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;is_tibble(as_tibble(mtcars))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] TRUE&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;tribble&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Tribble&lt;/h2&gt;
&lt;p&gt;Another way to create tibbles is using the &lt;code&gt;tribble()&lt;/code&gt; function. tribble is short for transposed tibbles. It is customized for data entry in code. Column names start with &lt;code&gt;~&lt;/code&gt; and values are separated by commas. Below is an example:&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;tribble(
  ~x, ~y, ~z,
  #--|--|----
  1, TRUE, &amp;#39;a&amp;#39;,
  2, FALSE, &amp;#39;b&amp;#39;
)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 2 x 3
##       x     y     z
##   &amp;lt;dbl&amp;gt; &amp;lt;lgl&amp;gt; &amp;lt;chr&amp;gt;
## 1     1  TRUE     a
## 2     2 FALSE     b&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;column-names&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Column Names&lt;/h2&gt;
&lt;p&gt;Names of the columns in tibbles need not be valid R variable names. They can contain unusual characters like a space or a smiley but must be enclosed in ticks. Below is an example:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;tibble(
  ` ` = &amp;#39;space&amp;#39;,
  `2` = &amp;#39;integer&amp;#39;,
  `:)` = &amp;#39;smiley&amp;#39;
)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 1 x 3
##     ` `     `2`   `:)`
##   &amp;lt;chr&amp;gt;   &amp;lt;chr&amp;gt;  &amp;lt;chr&amp;gt;
## 1 space integer smiley&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;compare-tibbles&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Compare tibbles&lt;/h2&gt;
&lt;p&gt;We can compare tibbles using the &lt;code&gt;all_equal()&lt;/code&gt; function from the &lt;a href=&#34;http://dplyr.tidyverse.org/&#34;&gt;dplyr&lt;/a&gt; package. We need to specify the tibbles being compared. Let us look at an example from the web traffic data. We have the details of browsers used in 2 formats. We will test if they are the same.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;div id=&#34;compare-browser-data&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Compare browser data&lt;/h3&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;browsers1 &amp;lt;- enframe(c(chrome = 40, firefox = 20, edge = 30, safari = 10))
browsers2 &amp;lt;- enframe(c(edge = 30, firefox = 20, safari = 10, chrome = 40))

all_equal(browsers1, browsers2)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] TRUE&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;compare-browser-data-by-ignoring-order-of-rows&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Compare browser data by ignoring order of rows&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;all_equal()&lt;/code&gt; function ignores the order of the rows while comparing the tibbles. Change this by setting &lt;code&gt;ignore_row_order&lt;/code&gt; to &lt;code&gt;TRUE&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;all_equal(browsers1, browsers2, ignore_row_order = FALSE)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;Same row values, but different order&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;compare-browser-data-by-ignoring-order-of-columns&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Compare browser data by ignoring order of columns&lt;/h3&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;traffic1 &amp;lt;- tibble(
  browsers = c(&amp;#39;chrome&amp;#39;, &amp;#39;firefox&amp;#39;, &amp;#39;edge&amp;#39;, &amp;#39;safari&amp;#39;),
  visit = c(40, 20, 30, 10),
  source = c(&amp;#39;search&amp;#39;, &amp;#39;social&amp;#39;, &amp;#39;direct&amp;#39;, &amp;#39;affiliates&amp;#39;),
  visits = c(35, 25, 10, 30)
)

traffic2 &amp;lt;- tibble(
  source = c(&amp;#39;search&amp;#39;, &amp;#39;social&amp;#39;, &amp;#39;direct&amp;#39;, &amp;#39;affiliates&amp;#39;),
  visits = c(35, 25, 10, 30),
  browsers = c(&amp;#39;chrome&amp;#39;, &amp;#39;firefox&amp;#39;, &amp;#39;edge&amp;#39;, &amp;#39;safari&amp;#39;),
  visit = c(40, 20, 30, 10)
)

all_equal(traffic1, traffic2)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] TRUE&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;The order of the columns can be compared by setting &lt;code&gt;ignore_col_order&lt;/code&gt; to &lt;code&gt;FALSE&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;all_equal(traffic1, traffic2, ignore_col_order = FALSE)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;Same column names, but different order&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;add-rowscolumns&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Add rows/columns&lt;/h2&gt;
&lt;p&gt;Let us go back to the web traffic data.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;browsers &amp;lt;- enframe(c(chrome = 40, firefox = 20, edge = 30))
browsers&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 3 x 2
##      name value
##     &amp;lt;chr&amp;gt; &amp;lt;dbl&amp;gt;
## 1  chrome    40
## 2 firefox    20
## 3    edge    30&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can add data for &lt;strong&gt;Safari&lt;/strong&gt; browser to the above tibble using the &lt;code&gt;add_row()&lt;/code&gt; function.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;add_row(browsers, name = &amp;#39;safari&amp;#39;, value = 10)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 4 x 2
##      name value
##     &amp;lt;chr&amp;gt; &amp;lt;dbl&amp;gt;
## 1  chrome    40
## 2 firefox    20
## 3    edge    30
## 4  safari    10&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If we want to add the data at a particular row, we can specify the row number using the &lt;code&gt;.before&lt;/code&gt; argument. Let us add the data for &lt;strong&gt;Safari&lt;/strong&gt; in the second row instead of the last row.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;add_row(browsers, name = &amp;#39;safari&amp;#39;, value = 10, .before = 2)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 4 x 2
##      name value
##     &amp;lt;chr&amp;gt; &amp;lt;dbl&amp;gt;
## 1  chrome    40
## 2  safari    10
## 3 firefox    20
## 4    edge    30&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Similarly, we can add a new column to the tibble using the &lt;code&gt;add_col()&lt;/code&gt; function.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;browsers &amp;lt;- enframe(c(chrome = 40, firefox = 20, edge = 30, safari = 10))
browsers&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 4 x 2
##      name value
##     &amp;lt;chr&amp;gt; &amp;lt;dbl&amp;gt;
## 1  chrome    40
## 2 firefox    20
## 3    edge    30
## 4  safari    10&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;add_column(browsers, visits = c(4000, 2000, 3000, 1000))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 4 x 3
##      name value visits
##     &amp;lt;chr&amp;gt; &amp;lt;dbl&amp;gt;  &amp;lt;dbl&amp;gt;
## 1  chrome    40   4000
## 2 firefox    20   2000
## 3    edge    30   3000
## 4  safari    10   1000&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;rownames&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Rownames&lt;/h2&gt;
&lt;p&gt;The &lt;a href=&#34;tibble.tidyverse.org&#34;&gt;tibble&lt;/a&gt; package provides a set of function to deal with rownames. Remember, &lt;code&gt;tibble&lt;/code&gt; does not have &lt;code&gt;rownames&lt;/code&gt; unlike &lt;code&gt;data.frame&lt;/code&gt;. To check whether a data set has rownames, use the &lt;code&gt;has_rownames()&lt;/code&gt; function.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;has_rownames(mtcars)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] TRUE&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To remove rownames from a data set, use the &lt;code&gt;remove_rownames()&lt;/code&gt; function:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;remove_rownames(mtcars)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##     mpg cyl  disp  hp drat    wt  qsec vs am gear carb
## 1  21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4
## 2  21.0   6 160.0 110 3.90 2.875 17.02  0  1    4    4
## 3  22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1
## 4  21.4   6 258.0 110 3.08 3.215 19.44  1  0    3    1
## 5  18.7   8 360.0 175 3.15 3.440 17.02  0  0    3    2
## 6  18.1   6 225.0 105 2.76 3.460 20.22  1  0    3    1
## 7  14.3   8 360.0 245 3.21 3.570 15.84  0  0    3    4
## 8  24.4   4 146.7  62 3.69 3.190 20.00  1  0    4    2
## 9  22.8   4 140.8  95 3.92 3.150 22.90  1  0    4    2
## 10 19.2   6 167.6 123 3.92 3.440 18.30  1  0    4    4
## 11 17.8   6 167.6 123 3.92 3.440 18.90  1  0    4    4
## 12 16.4   8 275.8 180 3.07 4.070 17.40  0  0    3    3
## 13 17.3   8 275.8 180 3.07 3.730 17.60  0  0    3    3
## 14 15.2   8 275.8 180 3.07 3.780 18.00  0  0    3    3
## 15 10.4   8 472.0 205 2.93 5.250 17.98  0  0    3    4
## 16 10.4   8 460.0 215 3.00 5.424 17.82  0  0    3    4
## 17 14.7   8 440.0 230 3.23 5.345 17.42  0  0    3    4
## 18 32.4   4  78.7  66 4.08 2.200 19.47  1  1    4    1
## 19 30.4   4  75.7  52 4.93 1.615 18.52  1  1    4    2
## 20 33.9   4  71.1  65 4.22 1.835 19.90  1  1    4    1
## 21 21.5   4 120.1  97 3.70 2.465 20.01  1  0    3    1
## 22 15.5   8 318.0 150 2.76 3.520 16.87  0  0    3    2
## 23 15.2   8 304.0 150 3.15 3.435 17.30  0  0    3    2
## 24 13.3   8 350.0 245 3.73 3.840 15.41  0  0    3    4
## 25 19.2   8 400.0 175 3.08 3.845 17.05  0  0    3    2
## 26 27.3   4  79.0  66 4.08 1.935 18.90  1  1    4    1
## 27 26.0   4 120.3  91 4.43 2.140 16.70  0  1    5    2
## 28 30.4   4  95.1 113 3.77 1.513 16.90  1  1    5    2
## 29 15.8   8 351.0 264 4.22 3.170 14.50  0  1    5    4
## 30 19.7   6 145.0 175 3.62 2.770 15.50  0  1    5    6
## 31 15.0   8 301.0 335 3.54 3.570 14.60  0  1    5    8
## 32 21.4   4 121.0 109 4.11 2.780 18.60  1  1    4    2&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To convert rownames to a column, use the &lt;code&gt;rownames_to_column()&lt;/code&gt; function:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;head(rownames_to_column(mtcars))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##             rowname  mpg cyl disp  hp drat    wt  qsec vs am gear carb
## 1         Mazda RX4 21.0   6  160 110 3.90 2.620 16.46  0  1    4    4
## 2     Mazda RX4 Wag 21.0   6  160 110 3.90 2.875 17.02  0  1    4    4
## 3        Datsun 710 22.8   4  108  93 3.85 2.320 18.61  1  1    4    1
## 4    Hornet 4 Drive 21.4   6  258 110 3.08 3.215 19.44  1  0    3    1
## 5 Hornet Sportabout 18.7   8  360 175 3.15 3.440 17.02  0  0    3    2
## 6           Valiant 18.1   6  225 105 2.76 3.460 20.22  1  0    3    1&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To convert the first column in the data set to rownames, use the &lt;code&gt;column_to_rownames()&lt;/code&gt; function:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;mtcars_tbl &amp;lt;- rownames_to_column(mtcars)
column_to_rownames(mtcars_tbl)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##                      mpg cyl  disp  hp drat    wt  qsec vs am gear carb
## Mazda RX4           21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4
## Mazda RX4 Wag       21.0   6 160.0 110 3.90 2.875 17.02  0  1    4    4
## Datsun 710          22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1
## Hornet 4 Drive      21.4   6 258.0 110 3.08 3.215 19.44  1  0    3    1
## Hornet Sportabout   18.7   8 360.0 175 3.15 3.440 17.02  0  0    3    2
## Valiant             18.1   6 225.0 105 2.76 3.460 20.22  1  0    3    1
## Duster 360          14.3   8 360.0 245 3.21 3.570 15.84  0  0    3    4
## Merc 240D           24.4   4 146.7  62 3.69 3.190 20.00  1  0    4    2
## Merc 230            22.8   4 140.8  95 3.92 3.150 22.90  1  0    4    2
## Merc 280            19.2   6 167.6 123 3.92 3.440 18.30  1  0    4    4
## Merc 280C           17.8   6 167.6 123 3.92 3.440 18.90  1  0    4    4
## Merc 450SE          16.4   8 275.8 180 3.07 4.070 17.40  0  0    3    3
## Merc 450SL          17.3   8 275.8 180 3.07 3.730 17.60  0  0    3    3
## Merc 450SLC         15.2   8 275.8 180 3.07 3.780 18.00  0  0    3    3
## Cadillac Fleetwood  10.4   8 472.0 205 2.93 5.250 17.98  0  0    3    4
## Lincoln Continental 10.4   8 460.0 215 3.00 5.424 17.82  0  0    3    4
## Chrysler Imperial   14.7   8 440.0 230 3.23 5.345 17.42  0  0    3    4
## Fiat 128            32.4   4  78.7  66 4.08 2.200 19.47  1  1    4    1
## Honda Civic         30.4   4  75.7  52 4.93 1.615 18.52  1  1    4    2
## Toyota Corolla      33.9   4  71.1  65 4.22 1.835 19.90  1  1    4    1
## Toyota Corona       21.5   4 120.1  97 3.70 2.465 20.01  1  0    3    1
## Dodge Challenger    15.5   8 318.0 150 2.76 3.520 16.87  0  0    3    2
## AMC Javelin         15.2   8 304.0 150 3.15 3.435 17.30  0  0    3    2
## Camaro Z28          13.3   8 350.0 245 3.73 3.840 15.41  0  0    3    4
## Pontiac Firebird    19.2   8 400.0 175 3.08 3.845 17.05  0  0    3    2
## Fiat X1-9           27.3   4  79.0  66 4.08 1.935 18.90  1  1    4    1
## Porsche 914-2       26.0   4 120.3  91 4.43 2.140 16.70  0  1    5    2
## Lotus Europa        30.4   4  95.1 113 3.77 1.513 16.90  1  1    5    2
## Ford Pantera L      15.8   8 351.0 264 4.22 3.170 14.50  0  1    5    4
## Ferrari Dino        19.7   6 145.0 175 3.62 2.770 15.50  0  1    5    6
## Maserati Bora       15.0   8 301.0 335 3.54 3.570 14.60  0  1    5    8
## Volvo 142E          21.4   4 121.0 109 4.11 2.780 18.60  1  1    4    2&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;miscellaneous&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Miscellaneous&lt;/h2&gt;
&lt;p&gt;Use the &lt;code&gt;glimpse()&lt;/code&gt; function to get an overview of the data.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;glimpse(mtcars)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Observations: 32
## Variables: 11
## $ mpg  &amp;lt;dbl&amp;gt; 21.0, 21.0, 22.8, 21.4, 18.7, 18.1, 14.3, 24.4, 22.8, 19....
## $ cyl  &amp;lt;dbl&amp;gt; 6, 6, 4, 6, 8, 6, 8, 4, 4, 6, 6, 8, 8, 8, 8, 8, 8, 4, 4, ...
## $ disp &amp;lt;dbl&amp;gt; 160.0, 160.0, 108.0, 258.0, 360.0, 225.0, 360.0, 146.7, 1...
## $ hp   &amp;lt;dbl&amp;gt; 110, 110, 93, 110, 175, 105, 245, 62, 95, 123, 123, 180, ...
## $ drat &amp;lt;dbl&amp;gt; 3.90, 3.90, 3.85, 3.08, 3.15, 2.76, 3.21, 3.69, 3.92, 3.9...
## $ wt   &amp;lt;dbl&amp;gt; 2.620, 2.875, 2.320, 3.215, 3.440, 3.460, 3.570, 3.190, 3...
## $ qsec &amp;lt;dbl&amp;gt; 16.46, 17.02, 18.61, 19.44, 17.02, 20.22, 15.84, 20.00, 2...
## $ vs   &amp;lt;dbl&amp;gt; 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, ...
## $ am   &amp;lt;dbl&amp;gt; 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, ...
## $ gear &amp;lt;dbl&amp;gt; 4, 4, 4, 3, 3, 3, 3, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 4, 4, ...
## $ carb &amp;lt;dbl&amp;gt; 4, 4, 1, 1, 2, 1, 4, 2, 2, 4, 4, 3, 3, 3, 4, 4, 4, 1, 2, ...&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;has_name()&lt;/code&gt; function can be used to check if a tibble has a specific column.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;has_name(mtcars, &amp;#39;cyl&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] TRUE&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;has_name(mtcars, &amp;#39;gears&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] FALSE&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Getting started with tidyverse</title>
      <link>/post/getting-started-with-tidyverse/</link>
      <pubDate>Thu, 06 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>/post/getting-started-with-tidyverse/</guid>
      <description>&lt;!-- BLOGDOWN-HEAD --&gt;
&lt;!-- /BLOGDOWN-HEAD --&gt;

&lt;!-- BLOGDOWN-BODY-BEFORE --&gt;
&lt;!-- /BLOGDOWN-BODY-BEFORE --&gt;
&lt;p&gt;This is the first post in the series &lt;strong&gt;Data Wrangling with R&lt;/strong&gt;. In this series, we will look at the challenges faced when working with data of different types coming from different sources and explore tools available in R to overcome such challenges.&lt;/p&gt;
&lt;div id=&#34;introduction&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;The &lt;a href=&#34;http://tidyverse.org/&#34;&gt;tidyverse&lt;/a&gt; is a collection of R packages that share a common underlying philosophy and are designed to work together. They share common data representations and API design.&lt;/p&gt;
&lt;p&gt;The core packages of tidyverse are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://ggplot2.tidyverse.org/&#34;&gt;ggplot2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://dplyr.tidyverse.org/&#34;&gt;dplyr&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://tidyr.tidyverse.org/&#34;&gt;tidyr&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://readr.tidyverse.org/&#34;&gt;readr&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://purrr.tidyverse.org/&#34;&gt;purrr&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://tibble.tidyverse.org/&#34;&gt;tibble&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Packages available for working with specific data types include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/tidyverse/hms&#34;&gt;hms&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://stringr.tidyverse.org/&#34;&gt;stringr&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://lubridate.tidyverse.org/&#34;&gt;lubridate&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://forcats.tidyverse.org/&#34;&gt;forcats&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The following packages make it easy to import data:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/wesm/feather&#34;&gt;feather&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://haven.tidyverse.org/&#34;&gt;haven&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://readxl.tidyverse.org/&#34;&gt;readxl&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jeroen/jsonlite&#34;&gt;jsonlite&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/r-lib/xml2&#34;&gt;xml2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/r-lib/httr&#34;&gt;httr&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/hadley/rvest&#34;&gt;rvest&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We will explore most of the above packages (except purrr, httr, rvest) using case studies and understand how using the tidyverse will streamline data analysis workflow by reducing the time spent on reshaping/restructuring data for different types of analysis. In the next post, we will learn about &lt;a href=&#34;http://tibble.tidyverse.org/&#34;&gt;tibbles&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Working with strings in R using stringr</title>
      <link>/post/working-with-strings-in-r-using-stringr/</link>
      <pubDate>Thu, 23 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>/post/working-with-strings-in-r-using-stringr/</guid>
      <description>&lt;!-- BLOGDOWN-HEAD --&gt;
&lt;!-- /BLOGDOWN-HEAD --&gt;

&lt;!-- BLOGDOWN-BODY-BEFORE --&gt;
&lt;!-- /BLOGDOWN-BODY-BEFORE --&gt;
&lt;div id=&#34;introduction&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Introduction&lt;/h1&gt;
&lt;p&gt;This is the 11th post in the series &lt;strong&gt;Data Wrangling with R&lt;/strong&gt;. In the previous &lt;a href=&#34;https://rsquaredacademy.github.io/blog/post/how-to-work-with-dates-in-r/&#34;&gt;post&lt;/a&gt;, we learnt to manipulate date and time using the &lt;a href=&#34;https://CRAN.R-project.org/package=lubridate&#34;&gt;lubridate&lt;/a&gt; package. In this post, we will learn to work with string data in R using &lt;a href=&#34;http://stringr.tidyverse.org&#34;&gt;stringr&lt;/a&gt;. Let us begin by installing and loading stringr and a set of other pacakges we will be using.&lt;/p&gt;
&lt;p&gt;As we did in the earlier posts in this series, we will use a case study to explore the various features of the stringr package. You can download the data for the case study from &lt;a href=&#34;https://raw.githubusercontent.com/rsquaredacademy/datasets/master/mock_strings.csv&#34;&gt;here&lt;/a&gt; or directly import the data using the readr package.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;mockstring &amp;lt;- readr::read_csv(&amp;#39;https://raw.githubusercontent.com/rsquaredacademy/datasets/master/mock_strings.csv&amp;#39;)
mockstring&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 1,000 x 16
##       id                bundle_id    app_name
##    &amp;lt;int&amp;gt;                    &amp;lt;chr&amp;gt;       &amp;lt;chr&amp;gt;
##  1     1       com.netlog.Cardify   Ronstring
##  2     2      com.devhub.Aerified     Fintone
##  3     3           int.who.Zathin Ventosanzap
##  4     4           jp.ne.goo.Rank     Redhold
##  5     5  au.gov.oaic.Stringtough    Tres-Zap
##  6     6           com.go.Pannier    Tampflex
##  7     7            com.webs.Stim     Bitchip
##  8     8        com.sogou.Bitchip      Namfix
##  9     9          com.amazon.Viva    Wrapsafe
## 10    10 com.theguardian.Domainer     Pannier
## # ... with 990 more rows, and 13 more variables: image_url &amp;lt;chr&amp;gt;,
## #   phrase &amp;lt;chr&amp;gt;, domain &amp;lt;chr&amp;gt;, imageurl &amp;lt;chr&amp;gt;, email &amp;lt;chr&amp;gt;,
## #   filename &amp;lt;chr&amp;gt;, denominatio &amp;lt;chr&amp;gt;, strings &amp;lt;chr&amp;gt;, phone &amp;lt;chr&amp;gt;,
## #   slogans &amp;lt;chr&amp;gt;, address &amp;lt;chr&amp;gt;, url &amp;lt;chr&amp;gt;, useragent &amp;lt;chr&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We will do the following in this case study:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;extract domain name from random email ids&lt;/li&gt;
&lt;li&gt;extract image type from url&lt;/li&gt;
&lt;li&gt;extract image dimension from url&lt;/li&gt;
&lt;li&gt;extract extension from domain name&lt;/li&gt;
&lt;li&gt;extract http protocol from url&lt;/li&gt;
&lt;li&gt;extract domain name from url&lt;/li&gt;
&lt;li&gt;extract extension from url&lt;/li&gt;
&lt;li&gt;extract file type from url&lt;/li&gt;
&lt;/ul&gt;
&lt;div id=&#34;extract-domain-name-from-random-email-ids&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;extract domain name from random email ids&lt;/h3&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;mockstring$email[1:2] %&amp;gt;% 
  str_split(pattern = &amp;#39;@&amp;#39;) %&amp;gt;%
  unlist() %&amp;gt;%
  str_subset(pattern = &amp;#39;\\.&amp;#39;) %&amp;gt;%
  str_split(pattern = &amp;#39;\\.&amp;#39;) %&amp;gt;%
  purrr::map_chr(extract(1))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;fastcompany&amp;quot; &amp;quot;digg&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;from-image-url-extract-image-type-jpg-png-bmp&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;from image url, extract image type (jpg, png, bmp)&lt;/h3&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;mockstring$imageurl[1:5] %&amp;gt;%
  str_split(pattern = &amp;#39;\\.&amp;#39;) %&amp;gt;%
  purrr::map_chr(extract(3)) %&amp;gt;%
  str_sub(start = 1, end = 3)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;jpg&amp;quot; &amp;quot;bmp&amp;quot; &amp;quot;bmp&amp;quot; &amp;quot;png&amp;quot; &amp;quot;jpg&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;mockstring$imageurl[1:5] %&amp;gt;%
  str_split(pattern = &amp;#39;\\.&amp;#39;) %&amp;gt;%
  purrr::map_chr(extract(3)) %&amp;gt;%
  str_split(pattern = &amp;#39;/&amp;#39;) %&amp;gt;%
  purrr::map_chr(extract(1))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;jpg&amp;quot; &amp;quot;bmp&amp;quot; &amp;quot;bmp&amp;quot; &amp;quot;png&amp;quot; &amp;quot;jpg&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;from-image-url-extract-dimension&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;from image url, extract dimension&lt;/h3&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;pattern &amp;lt;- &amp;quot;[:digits:]&amp;quot;
mockstring$imageurl[1:5] %&amp;gt;%
  str_locate(pattern = &amp;quot;[0-9]&amp;quot;) &lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##      start end
## [1,]    23  23
## [2,]    23  23
## [3,]    23  23
## [4,]    23  23
## [5,]    23  23&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;mockstring$imageurl[1:5] %&amp;gt;%
  str_sub(start = 23) %&amp;gt;%
  str_split(pattern = &amp;#39;\\.&amp;#39;) %&amp;gt;%
  purrr::map_chr(extract(1))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;130x183&amp;quot; &amp;quot;106x217&amp;quot; &amp;quot;146x127&amp;quot; &amp;quot;181x194&amp;quot; &amp;quot;220x123&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;extract-protocol&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;extract protocol&lt;/h3&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;mockstring$url[1:5] %&amp;gt;%
  str_split(pattern = &amp;#39;://&amp;#39;) %&amp;gt;%
  map_chr(extract(1))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;https&amp;quot; &amp;quot;http&amp;quot;  &amp;quot;https&amp;quot; &amp;quot;http&amp;quot;  &amp;quot;https&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;k &amp;lt;- mockstring$url[1:5] %&amp;gt;%
  str_locate(pattern = &amp;#39;://&amp;#39;) %&amp;gt;%
  data.frame() %&amp;gt;%
  extract2(&amp;#39;start&amp;#39;) %&amp;gt;%
  subtract(1)

mockstring$url[1:5] %&amp;gt;%
  str_sub(start = 1, end = k)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;https&amp;quot; &amp;quot;http&amp;quot;  &amp;quot;https&amp;quot; &amp;quot;http&amp;quot;  &amp;quot;https&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;extract-domain-name&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;extract domain name&lt;/h3&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;n &amp;lt;- mockstring$url[1:5] %&amp;gt;%
  str_locate_all(pattern = &amp;quot;/&amp;quot;) %&amp;gt;%
  map_int(extract(3))

mockstring$url[1:5] %&amp;gt;%
  str_sub(end = n) %&amp;gt;%
  str_split(pattern = &amp;#39;\\.&amp;#39;) %&amp;gt;%
  map_chr(extract(1)) %&amp;gt;%
  str_sub(start = k + 4)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;engadget&amp;quot;   &amp;quot;delicious&amp;quot;  &amp;quot;w3&amp;quot;         &amp;quot;indiatimes&amp;quot; &amp;quot;tumblr&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;extract-extension&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;extract extension&lt;/h3&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;mockstring$url[1:5] %&amp;gt;%
  str_sub(end = n) %&amp;gt;%
  str_split(pattern = &amp;#39;\\.&amp;#39;) %&amp;gt;%
  map_chr(extract(2)) %&amp;gt;%
  str_split(pattern = &amp;#39;/&amp;#39;) %&amp;gt;%
  map_chr(extract(1))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;com&amp;quot; &amp;quot;com&amp;quot; &amp;quot;org&amp;quot; &amp;quot;com&amp;quot; &amp;quot;com&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;extract-file-type&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;extract file type&lt;/h3&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# only 2 dots in the url
mockstring$url[1:3] %&amp;gt;%
  str_locate_all(pattern = &amp;#39;\\.&amp;#39;) %&amp;gt;%
  map_int(nrow) %&amp;gt;%
  is_greater_than(2) %&amp;gt;%
  sum()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 0&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# only 1 question mark in the url
mockstring$url[1:3] %&amp;gt;%
  str_locate_all(pattern = &amp;quot;[?]&amp;quot;) %&amp;gt;%
  map_int(nrow) %&amp;gt;%
  is_greater_than(1) %&amp;gt;%
  sum()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 0&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# location of second dot and 1 question mark
d &amp;lt;- mockstring$url[1:3] %&amp;gt;%
  str_locate_all(pattern = &amp;#39;\\.&amp;#39;) %&amp;gt;%
  map_int(extract(2)) %&amp;gt;%
  add(1)

q &amp;lt;- mockstring$url[1:3] %&amp;gt;%
  str_locate_all(pattern = &amp;quot;[?]&amp;quot;) %&amp;gt;%
  map_int(extract(1)) %&amp;gt;%
  subtract(1)

mockstring$url[1:3] %&amp;gt;% 
  str_sub(start = d, end = q)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;jsp&amp;quot;  &amp;quot;json&amp;quot; &amp;quot;json&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>How to work with dates in R</title>
      <link>/post/how-to-work-with-dates-in-r/</link>
      <pubDate>Thu, 09 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>/post/how-to-work-with-dates-in-r/</guid>
      <description>&lt;!-- BLOGDOWN-HEAD --&gt;
&lt;!-- /BLOGDOWN-HEAD --&gt;

&lt;!-- BLOGDOWN-BODY-BEFORE --&gt;
&lt;!-- /BLOGDOWN-BODY-BEFORE --&gt;
&lt;div id=&#34;introduction&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;This is the 5th post in the series &lt;strong&gt;Data Wrangling with R&lt;/strong&gt;. In the previous &lt;a href=&#34;https://rsquaredacademy.github.io/post/data-manipulation-in-r-with-dplyr/&#34;&gt;post&lt;/a&gt;, we learnt to manipulate dataframes using the &lt;a href=&#34;https://CRAN.R-project.org/package=dplyr&#34;&gt;dplyr&lt;/a&gt; package. In this post, we will learn to work with date/time data in R using &lt;a href=&#34;https://CRAN.R-project.org/package=lubridate&#34;&gt;lubridate&lt;/a&gt;, an R package that makes it easy to work with dates and time. Let us begin by installing and loading the lubridate pacakge.&lt;/p&gt;
&lt;div id=&#34;quick-overview&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Quick Overview&lt;/h3&gt;
&lt;p&gt;Use &lt;code&gt;origin&lt;/code&gt; to get the origin for the &lt;code&gt;Date&lt;/code&gt; and other date/time objects in R.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;lubridate::origin&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;1970-01-01 UTC&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There are functions to check current date, time, timezone and AM/PM. Let us take a quick look at these:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;now()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;2017-06-22 16:44:09 IST&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;today()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;2017-06-22&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;am(now())  &lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] FALSE&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;pm(now())&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] TRUE&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We will use a case study to explore the lubridate package. The data set can be downloaded from here or directly imported using the readr package.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;## Parsed with column specification:
## cols(
##   Invoice = col_date(format = &amp;quot;&amp;quot;),
##   Due = col_date(format = &amp;quot;&amp;quot;),
##   Payment = col_date(format = &amp;quot;&amp;quot;)
## )&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The data set has 3 columns:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Invoice: invoice date&lt;/li&gt;
&lt;li&gt;Due: due date&lt;/li&gt;
&lt;li&gt;Payment: payment date&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;All the dates are in the format (yyyy-mm-dd). We will use the functions in the lubridate package to answer a few questions we have about the transact data.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;extract date, month and year from Due&lt;/li&gt;
&lt;li&gt;compute the number of days to settle invoice&lt;/li&gt;
&lt;li&gt;compute days over due&lt;/li&gt;
&lt;li&gt;check if due year is a leap year&lt;/li&gt;
&lt;li&gt;check when due day in february is 29, whether it is a leap year&lt;/li&gt;
&lt;li&gt;how many invoices were settled within due date&lt;/li&gt;
&lt;li&gt;how many invoices are due in each quarter&lt;/li&gt;
&lt;li&gt;what is the average duration between invoice date and payment date&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;transact %&amp;gt;%
  mutate(
    due_day = day(Due),
    due_month = month(Due),
    due_year = year(Due)
  )&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 2,466 x 6
##       Invoice        Due    Payment due_day due_month due_year
##        &amp;lt;date&amp;gt;     &amp;lt;date&amp;gt;     &amp;lt;date&amp;gt;   &amp;lt;int&amp;gt;     &amp;lt;dbl&amp;gt;    &amp;lt;dbl&amp;gt;
##  1 2013-01-02 2013-02-01 2013-01-15       1         2     2013
##  2 2013-01-26 2013-02-25 2013-03-03      25         2     2013
##  3 2013-07-03 2013-08-02 2013-07-08       2         8     2013
##  4 2013-02-10 2013-03-12 2013-03-17      12         3     2013
##  5 2012-10-25 2012-11-24 2012-11-28      24        11     2012
##  6 2012-01-27 2012-02-26 2012-02-22      26         2     2012
##  7 2013-08-13 2013-09-12 2013-09-09      12         9     2013
##  8 2012-12-16 2013-01-15 2013-01-12      15         1     2013
##  9 2012-05-14 2012-06-13 2012-07-01      13         6     2012
## 10 2013-07-01 2013-07-31 2013-07-26      31         7     2013
## # ... with 2,456 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;transact %&amp;gt;%
  mutate(
    days_to_pay = Payment - Invoice
  )&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 2,466 x 4
##       Invoice        Due    Payment days_to_pay
##        &amp;lt;date&amp;gt;     &amp;lt;date&amp;gt;     &amp;lt;date&amp;gt;      &amp;lt;time&amp;gt;
##  1 2013-01-02 2013-02-01 2013-01-15     13 days
##  2 2013-01-26 2013-02-25 2013-03-03     36 days
##  3 2013-07-03 2013-08-02 2013-07-08      5 days
##  4 2013-02-10 2013-03-12 2013-03-17     35 days
##  5 2012-10-25 2012-11-24 2012-11-28     34 days
##  6 2012-01-27 2012-02-26 2012-02-22     26 days
##  7 2013-08-13 2013-09-12 2013-09-09     27 days
##  8 2012-12-16 2013-01-15 2013-01-12     27 days
##  9 2012-05-14 2012-06-13 2012-07-01     48 days
## 10 2013-07-01 2013-07-31 2013-07-26     25 days
## # ... with 2,456 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;transact %&amp;gt;%
  mutate(
    delay = Payment - Due
  )&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 2,466 x 4
##       Invoice        Due    Payment    delay
##        &amp;lt;date&amp;gt;     &amp;lt;date&amp;gt;     &amp;lt;date&amp;gt;   &amp;lt;time&amp;gt;
##  1 2013-01-02 2013-02-01 2013-01-15 -17 days
##  2 2013-01-26 2013-02-25 2013-03-03   6 days
##  3 2013-07-03 2013-08-02 2013-07-08 -25 days
##  4 2013-02-10 2013-03-12 2013-03-17   5 days
##  5 2012-10-25 2012-11-24 2012-11-28   4 days
##  6 2012-01-27 2012-02-26 2012-02-22  -4 days
##  7 2013-08-13 2013-09-12 2013-09-09  -3 days
##  8 2012-12-16 2013-01-15 2013-01-12  -3 days
##  9 2012-05-14 2012-06-13 2012-07-01  18 days
## 10 2013-07-01 2013-07-31 2013-07-26  -5 days
## # ... with 2,456 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;transact %&amp;gt;%
  mutate(
    due_year = year(Due),
    is_leap = leap_year(due_year)
  )&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 2,466 x 5
##       Invoice        Due    Payment due_year is_leap
##        &amp;lt;date&amp;gt;     &amp;lt;date&amp;gt;     &amp;lt;date&amp;gt;    &amp;lt;dbl&amp;gt;   &amp;lt;lgl&amp;gt;
##  1 2013-01-02 2013-02-01 2013-01-15     2013   FALSE
##  2 2013-01-26 2013-02-25 2013-03-03     2013   FALSE
##  3 2013-07-03 2013-08-02 2013-07-08     2013   FALSE
##  4 2013-02-10 2013-03-12 2013-03-17     2013   FALSE
##  5 2012-10-25 2012-11-24 2012-11-28     2012    TRUE
##  6 2012-01-27 2012-02-26 2012-02-22     2012    TRUE
##  7 2013-08-13 2013-09-12 2013-09-09     2013   FALSE
##  8 2012-12-16 2013-01-15 2013-01-12     2013   FALSE
##  9 2012-05-14 2012-06-13 2012-07-01     2012    TRUE
## 10 2013-07-01 2013-07-31 2013-07-26     2013   FALSE
## # ... with 2,456 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;transact %&amp;gt;%
  mutate(
    due_day = day(Due),
    due_month = month(Due),
    days_due_month = days_in_month(due_month),
    due_year = year(Due),
    is_leap = leap_year(due_year)
  ) %&amp;gt;%
  select(-(Invoice), -(Payment)) %&amp;gt;%
  filter(due_month == 2)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 187 x 6
##           Due due_day due_month days_due_month due_year is_leap
##        &amp;lt;date&amp;gt;   &amp;lt;int&amp;gt;     &amp;lt;dbl&amp;gt;          &amp;lt;int&amp;gt;    &amp;lt;dbl&amp;gt;   &amp;lt;lgl&amp;gt;
##  1 2013-02-01       1         2             28     2013   FALSE
##  2 2013-02-25      25         2             28     2013   FALSE
##  3 2012-02-26      26         2             28     2012    TRUE
##  4 2013-02-05       5         2             28     2013   FALSE
##  5 2012-02-23      23         2             28     2012    TRUE
##  6 2012-02-12      12         2             28     2012    TRUE
##  7 2012-02-12      12         2             28     2012    TRUE
##  8 2012-02-02       2         2             28     2012    TRUE
##  9 2012-02-21      21         2             28     2012    TRUE
## 10 2012-02-29      29         2             28     2012    TRUE
## # ... with 177 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;transact %&amp;gt;%
  mutate(
    inv_due_interval = interval(Invoice, Due),
    due_next = Due + days(1),
    due_pay_interval = interval(due_next, Payment),
    overlaps = int_overlaps(inv_due_interval, due_pay_interval)
  ) %&amp;gt;%
  select(inv_due_interval, due_next, due_pay_interval, overlaps)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 2,466 x 4
##                  inv_due_interval   due_next
##                    &amp;lt;S4: Interval&amp;gt;     &amp;lt;date&amp;gt;
##  1 2013-01-02 UTC--2013-02-01 UTC 2013-02-02
##  2 2013-01-26 UTC--2013-02-25 UTC 2013-02-26
##  3 2013-07-03 UTC--2013-08-02 UTC 2013-08-03
##  4 2013-02-10 UTC--2013-03-12 UTC 2013-03-13
##  5 2012-10-25 UTC--2012-11-24 UTC 2012-11-25
##  6 2012-01-27 UTC--2012-02-26 UTC 2012-02-27
##  7 2013-08-13 UTC--2013-09-12 UTC 2013-09-13
##  8 2012-12-16 UTC--2013-01-15 UTC 2013-01-16
##  9 2012-05-14 UTC--2012-06-13 UTC 2012-06-14
## 10 2013-07-01 UTC--2013-07-31 UTC 2013-08-01
## # ... with 2,456 more rows, and 2 more variables: due_pay_interval &amp;lt;S4:
## #   Interval&amp;gt;, overlaps &amp;lt;lgl&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# using int_shift
transact %&amp;gt;%
  mutate(
    inv_due_interval = interval(Invoice, Due),
    due_pay_interval = interval(Due, Payment),  
    due_pay_next = int_shift(due_pay_interval, by = days(1)),
    overlaps = int_overlaps(inv_due_interval, due_pay_next)
  ) %&amp;gt;%
  select(inv_due_interval, due_pay_next, overlaps)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 2,466 x 3
##                  inv_due_interval                   due_pay_next overlaps
##                    &amp;lt;S4: Interval&amp;gt;                 &amp;lt;S4: Interval&amp;gt;    &amp;lt;lgl&amp;gt;
##  1 2013-01-02 UTC--2013-02-01 UTC 2013-02-02 UTC--2013-01-16 UTC     TRUE
##  2 2013-01-26 UTC--2013-02-25 UTC 2013-02-26 UTC--2013-03-04 UTC    FALSE
##  3 2013-07-03 UTC--2013-08-02 UTC 2013-08-03 UTC--2013-07-09 UTC     TRUE
##  4 2013-02-10 UTC--2013-03-12 UTC 2013-03-13 UTC--2013-03-18 UTC    FALSE
##  5 2012-10-25 UTC--2012-11-24 UTC 2012-11-25 UTC--2012-11-29 UTC    FALSE
##  6 2012-01-27 UTC--2012-02-26 UTC 2012-02-27 UTC--2012-02-23 UTC     TRUE
##  7 2013-08-13 UTC--2013-09-12 UTC 2013-09-13 UTC--2013-09-10 UTC     TRUE
##  8 2012-12-16 UTC--2013-01-15 UTC 2013-01-16 UTC--2013-01-13 UTC     TRUE
##  9 2012-05-14 UTC--2012-06-13 UTC 2012-06-14 UTC--2012-07-02 UTC    FALSE
## 10 2013-07-01 UTC--2013-07-31 UTC 2013-08-01 UTC--2013-07-27 UTC     TRUE
## # ... with 2,456 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;transact %&amp;gt;%
  mutate(
    inv_due_interval = interval(Invoice, Due),
    overlaps = Payment %within% inv_due_interval
  ) %&amp;gt;%
  select(Due, Payment, overlaps)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 2,466 x 3
##           Due    Payment overlaps
##        &amp;lt;date&amp;gt;     &amp;lt;date&amp;gt;    &amp;lt;lgl&amp;gt;
##  1 2013-02-01 2013-01-15     TRUE
##  2 2013-02-25 2013-03-03    FALSE
##  3 2013-08-02 2013-07-08     TRUE
##  4 2013-03-12 2013-03-17    FALSE
##  5 2012-11-24 2012-11-28    FALSE
##  6 2012-02-26 2012-02-22     TRUE
##  7 2013-09-12 2013-09-09     TRUE
##  8 2013-01-15 2013-01-12     TRUE
##  9 2012-06-13 2012-07-01    FALSE
## 10 2013-07-31 2013-07-26     TRUE
## # ... with 2,456 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;transact %&amp;gt;%
  mutate(
    Quarter = quarter(Due)
  )&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 2,466 x 4
##       Invoice        Due    Payment Quarter
##        &amp;lt;date&amp;gt;     &amp;lt;date&amp;gt;     &amp;lt;date&amp;gt;   &amp;lt;dbl&amp;gt;
##  1 2013-01-02 2013-02-01 2013-01-15       1
##  2 2013-01-26 2013-02-25 2013-03-03       1
##  3 2013-07-03 2013-08-02 2013-07-08       3
##  4 2013-02-10 2013-03-12 2013-03-17       1
##  5 2012-10-25 2012-11-24 2012-11-28       4
##  6 2012-01-27 2012-02-26 2012-02-22       1
##  7 2013-08-13 2013-09-12 2013-09-09       3
##  8 2012-12-16 2013-01-15 2013-01-12       1
##  9 2012-05-14 2012-06-13 2012-07-01       2
## 10 2013-07-01 2013-07-31 2013-07-26       3
## # ... with 2,456 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;transact %&amp;gt;%
  mutate(
    Quarter = quarter(Due, with_year = TRUE)
  )&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 2,466 x 4
##       Invoice        Due    Payment Quarter
##        &amp;lt;date&amp;gt;     &amp;lt;date&amp;gt;     &amp;lt;date&amp;gt;   &amp;lt;dbl&amp;gt;
##  1 2013-01-02 2013-02-01 2013-01-15  2013.1
##  2 2013-01-26 2013-02-25 2013-03-03  2013.1
##  3 2013-07-03 2013-08-02 2013-07-08  2013.3
##  4 2013-02-10 2013-03-12 2013-03-17  2013.1
##  5 2012-10-25 2012-11-24 2012-11-28  2012.4
##  6 2012-01-27 2012-02-26 2012-02-22  2012.1
##  7 2013-08-13 2013-09-12 2013-09-09  2013.3
##  8 2012-12-16 2013-01-15 2013-01-12  2013.1
##  9 2012-05-14 2012-06-13 2012-07-01  2012.2
## 10 2013-07-01 2013-07-31 2013-07-26  2013.3
## # ... with 2,456 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;transact %&amp;lt;&amp;gt;%
  mutate(
    days_to_pay = Payment - Invoice
  )

transact %&amp;gt;%
  mutate(
    dseconds = duration(as.numeric(days_to_pay), &amp;#39;days&amp;#39;)
  )&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 2,466 x 5
##       Invoice        Due    Payment days_to_pay            dseconds
##        &amp;lt;date&amp;gt;     &amp;lt;date&amp;gt;     &amp;lt;date&amp;gt;      &amp;lt;time&amp;gt;      &amp;lt;S4: Duration&amp;gt;
##  1 2013-01-02 2013-02-01 2013-01-15     13 days 1123200s (~13 days)
##  2 2013-01-26 2013-02-25 2013-03-03     36 days 3110400s (~36 days)
##  3 2013-07-03 2013-08-02 2013-07-08      5 days   432000s (~5 days)
##  4 2013-02-10 2013-03-12 2013-03-17     35 days 3024000s (~35 days)
##  5 2012-10-25 2012-11-24 2012-11-28     34 days 2937600s (~34 days)
##  6 2012-01-27 2012-02-26 2012-02-22     26 days 2246400s (~26 days)
##  7 2013-08-13 2013-09-12 2013-09-09     27 days 2332800s (~27 days)
##  8 2012-12-16 2013-01-15 2013-01-12     27 days 2332800s (~27 days)
##  9 2012-05-14 2012-06-13 2012-07-01     48 days 4147200s (~48 days)
## 10 2013-07-01 2013-07-31 2013-07-26     25 days 2160000s (~25 days)
## # ... with 2,456 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;transact %&amp;lt;&amp;gt;%
  mutate(
    inv_pay_int = interval(Invoice, Payment)
  )&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;transact %&amp;gt;%
  mutate(
    inv_pay_days = inv_pay_int / ddays()
  )&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 2,466 x 6
##       Invoice        Due    Payment days_to_pay
##        &amp;lt;date&amp;gt;     &amp;lt;date&amp;gt;     &amp;lt;date&amp;gt;      &amp;lt;time&amp;gt;
##  1 2013-01-02 2013-02-01 2013-01-15     13 days
##  2 2013-01-26 2013-02-25 2013-03-03     36 days
##  3 2013-07-03 2013-08-02 2013-07-08      5 days
##  4 2013-02-10 2013-03-12 2013-03-17     35 days
##  5 2012-10-25 2012-11-24 2012-11-28     34 days
##  6 2012-01-27 2012-02-26 2012-02-22     26 days
##  7 2013-08-13 2013-09-12 2013-09-09     27 days
##  8 2012-12-16 2013-01-15 2013-01-12     27 days
##  9 2012-05-14 2012-06-13 2012-07-01     48 days
## 10 2013-07-01 2013-07-31 2013-07-26     25 days
## # ... with 2,456 more rows, and 2 more variables: inv_pay_int &amp;lt;S4:
## #   Interval&amp;gt;, inv_pay_days &amp;lt;dbl&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;transact %&amp;gt;%
  mutate(
    inv_pay_days = time_length(inv_pay_int, unit = &amp;quot;days&amp;quot;)
  )&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 2,466 x 6
##       Invoice        Due    Payment days_to_pay
##        &amp;lt;date&amp;gt;     &amp;lt;date&amp;gt;     &amp;lt;date&amp;gt;      &amp;lt;time&amp;gt;
##  1 2013-01-02 2013-02-01 2013-01-15     13 days
##  2 2013-01-26 2013-02-25 2013-03-03     36 days
##  3 2013-07-03 2013-08-02 2013-07-08      5 days
##  4 2013-02-10 2013-03-12 2013-03-17     35 days
##  5 2012-10-25 2012-11-24 2012-11-28     34 days
##  6 2012-01-27 2012-02-26 2012-02-22     26 days
##  7 2013-08-13 2013-09-12 2013-09-09     27 days
##  8 2012-12-16 2013-01-15 2013-01-12     27 days
##  9 2012-05-14 2012-06-13 2012-07-01     48 days
## 10 2013-07-01 2013-07-31 2013-07-26     25 days
## # ... with 2,456 more rows, and 2 more variables: inv_pay_int &amp;lt;S4:
## #   Interval&amp;gt;, inv_pay_days &amp;lt;dbl&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;transact %&amp;gt;%
  mutate(
    inv_pay_days = as.period(inv_pay_int)
  )&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 2,466 x 6
##       Invoice        Due    Payment days_to_pay
##        &amp;lt;date&amp;gt;     &amp;lt;date&amp;gt;     &amp;lt;date&amp;gt;      &amp;lt;time&amp;gt;
##  1 2013-01-02 2013-02-01 2013-01-15     13 days
##  2 2013-01-26 2013-02-25 2013-03-03     36 days
##  3 2013-07-03 2013-08-02 2013-07-08      5 days
##  4 2013-02-10 2013-03-12 2013-03-17     35 days
##  5 2012-10-25 2012-11-24 2012-11-28     34 days
##  6 2012-01-27 2012-02-26 2012-02-22     26 days
##  7 2013-08-13 2013-09-12 2013-09-09     27 days
##  8 2012-12-16 2013-01-15 2013-01-12     27 days
##  9 2012-05-14 2012-06-13 2012-07-01     48 days
## 10 2013-07-01 2013-07-31 2013-07-26     25 days
## # ... with 2,456 more rows, and 2 more variables: inv_pay_int &amp;lt;S4:
## #   Interval&amp;gt;, inv_pay_days &amp;lt;S4: Period&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Data Manipulation in R with dplyr - Part 1</title>
      <link>/post/data-manipulation-in-r-with-dplyr-part-1/</link>
      <pubDate>Sat, 18 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>/post/data-manipulation-in-r-with-dplyr-part-1/</guid>
      <description>&lt;!-- BLOGDOWN-HEAD --&gt;
&lt;!-- /BLOGDOWN-HEAD --&gt;

&lt;!-- BLOGDOWN-BODY-BEFORE --&gt;
&lt;!-- /BLOGDOWN-BODY-BEFORE --&gt;
&lt;div id=&#34;introduction&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Introduction&lt;/h1&gt;
&lt;p&gt;According to a &lt;a href=&#34;http://visit.crowdflower.com/rs/416-ZBE-142/images/CrowdFlower_DataScienceReport_2016.pdf&#34;&gt;survey&lt;/a&gt; by &lt;a href=&#34;https://www.crowdflower.com/&#34;&gt;CrowdFlower&lt;/a&gt;, data scientists spend most of their time cleaning and manipulating data rather than mining or modeling them for insights. As such, it becomes important to have tools that make data manipulation faster and easier. In todayâ€™s post, we introduce you to &lt;a href=&#34;http://dplyr.tidyverse.org/&#34;&gt;dplyr&lt;/a&gt;, a grammar of data manipulation.&lt;/p&gt;
&lt;div id=&#34;why-dplyr&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Why dplyr?&lt;/h2&gt;
&lt;p&gt;dplyr helps us solve the most common data manipulation challenges such as filtering rows, selecting columns, sorting data, creating new columns, summarizing data etc. In order to truly appreciate dplyr, we will compare it to the functions in base R.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;installation&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Installation&lt;/h2&gt;
&lt;p&gt;You can install a stable version of &lt;code&gt;dplyr&lt;/code&gt; from CRAN or the latest development version from GitHub.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;## 
## Attaching package: &amp;#39;dplyr&amp;#39;&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## The following objects are masked from &amp;#39;package:stats&amp;#39;:
## 
##     filter, lag&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## The following objects are masked from &amp;#39;package:base&amp;#39;:
## 
##     intersect, setdiff, setequal, union&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;dplyr-verbs&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;dplyr Verbs&lt;/h2&gt;
&lt;p&gt;dplyr provides a set of verbs that help us solve the most common data manipulation challenges while working with tabular data (dataframes, tibbles):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;select&lt;/code&gt;: returns subset of columns&lt;/li&gt;
&lt;li&gt;&lt;code&gt;filter&lt;/code&gt;: returns a subset of rows&lt;/li&gt;
&lt;li&gt;&lt;code&gt;arrange&lt;/code&gt;: re-order or arrange rows according to single/multiple variables&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mutate&lt;/code&gt;: create new columns from existing columns&lt;/li&gt;
&lt;li&gt;&lt;code&gt;summarise&lt;/code&gt;: reduce data to a single summary&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Let us explore each of the above verbs one by one. &lt;code&gt;dplyr&lt;/code&gt; offers more functionality than the above listed verbs but we will explore them in a different post.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;case-study&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Case Study&lt;/h2&gt;
&lt;p&gt;We will explore dummy data that we have created to resemble web logs of a ecommerce company. You can download the data from &lt;a href=&#34;https://github.com/rsquaredacademy/datasets/blob/master/web.csv&#34;&gt;here&lt;/a&gt; or import it directly using &lt;code&gt;read_csv()&lt;/code&gt; from the &lt;a href=&#34;readr.tidyverse.org&#34;&gt;readr&lt;/a&gt; package.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;## Parsed with column specification:
## cols(
##   id = col_integer(),
##   referrer = col_character(),
##   device = col_character(),
##   bouncers = col_character(),
##   n_visit = col_integer(),
##   n_pages = col_double(),
##   duration = col_integer(),
##   country = col_character(),
##   purchase = col_character(),
##   order_items = col_double(),
##   order_value = col_double()
## )&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Below is the description of the data set:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;id: row id&lt;/li&gt;
&lt;li&gt;referrer: referrer website/search engine&lt;/li&gt;
&lt;li&gt;os: operating system&lt;/li&gt;
&lt;li&gt;browser: browser&lt;/li&gt;
&lt;li&gt;device: device used to visit the website&lt;/li&gt;
&lt;li&gt;n_pages: number of pages visited&lt;/li&gt;
&lt;li&gt;duration: time spent on the website (in seconds)&lt;/li&gt;
&lt;li&gt;repeat: frequency of visits&lt;/li&gt;
&lt;li&gt;country: country of origin&lt;/li&gt;
&lt;li&gt;purchase: whether visitor purchased&lt;/li&gt;
&lt;li&gt;order_value: order value of visitor (in dollars)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We will use dplyr to answer a few questions we have about the above data.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;average-order-value&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Average Order Value&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;What is the average order value by device types?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Average value of every order placed over a defined period of time. It is determined using sales per order and not sales per customer. Let us look at the steps to calculate AOV from the ecommerce data set.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Step 1: Filter Purchasers&lt;/li&gt;
&lt;li&gt;Step 2: Select data related to AOV (order value, order items) and device&lt;/li&gt;
&lt;li&gt;Step 3: Group order value and order items by device&lt;/li&gt;
&lt;li&gt;Step 4: Compute total order value and order items for each device&lt;/li&gt;
&lt;li&gt;Step 5: Compute AOV for each device&lt;/li&gt;
&lt;li&gt;Step 6: Select device and AOV data&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Below is the code for computing AOV by device types:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ecom %&amp;gt;%
  filter(purchase == &amp;#39;true&amp;#39;) %&amp;gt;%
  select(device, order_value, order_items) %&amp;gt;%
  group_by(device) %&amp;gt;%
  summarise_all(funs(sum)) %&amp;gt;%
  mutate(
    aov = order_value / order_items
  ) %&amp;gt;%
  select(device, aov)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 3 x 2
##   device      aov
##    &amp;lt;chr&amp;gt;    &amp;lt;dbl&amp;gt;
## 1 laptop 319.1292
## 2 mobile 253.9381
## 3 tablet 270.2320&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We will map the dplyr verbs to the above steps.&lt;/p&gt;
&lt;div id=&#34;step-1-filter-purchasers&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Step 1: Filter Purchasers&lt;/h3&gt;
&lt;p&gt;In order to compute the AOV, we must first separate the purchasers from non-purchasers. We will do this by filtering the data related to purchasers using the &lt;code&gt;filter()&lt;/code&gt; function. It allows us to filter rows that meet a specific criteria/condition. The first argument is the name of the data frame and the rest of the arguments are expressions for filtering the data. Let us look at a few examples:&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;filter&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Filter&lt;/h3&gt;
&lt;p&gt;Select all visits from mobile&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;filter(ecom, device == &amp;quot;mobile&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 344 x 11
##       id referrer device bouncers n_visit n_pages duration        country
##    &amp;lt;int&amp;gt;    &amp;lt;chr&amp;gt;  &amp;lt;chr&amp;gt;    &amp;lt;chr&amp;gt;   &amp;lt;int&amp;gt;   &amp;lt;dbl&amp;gt;    &amp;lt;int&amp;gt;          &amp;lt;chr&amp;gt;
##  1     5    yahoo mobile     true       9       1      899         Poland
##  2     7    yahoo mobile     true      10       1      692     Bangladesh
##  3     8   direct mobile     true      10       1      578      Indonesia
##  4     9     bing mobile    false       3      19      794    Netherlands
##  5    10   google mobile     true       6       1      762 Czech Republic
##  6    13   direct mobile    false       9      14      386        Ireland
##  7    15    yahoo mobile    false       7       1      447         France
##  8    22   google mobile     true       5       1      188         Brazil
##  9    23     bing mobile    false       0       7      608         Russia
## 10    29   google mobile     true      10       1      164         Russia
## # ... with 334 more rows, and 3 more variables: purchase &amp;lt;chr&amp;gt;,
## #   order_items &amp;lt;dbl&amp;gt;, order_value &amp;lt;dbl&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Select all visits from mobile that converted&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;filter(ecom, device == &amp;quot;mobile&amp;quot;, purchase == &amp;quot;true&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 90 x 11
##       id referrer device bouncers n_visit n_pages duration        country
##    &amp;lt;int&amp;gt;    &amp;lt;chr&amp;gt;  &amp;lt;chr&amp;gt;    &amp;lt;chr&amp;gt;   &amp;lt;int&amp;gt;   &amp;lt;dbl&amp;gt;    &amp;lt;int&amp;gt;          &amp;lt;chr&amp;gt;
##  1    13   direct mobile    false       9      14      386        Ireland
##  2    15    yahoo mobile    false       7       1      447         France
##  3    23     bing mobile    false       0       7      608         Russia
##  4    36     bing mobile    false       1       1      325        Ireland
##  5    41     bing mobile    false       4      20      148 Czech Republic
##  6    49   social mobile    false       1       2      397         France
##  7    89   direct mobile    false       4       8      598        Ecuador
##  8    92   google mobile    false       5       8      594      Indonesia
##  9    98     bing mobile    false       3      18      410       Portugal
## 10   102   google mobile    false       2       3      958        Bahamas
## # ... with 80 more rows, and 3 more variables: purchase &amp;lt;chr&amp;gt;,
## #   order_items &amp;lt;dbl&amp;gt;, order_value &amp;lt;dbl&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Select all visits from mobile that visited more than 5 pages&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;filter(ecom, device == &amp;quot;mobile&amp;quot;, n_pages &amp;gt; 5)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 139 x 11
##       id referrer device bouncers n_visit n_pages duration        country
##    &amp;lt;int&amp;gt;    &amp;lt;chr&amp;gt;  &amp;lt;chr&amp;gt;    &amp;lt;chr&amp;gt;   &amp;lt;int&amp;gt;   &amp;lt;dbl&amp;gt;    &amp;lt;int&amp;gt;          &amp;lt;chr&amp;gt;
##  1     9     bing mobile    false       3      19      794    Netherlands
##  2    13   direct mobile    false       9      14      386        Ireland
##  3    23     bing mobile    false       0       7      608         Russia
##  4    30    yahoo mobile    false       8       9      868       Colombia
##  5    41     bing mobile    false       4      20      148 Czech Republic
##  6    42   direct mobile    false       1      13      882      Indonesia
##  7    89   direct mobile    false       4       8      598        Ecuador
##  8    92   google mobile    false       5       8      594      Indonesia
##  9    98     bing mobile    false       3      18      410       Portugal
## 10   112   social mobile    false      10      11      350      Argentina
## # ... with 129 more rows, and 3 more variables: purchase &amp;lt;chr&amp;gt;,
## #   order_items &amp;lt;dbl&amp;gt;, order_value &amp;lt;dbl&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For our case study, we want all visits that converted.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;filter(ecom, purchase == &amp;quot;true&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 254 x 11
##       id referrer device bouncers n_visit n_pages duration     country
##    &amp;lt;int&amp;gt;    &amp;lt;chr&amp;gt;  &amp;lt;chr&amp;gt;    &amp;lt;chr&amp;gt;   &amp;lt;int&amp;gt;   &amp;lt;dbl&amp;gt;    &amp;lt;int&amp;gt;       &amp;lt;chr&amp;gt;
##  1     4     bing tablet    false       3      18      155       China
##  2    13   direct mobile    false       9      14      386     Ireland
##  3    14    yahoo tablet    false       5       8      260 Philippines
##  4    15    yahoo mobile    false       7       1      447      France
##  5    17     bing tablet    false       5      16       96        Peru
##  6    19   social tablet    false       7      10      346    Colombia
##  7    20   social tablet    false       2       1      412     Namibia
##  8    23     bing mobile    false       0       7      608      Russia
##  9    27   direct tablet    false       2      19      473       Japan
## 10    34   social tablet    false       9      20      385   Indonesia
## # ... with 244 more rows, and 3 more variables: purchase &amp;lt;chr&amp;gt;,
## #   order_items &amp;lt;dbl&amp;gt;, order_value &amp;lt;dbl&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;step-2-select-relevant-columns&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Step 2: Select relevant columns&lt;/h3&gt;
&lt;p&gt;After filtering the data, we need to select relevent variables to compute the AOV. Remember, we do not need all the columns in the data to compute a required metric (in our case, AOV). The &lt;code&gt;select()&lt;/code&gt; function allows us to select a subset of columns. The first argument is the name of the data frame and the subsequent arguments specify the columns by name or position. Let us look at a few examples:&lt;/p&gt;
&lt;p&gt;Select device and purchase columns&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;select(ecom, device, purchase)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 1,000 x 2
##    device purchase
##     &amp;lt;chr&amp;gt;    &amp;lt;chr&amp;gt;
##  1 laptop    false
##  2 tablet    false
##  3 laptop    false
##  4 tablet     true
##  5 mobile    false
##  6 laptop    false
##  7 mobile    false
##  8 mobile    false
##  9 mobile    false
## 10 mobile    false
## # ... with 990 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Select all columns from device to purchase&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;select(ecom, device:purchase)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 1,000 x 7
##    device bouncers n_visit n_pages duration        country purchase
##     &amp;lt;chr&amp;gt;    &amp;lt;chr&amp;gt;   &amp;lt;int&amp;gt;   &amp;lt;dbl&amp;gt;    &amp;lt;int&amp;gt;          &amp;lt;chr&amp;gt;    &amp;lt;chr&amp;gt;
##  1 laptop     true      10       1       27 Czech Republic    false
##  2 tablet     true       9       1      899          Yemen    false
##  3 laptop     true       0       1       72         Brazil    false
##  4 tablet    false       3      18      155          China     true
##  5 mobile     true       9       1      899         Poland    false
##  6 laptop    false       5       5      573   South Africa    false
##  7 mobile     true      10       1      692     Bangladesh    false
##  8 mobile     true      10       1      578      Indonesia    false
##  9 mobile    false       3      19      794    Netherlands    false
## 10 mobile     true       6       1      762 Czech Republic    false
## # ... with 990 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Select all columns excluding id and country&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;select(ecom, -id, -country)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 1,000 x 9
##    referrer device bouncers n_visit n_pages duration purchase order_items
##       &amp;lt;chr&amp;gt;  &amp;lt;chr&amp;gt;    &amp;lt;chr&amp;gt;   &amp;lt;int&amp;gt;   &amp;lt;dbl&amp;gt;    &amp;lt;int&amp;gt;    &amp;lt;chr&amp;gt;       &amp;lt;dbl&amp;gt;
##  1   google laptop     true      10       1       27    false           0
##  2    yahoo tablet     true       9       1      899    false           0
##  3   direct laptop     true       0       1       72    false           0
##  4     bing tablet    false       3      18      155     true           6
##  5    yahoo mobile     true       9       1      899    false           0
##  6    yahoo laptop    false       5       5      573    false           0
##  7    yahoo mobile     true      10       1      692    false           0
##  8   direct mobile     true      10       1      578    false           0
##  9     bing mobile    false       3      19      794    false           0
## 10   google mobile     true       6       1      762    false           0
## # ... with 990 more rows, and 1 more variables: order_value &amp;lt;dbl&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For our case study, we need to select the columns order value and order items to calculate the AOV. We also need to select the device column as we are computing the AOV for different devices.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;select(ecom, device, order_value, order_items)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 1,000 x 3
##    device order_value order_items
##     &amp;lt;chr&amp;gt;       &amp;lt;dbl&amp;gt;       &amp;lt;dbl&amp;gt;
##  1 laptop           0           0
##  2 tablet           0           0
##  3 laptop           0           0
##  4 tablet         434           6
##  5 mobile           0           0
##  6 laptop           0           0
##  7 mobile           0           0
##  8 mobile           0           0
##  9 mobile           0           0
## 10 mobile           0           0
## # ... with 990 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But we want the above data only for purchasers. We will combine &lt;code&gt;filter()&lt;/code&gt; and &lt;code&gt;select()&lt;/code&gt; functions to extract data related to purchasers.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ecom1 &amp;lt;- filter(ecom, purchase == &amp;quot;true&amp;quot;)
ecom2 &amp;lt;- select(ecom1, device, order_value, order_items)
ecom2&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 254 x 3
##    device order_value order_items
##     &amp;lt;chr&amp;gt;       &amp;lt;dbl&amp;gt;       &amp;lt;dbl&amp;gt;
##  1 tablet         434           6
##  2 mobile         651           3
##  3 tablet         362           2
##  4 mobile        2423           7
##  5 tablet        1049           6
##  6 tablet        1304           9
##  7 tablet        2077           7
##  8 mobile         237           4
##  9 tablet         622           5
## 10 tablet        1613           7
## # ... with 244 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;step-3-group-data-by-devices&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Step 3: Group data by devices&lt;/h3&gt;
&lt;p&gt;Since we want to compute the AOV for each device, we need to compute the total order value and total order items for each device. To achieve this, we will group the selected variables by device type. Using the &lt;code&gt;group_by()&lt;/code&gt; function, we will group our case study data by device types. The first argument is the name of the data frame and the second argument is the name of the column based on which the data will be split. Let us look at a few examples:&lt;/p&gt;
&lt;p&gt;Group data by referrer type&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;group_by(ecom, referrer)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 1,000 x 11
## # Groups:   referrer [5]
##       id referrer device bouncers n_visit n_pages duration        country
##    &amp;lt;int&amp;gt;    &amp;lt;chr&amp;gt;  &amp;lt;chr&amp;gt;    &amp;lt;chr&amp;gt;   &amp;lt;int&amp;gt;   &amp;lt;dbl&amp;gt;    &amp;lt;int&amp;gt;          &amp;lt;chr&amp;gt;
##  1     1   google laptop     true      10       1       27 Czech Republic
##  2     2    yahoo tablet     true       9       1      899          Yemen
##  3     3   direct laptop     true       0       1       72         Brazil
##  4     4     bing tablet    false       3      18      155          China
##  5     5    yahoo mobile     true       9       1      899         Poland
##  6     6    yahoo laptop    false       5       5      573   South Africa
##  7     7    yahoo mobile     true      10       1      692     Bangladesh
##  8     8   direct mobile     true      10       1      578      Indonesia
##  9     9     bing mobile    false       3      19      794    Netherlands
## 10    10   google mobile     true       6       1      762 Czech Republic
## # ... with 990 more rows, and 3 more variables: purchase &amp;lt;chr&amp;gt;,
## #   order_items &amp;lt;dbl&amp;gt;, order_value &amp;lt;dbl&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In the second line in the above output, you can observe &lt;code&gt;Groups: referrer [5]&lt;/code&gt;. The data is split into 5 groups as the referrer variable has 5 distinct values. For our case study, we need to group the data by device type.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ecom3 &amp;lt;- group_by(ecom2, device)
ecom3&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 254 x 3
## # Groups:   device [3]
##    device order_value order_items
##     &amp;lt;chr&amp;gt;       &amp;lt;dbl&amp;gt;       &amp;lt;dbl&amp;gt;
##  1 tablet         434           6
##  2 mobile         651           3
##  3 tablet         362           2
##  4 mobile        2423           7
##  5 tablet        1049           6
##  6 tablet        1304           9
##  7 tablet        2077           7
##  8 mobile         237           4
##  9 tablet         622           5
## 10 tablet        1613           7
## # ... with 244 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;step-4-compute-total-order-value-and-order-items&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Step 4: Compute total order value and order items&lt;/h3&gt;
&lt;p&gt;The next step is to compute the total order value and total order items for each device. We will use them to then compute the average order value. Now we need to reduce the order value and order items data to a single summary. We can achieve this using the &lt;code&gt;summarise()&lt;/code&gt; function. The first argument is the name of a data frame and the subsequent arguments are functions that can generate a summary. For example, we can use &lt;code&gt;min&lt;/code&gt;, &lt;code&gt;max&lt;/code&gt;, &lt;code&gt;sum&lt;/code&gt;, &lt;code&gt;mean&lt;/code&gt; etc.&lt;/p&gt;
&lt;p&gt;For our case study, we need the totals of order value and order items. What function can we use to obtain them? The &lt;code&gt;sum()&lt;/code&gt; function will generate the sum of the values and hence we will use it inside the &lt;code&gt;summarise()&lt;/code&gt; function. Remember, we need to provide a name to the summary being generated.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ecom4 &amp;lt;- summarise(ecom3, total_value = sum(order_value),
          total_items = sum(order_items))
ecom4&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 3 x 3
##   device total_value total_items
##    &amp;lt;chr&amp;gt;       &amp;lt;dbl&amp;gt;       &amp;lt;dbl&amp;gt;
## 1 laptop      143289         449
## 2 mobile      127223         501
## 3 tablet      116470         431&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There you go, we have the total order value and total order items for each device type. Another way to achieve the above result is to use the &lt;code&gt;summarise_all()&lt;/code&gt; function. How does that work? It generates the specified summary for all the columns in the data set except for the column based on which the data has been grouped. So we need to ensure that the data frame does not have any irrelevant columns.&lt;/p&gt;
&lt;p&gt;In our case study, we have split the data based on the device type and we have 2 other columns which are order value and order items. If we use &lt;code&gt;summarise_all()&lt;/code&gt; function, it will generate the summary for the two columns based on the function specified. To specify the functions, we need to use another argument &lt;code&gt;funs&lt;/code&gt; and it can take any number of valid functions.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ecom4 &amp;lt;- summarise_all(ecom3, funs(sum))
ecom4&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 3 x 3
##   device order_value order_items
##    &amp;lt;chr&amp;gt;       &amp;lt;dbl&amp;gt;       &amp;lt;dbl&amp;gt;
## 1 laptop      143289         449
## 2 mobile      127223         501
## 3 tablet      116470         431&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;step-5-compute-aov&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Step 5: Compute AOV&lt;/h3&gt;
&lt;p&gt;Now that we have the total order value and total order items for each device category, we can compute the AOV. We will create a new column to store the result. To create a new column, we will use the &lt;code&gt;mutate()&lt;/code&gt; function. The first argument is the name of the data frame and the subsequent arguments are expressions for creating new columns based out of existing columns.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ecom5 &amp;lt;- mutate(ecom4, aov = order_value / order_items)
ecom5&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 3 x 4
##   device order_value order_items      aov
##    &amp;lt;chr&amp;gt;       &amp;lt;dbl&amp;gt;       &amp;lt;dbl&amp;gt;    &amp;lt;dbl&amp;gt;
## 1 laptop      143289         449 319.1292
## 2 mobile      127223         501 253.9381
## 3 tablet      116470         431 270.2320&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;step-6-select-the-relevant-columns&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Step 6: Select the relevant columns&lt;/h3&gt;
&lt;p&gt;The last step is to select the relevant columns. We require the device type and the corresponding aov and hence we can get rid of other columns. Use the &lt;code&gt;select()&lt;/code&gt; function to extract the relevant columns.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ecom6 &amp;lt;- select(ecom5, device, aov)
ecom6&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 3 x 2
##   device      aov
##    &amp;lt;chr&amp;gt;    &amp;lt;dbl&amp;gt;
## 1 laptop 319.1292
## 2 mobile 253.9381
## 3 tablet 270.2320&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let us combine all the code from the above steps:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ecom1 &amp;lt;- filter(ecom, purchase == &amp;quot;true&amp;quot;)
ecom2 &amp;lt;- select(ecom1, device, order_value, order_items)
ecom3 &amp;lt;- group_by(ecom2, device)
ecom4 &amp;lt;- summarise_all(ecom3, funs(sum))
ecom5 &amp;lt;- mutate(ecom4, aov = order_value / order_items)
ecom6 &amp;lt;- select(ecom5, device, aov)
ecom6&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 3 x 2
##   device      aov
##    &amp;lt;chr&amp;gt;    &amp;lt;dbl&amp;gt;
## 1 laptop 319.1292
## 2 mobile 253.9381
## 3 tablet 270.2320&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you observe, at each step we create a new variable(data frame) and then use it as an input in the next step i.e.Â the output from one function becomes the input for another function. Can we achieve the final outcome i.e. &lt;code&gt;ecom6&lt;/code&gt; without creating the intermediate data frames (ecom1 - ecom5)? Yes, we can. We will use the &lt;code&gt;%&amp;gt;%&lt;/code&gt; operator to chain the above steps so that we can avoid creating the intermediate data frames. Let us see how to do that.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ecom %&amp;gt;%
  filter(purchase == &amp;#39;true&amp;#39;) %&amp;gt;%
  select(device, order_value, order_items) %&amp;gt;%
  group_by(device) %&amp;gt;%
  summarise_all(funs(sum)) %&amp;gt;%
  mutate(
    aov = order_value / order_items
  ) %&amp;gt;%
  select(device, aov)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 3 x 2
##   device      aov
##    &amp;lt;chr&amp;gt;    &amp;lt;dbl&amp;gt;
## 1 laptop 319.1292
## 2 mobile 253.9381
## 3 tablet 270.2320&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In the above code, we take the output from each step and use it as an input for the next step using the pipe &lt;code&gt;%&amp;gt;%&lt;/code&gt; operator. It reduces the intermediate data frames and makes the code readable. Take the &lt;code&gt;ecom&lt;/code&gt; data frame &lt;code&gt;-&amp;gt;&lt;/code&gt; filter the purchasers &lt;code&gt;-&amp;gt;&lt;/code&gt; select device, order_value and order_items variables &lt;code&gt;-&amp;gt;&lt;/code&gt; group the resulting data frame by device type &lt;code&gt;-&amp;gt;&lt;/code&gt; compute the sum of all the variables in the grouped data frames &lt;code&gt;-&amp;gt;&lt;/code&gt; compute the average order value &lt;code&gt;-&amp;gt;&lt;/code&gt; select device type and aov&lt;/p&gt;
&lt;p&gt;It is the same as the steps we wrote at the beginning of this post. Now you realize how powerful dplyr is along with the &lt;code&gt;%&amp;gt;%&lt;/code&gt; operator. There are other functions in dplyr but we will cover them in another post. You are encouraged to use the above approach to answer the questions we have listed below.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;practice-questions&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Practice Questions&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;What is the average number of pages visited by purchasers and non-purchasers?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;What is the average time on site for purchasers vs non-purchasers?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;What is the average number of pages visited by purchasers and non-purchasers using mobile?&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&#34;summary&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Summary&lt;/h3&gt;
&lt;p&gt;In this post, we learnt how to use dplyr to address some of the most common data manipulation challenges. In the next post, we will learn how to work with dates and time in R using the &lt;a href=&#34;https://CRAN.R-project.org/package=lubridate&#34;&gt;lubridate&lt;/a&gt; package.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Readable Code with Pipes</title>
      <link>/post/readable-code-with-pipes/</link>
      <pubDate>Tue, 14 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>/post/readable-code-with-pipes/</guid>
      <description>&lt;div id=&#34;introduction&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Introduction&lt;/h1&gt;
&lt;p&gt;When you are dealing with a sequence of multiple operations, R code can get a bit cramped and not so easy on the eyes. The &lt;a href=&#34;https://CRAN.R-project.org/package=magrittr&#34;&gt;magrittr&lt;/a&gt; package by Stefan Milton Bache provides pipes enabling us to write R code that is readable.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;especially useful when you have nested functions&lt;/li&gt;
&lt;li&gt;similar in spirit to javascriptâ€™s method chaining&lt;/li&gt;
&lt;li&gt;functions taking multiple arguments can be confusing and messy to read&lt;/li&gt;
&lt;li&gt;with magrittr, you program from left to right&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;R being a functional language, code contains a lot of parentheses. Complex code results in nested functions making them hard to read and maintain.&lt;/p&gt;
&lt;p&gt;If you are using tidyverse packages, magrittr will be automatically loaded. We will look at 3 different types of pipes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;%&amp;gt;%&lt;/code&gt; : pipe operator - pipe a value forward into an expression or function call&lt;/li&gt;
&lt;li&gt;&lt;code&gt;%&amp;lt;&amp;gt;%&lt;/code&gt;: compound assignment pipe operator - result assigned to left hand side object instead of returning it&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;%$%&lt;/code&gt; : exposition pipe operator - expose names within left hand side objects to right hand side expressions&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;extract data from dataframes, list, matrix etc.: &lt;code&gt;extract2&lt;/code&gt;, &lt;code&gt;extract&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;arithmetic operations: &lt;code&gt;add&lt;/code&gt;, &lt;code&gt;subtract&lt;/code&gt;, &lt;code&gt;multiply_by&lt;/code&gt;, &lt;code&gt;divide_by&lt;/code&gt;, &lt;code&gt;raise_to_power&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;logical operators: &lt;code&gt;and&lt;/code&gt;, &lt;code&gt;or&lt;/code&gt;, &lt;code&gt;equals&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Let us look at a few examples:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;## Parsed with column specification:
## cols(
##   id = col_integer(),
##   referrer = col_character(),
##   device = col_character(),
##   bouncers = col_character(),
##   n_visit = col_integer(),
##   n_pages = col_double(),
##   duration = col_integer(),
##   country = col_character(),
##   purchase = col_character(),
##   order_items = col_double(),
##   order_value = col_double()
## )&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;head(ecom, 10)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 10 x 11
##       id referrer device bouncers n_visit n_pages duration        country
##    &amp;lt;int&amp;gt;    &amp;lt;chr&amp;gt;  &amp;lt;chr&amp;gt;    &amp;lt;chr&amp;gt;   &amp;lt;int&amp;gt;   &amp;lt;dbl&amp;gt;    &amp;lt;int&amp;gt;          &amp;lt;chr&amp;gt;
##  1     1   google laptop     true      10       1       27 Czech Republic
##  2     2    yahoo tablet     true       9       1      899          Yemen
##  3     3   direct laptop     true       0       1       72         Brazil
##  4     4     bing tablet    false       3      18      155          China
##  5     5    yahoo mobile     true       9       1      899         Poland
##  6     6    yahoo laptop    false       5       5      573   South Africa
##  7     7    yahoo mobile     true      10       1      692     Bangladesh
##  8     8   direct mobile     true      10       1      578      Indonesia
##  9     9     bing mobile    false       3      19      794    Netherlands
## 10    10   google mobile     true       6       1      762 Czech Republic
## # ... with 3 more variables: purchase &amp;lt;chr&amp;gt;, order_items &amp;lt;dbl&amp;gt;,
## #   order_value &amp;lt;dbl&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ecom %&amp;gt;% head(10)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 10 x 11
##       id referrer device bouncers n_visit n_pages duration        country
##    &amp;lt;int&amp;gt;    &amp;lt;chr&amp;gt;  &amp;lt;chr&amp;gt;    &amp;lt;chr&amp;gt;   &amp;lt;int&amp;gt;   &amp;lt;dbl&amp;gt;    &amp;lt;int&amp;gt;          &amp;lt;chr&amp;gt;
##  1     1   google laptop     true      10       1       27 Czech Republic
##  2     2    yahoo tablet     true       9       1      899          Yemen
##  3     3   direct laptop     true       0       1       72         Brazil
##  4     4     bing tablet    false       3      18      155          China
##  5     5    yahoo mobile     true       9       1      899         Poland
##  6     6    yahoo laptop    false       5       5      573   South Africa
##  7     7    yahoo mobile     true      10       1      692     Bangladesh
##  8     8   direct mobile     true      10       1      578      Indonesia
##  9     9     bing mobile    false       3      19      794    Netherlands
## 10    10   google mobile     true       6       1      762 Czech Republic
## # ... with 3 more variables: purchase &amp;lt;chr&amp;gt;, order_items &amp;lt;dbl&amp;gt;,
## #   order_value &amp;lt;dbl&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;y &amp;lt;- ecom$n_pages
y &amp;lt;- sqrt(y)

y &amp;lt;- ecom %$% n_pages
y %&amp;lt;&amp;gt;% sqrt()&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ecom %&amp;gt;%
  subset(purchase == &amp;#39;true&amp;#39;) %$% 
  cor(n_pages, duration)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] -0.121843&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ecom %&amp;gt;%
  subset(purchase == &amp;#39;true&amp;#39;) %&amp;gt;%
  extract(&amp;#39;referrer&amp;#39;) %&amp;gt;%
  table() %&amp;gt;%
  barplot()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2017-02-14-readable-code-with-pipes_files/figure-html/mag4-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ecom %$%
  lm(duration ~ n_pages) %&amp;gt;%
  summary()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
## Call:
## lm(formula = duration ~ n_pages)
## 
## Residuals:
##     Min      1Q  Median      3Q     Max 
## -506.30 -249.30    1.86  247.83  512.38 
## 
## Coefficients:
##             Estimate Std. Error t value Pr(&amp;gt;|t|)    
## (Intercept)  508.783     12.281  41.428   &amp;lt;2e-16 ***
## n_pages       -1.480      1.405  -1.053    0.292    
## ---
## Signif. codes:  0 &amp;#39;***&amp;#39; 0.001 &amp;#39;**&amp;#39; 0.01 &amp;#39;*&amp;#39; 0.05 &amp;#39;.&amp;#39; 0.1 &amp;#39; &amp;#39; 1
## 
## Residual standard error: 285.5 on 998 degrees of freedom
## Multiple R-squared:  0.001111,   Adjusted R-squared:  0.0001099 
## F-statistic:  1.11 on 1 and 998 DF,  p-value: 0.2924&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;email &amp;lt;- &amp;#39;jovialcann@anymail.com&amp;#39;

toupper(strtrim(strsplit(email, &amp;#39;@&amp;#39;)[[1]][1], 6))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;JOVIAL&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;email %&amp;gt;%
  strsplit(split = &amp;#39;@&amp;#39;) %&amp;gt;%
  extract2(1) %&amp;gt;%
  extract(1) %&amp;gt;%
  strtrim(width = 6) %&amp;gt;%
  toupper()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;JOVIAL&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We will learn a better way of dealing with &lt;code&gt;lists&lt;/code&gt; while exploring the &lt;a href=&#34;purrr.tidyverse.org&#34;&gt;purrr&lt;/a&gt; package. The pipe operators work very well with the dplyr verbs we will explore in the next post.&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Quick Guide: R &amp; SQLite</title>
      <link>/post/quick-guide-r-sqlite/</link>
      <pubDate>Sun, 05 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>/post/quick-guide-r-sqlite/</guid>
      <description>&lt;!-- BLOGDOWN-HEAD --&gt;
&lt;!-- /BLOGDOWN-HEAD --&gt;

&lt;!-- BLOGDOWN-BODY-BEFORE --&gt;
&lt;!-- /BLOGDOWN-BODY-BEFORE --&gt;

</description>
    </item>
    
    <item>
      <title>RMySQL for Beginners</title>
      <link>/post/rmysql-for-beginners/</link>
      <pubDate>Mon, 23 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>/post/rmysql-for-beginners/</guid>
      <description>&lt;!-- BLOGDOWN-HEAD --&gt;
&lt;!-- /BLOGDOWN-HEAD --&gt;

&lt;!-- BLOGDOWN-BODY-BEFORE --&gt;
&lt;!-- /BLOGDOWN-BODY-BEFORE --&gt;
&lt;div id=&#34;objectives&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Objectives&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Install and load RMySQL package&lt;/li&gt;
&lt;li&gt;Connect to a MySQL database from R&lt;/li&gt;
&lt;li&gt;Display database information&lt;/li&gt;
&lt;li&gt;List tables in the database&lt;/li&gt;
&lt;li&gt;Create new table&lt;/li&gt;
&lt;li&gt;Import data into R for analysis&lt;/li&gt;
&lt;li&gt;Export data from R into MySQL&lt;/li&gt;
&lt;li&gt;Remove tables and disconnect&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&#34;introduction&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Introduction&lt;/h3&gt;
&lt;p&gt;In real world, data is often stored in relational databases such as MySQL and an analyst is required to extract the data in order to perform any type of analysis. If you are using R for statistical analysis and a relational database for storing the data, you need to interact with the database in order to access the data sets.&lt;/p&gt;
&lt;p&gt;One way to accomplish the above task is to export the data from the database in some file format and import the same into R. Similarly, if you have some data as a dataframe in R and want to store it in a database, you will need to export the data from R and import it into the database. This method can be very cumbersome and frustrating.&lt;/p&gt;
&lt;p&gt;The RMySQL package was created to help R users to easily access a MySQL database from R. In order to take advantage of the features available in the package, you need the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Access to a MySQL database&lt;/li&gt;
&lt;li&gt;Knowledge of basic SQL commmands&lt;/li&gt;
&lt;li&gt;Latest verison of R (verison 3.3.3)&lt;/li&gt;
&lt;li&gt;Latest version of RStudio (version 1.0.136)&lt;/li&gt;
&lt;li&gt;RMySQL package (version 0.10.11)&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&#34;installation&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Installation&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://cran.r-project.org/web/packages/RMySQL/index.html&#34;&gt;RMySQL&lt;/a&gt; package allows you to access MySQL database form R. It was created by &lt;a href=&#34;http://biostat.mc.vanderbilt.edu/wiki/Main/JeffreyHorner&#34;&gt;Jeffrey Horner&lt;/a&gt; but is currently maintained by &lt;a href=&#34;https://github.com/jeroen&#34;&gt;Jeroen Ooms&lt;/a&gt;. The latest version of the pacakge is 0.10.11. You can install and load the package using the following commands:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# install the package
install.packages(&amp;#39;RMySQL&amp;#39;)

# load the package
library(RMySQL)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;connect-to-database&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Connect to Database&lt;/h3&gt;
&lt;p&gt;We can establish a connection to a MySQL database using the &lt;code&gt;dbConnect()&lt;/code&gt; function. In order to connect to the database, we need to specify the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;MySQL connection&lt;/li&gt;
&lt;li&gt;database name&lt;/li&gt;
&lt;li&gt;username&lt;/li&gt;
&lt;li&gt;password&lt;/li&gt;
&lt;li&gt;host details&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Below is an example:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;con &amp;lt;- dbConnect(MySQL(), user = &amp;#39;root&amp;#39;, password = &amp;#39;password&amp;#39;,
                 host = &amp;#39;localhost&amp;#39;, dbname = &amp;#39;dbname&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;connection-summary&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Connection Summary&lt;/h3&gt;
&lt;p&gt;We can get a summary or metadata of the connection using &lt;code&gt;summary()&lt;/code&gt; function. We need to specify the name of the MySQL connection object for which we are seeking metadata. Let us look at the metadata of the MySQL connection object we just created:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;summary(con)
# &amp;lt;MySQLConnection:0,0&amp;gt;
#    User: root
#    Host: localhost
#    Dbname: world
#    Connection type: localhost via TCP/IP&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;database-info&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Database Info&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;dbGetInfo()&lt;/code&gt; function can be used to access information about the database to which we have established a connection. Among other things, it will return the following information about host, server and connection:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;dbGetInfo(con)
# $host
# [1]&amp;quot;localhost&amp;quot;
# 
# $user
# [1]&amp;quot;root&amp;quot;
# 
# $dbname
# [1]&amp;quot;world&amp;quot;
# 
# $conType
# [1]&amp;quot;localhost via TCP/IP&amp;quot;
# 
# $serveVersion
# [1]&amp;quot;5.7.9-log&amp;quot;
# 
# $protocolVersion
# [1]10
# 
# $threadId
# [1]7
# 
# $rsld
# list()&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;list-tables&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;List Tables&lt;/h3&gt;
&lt;p&gt;Once we have successfully established a connection to a MySQL database, we can use the &lt;code&gt;dbListTables()&lt;/code&gt; function to assess the list of tables that are present in that particular database. We need to specify the name of the MySQL connection object for which we are seeking the list of tables.&lt;/p&gt;
&lt;p&gt;Below is an example:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# list of tables in the database
dbListTables(con)
# [1] &amp;quot;city&amp;quot;  &amp;quot;country&amp;quot; &amp;quot;countrylanguage&amp;quot; &amp;quot;mtcars&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As you can see, there are four tables in the database to which we established the connection through RMySQL package. In the &lt;code&gt;dbListTables()&lt;/code&gt; function, we have not specified the name of the database but the name of the MySQL connection object we created when we connected to the database.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;list-fields&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;List Fields&lt;/h3&gt;
&lt;p&gt;To get a list of fields or columns in a particular table in the database, we can use the &lt;code&gt;dbListFields()&lt;/code&gt; function. We need to specify the name of the MySQL connection object as well as the table name. If the table exists in the database, the names of the fields will be returned.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# list of fields in table city
dbListFields(con, &amp;quot;city&amp;quot;)
# [1] &amp;quot;ID&amp;quot;          &amp;quot;Name&amp;quot;          &amp;quot;CountryCode&amp;quot;  &amp;quot;District&amp;quot; 
# [5]&amp;quot;Population&amp;quot; &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The name of the table must be enclosed in single/double quotes and the name of the fields is returned as a character vector.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;testing-data-types&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Testing Data Types&lt;/h3&gt;
&lt;p&gt;To test the SQL data type of an object, we can use the &lt;code&gt;dbDataType()&lt;/code&gt; function. We need to specify the driver details as well as the object to test the SQL data type.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# data type
dbDataType(RMySQL::MySQL(), &amp;quot;a&amp;quot;)
# [1] &amp;quot;text&amp;quot;

dbDataType(RMySQL::MySQL(), 1:5)
# [1] &amp;quot;bigint&amp;quot;

dbDataType(RMySQL::MySQL(), 1.5)
# [1] &amp;quot;double&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;querying-data&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Querying Data&lt;/h3&gt;
&lt;p&gt;There are three different methods of querying data from a database:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;import the complete table using &lt;code&gt;dbReadTable()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;send query and retrieve results usinf &lt;code&gt;dbGetQuery()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;submit query using &lt;code&gt;dbSendQuery()&lt;/code&gt; and fetch results using &lt;code&gt;dbFetch()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Let us explore each of the above methods one by one.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;import-table&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Import Table&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;dbReadTable()&lt;/code&gt; can be used to extract an entire table from a MySQL database. We can use this method only if the table is not very big. We need to specify the name of the MySQL connection object and the table. The name of the table must be enclosed in single/double quotes.&lt;/p&gt;
&lt;p&gt;In the below example, we read the entire table named &lt;strong&gt;trial&lt;/strong&gt; from the database:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;dbReadTable(con, &amp;quot;trial&amp;quot;)
#     x y
# 1   1 a 
# 2   2 b
# 3   3 c
# 4   4 d
# 5   5 e
# 6   6 f
# 7   7 g
# 8   8 h
# 9   9 i
# 10 10 j&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>A complete guide to importing data into R</title>
      <link>/post/a-complete-guide-to-importing-data-into-r/</link>
      <pubDate>Sun, 08 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>/post/a-complete-guide-to-importing-data-into-r/</guid>
      <description>&lt;!-- BLOGDOWN-HEAD --&gt;
&lt;!-- /BLOGDOWN-HEAD --&gt;

&lt;!-- BLOGDOWN-BODY-BEFORE --&gt;
&lt;!-- /BLOGDOWN-BODY-BEFORE --&gt;

</description>
    </item>
    
  </channel>
</rss>